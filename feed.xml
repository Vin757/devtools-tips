<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DevTools Tips</title>
  <subtitle>A collection of useful, cross-browser, tips and tricks to get more comfortable with using DevTools.</subtitle>
  <link href="https://devtoolstips.org/feed.xml" rel="self"/>
  <link href="https://devtoolstips.org/"/>
  <id>https://devtoolstips.org/</id>
  <updated>2023-01-06T00:00:00.000Z</updated>
  <author>
    <name>Patrick Brosset</name>
    <email>patrickbrosset@gmail.com</email>
  </author>
  
  <entry>
    <title>Manipulate global objects on page load, before other scripts run</title>
    <link href="https://devtoolstips.org/tips/en/manipulate-global-objects-on-page-load/"/>
    <updated>2023-01-06T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/manipulate-global-objects-on-page-load/</id>
    <content type="html">&lt;p&gt;When a page loads, and all of its global objects are ready, but before the JavaScript code of the page actually kicks-in, is a great time to inject debugging code. For example, it might be useful to replace global functions with ones that contain altered code.&lt;/p&gt;
&lt;p&gt;Safari lets you do this by creating an &lt;strong&gt;Inspector Bootstrap Script&lt;/strong&gt;. This script is guaranteed to run after JavaScript global objects have been created, as long as DevTools is opened.&lt;/p&gt;
&lt;p&gt;To create a bootstrap script:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the &lt;strong&gt;Sources&lt;/strong&gt; tool&lt;/li&gt;
&lt;li&gt;At the bottom of the sidebar, click &lt;strong&gt;Add resource&lt;/strong&gt; (&lt;code&gt;+&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Choose the &lt;strong&gt;Inspector Bootstrap Script&lt;/strong&gt; type.&lt;/li&gt;
&lt;li&gt;Write the code you need.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/manipulate-global-objects-on-page-load.png&quot; alt=&quot;The Sources tab in Safari&#39;s WebInspector, showing the Add resource button and the Bootstrap script type&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To learn more, see &lt;a href=&quot;https://webkit.org/web-inspector/inspector-bootstrap-script/&quot;&gt;Inspector Bootstrap Script&lt;/a&gt; on the webkit blog.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Reload a page when there&#39;s changes on disk</title>
    <link href="https://devtoolstips.org/tips/en/reload-page-after-change/"/>
    <updated>2023-01-05T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/reload-page-after-change/</id>
    <content type="html">&lt;p&gt;While working on a page locally and you&#39;re not using a hot reloading dev server, you need to reload the browser yourself to see the change. You need to do this every time you save a file. Wouldn&#39;t it be great if this happened automatically?&lt;/p&gt;
&lt;p&gt;Polypane contains a &lt;strong&gt;Live reload&lt;/strong&gt; panel that lets you target a folder, and any change in that folder will either reload the page, or replace just the CSS or image file that you changed without reloading the rest of the page. This way you wont have to leave your code editor even when working on a plain HTML or CSS file and the browser will keep up to date.&lt;/p&gt;
&lt;p&gt;Open the &lt;strong&gt;Live Reload&lt;/strong&gt; panel:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Right-click the &lt;strong&gt;reload&lt;/strong&gt; button.&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Live reload&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the configuration screen (see screenshot below) select a directory and click &lt;strong&gt;Start watching&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The reload button will show a lightning bolt when live reloading is active.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/reload-page-after-change.png&quot; alt=&quot;Polypane with the live reload panel and reload context menu visible.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;There are specific options to tweak, like which file system events to listen for, how long to wait before reloading (to account for things like SASS compilation time) and whether to show notifications of which files changed. &lt;a href=&quot;https://polypane.app/docs/live-auto-reloading/&quot;&gt;Learn more here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Test your PWA protocol handlers</title>
    <link href="https://devtoolstips.org/tips/en/test-pwa-protocol-handlers/"/>
    <updated>2023-01-04T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/test-pwa-protocol-handlers/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/Progressive_web_apps&quot;&gt;Progressive Web Apps (PWA)&lt;/a&gt; can register themselves to handle URIs with pre-defined or custom protocols (such as &lt;code&gt;mailto&lt;/code&gt;, &lt;code&gt;geo&lt;/code&gt;, or &lt;code&gt;web+foo&lt;/code&gt;). This is a great capability that makes it possible for installed PWAs to feel more like real apps.&lt;/p&gt;
&lt;p&gt;To learn more about how to register a PWA as a protocol handler, see &lt;a href=&quot;https://learn.microsoft.com/microsoft-edge/progressive-web-apps-chromium/how-to/handle-protocols&quot;&gt;Handle protocols in Progressive Web Apps&lt;/a&gt; or  &lt;a href=&quot;https://developer.chrome.com/articles/url-protocol-handler/&quot;&gt;URL protocol handler registration for PWAs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, testing your protocol handlers can be difficult. Thankfully, DevTools in both Chrome and Edge, provide a nice little tool that makes it all a lot easier.&lt;/p&gt;
&lt;p&gt;To test your handler:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make sure your PWA is installed first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open your PWA in a browser tab, and open DevTools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the &lt;strong&gt;Application&lt;/strong&gt; tool and then click &lt;strong&gt;Manifest&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scroll down to the &lt;strong&gt;Protocol Handlers&lt;/strong&gt; section.&lt;/p&gt;
&lt;p&gt;If you see a green checkmark, that means your protocol handlers were detected correctly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the dropdown to select the protocol you want to test, and the textfield to type the rest of the URI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;strong&gt;Test protocol&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Your installed PWA should now be launched automatically, and you can test your protocol handling code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/test-pwa-protocol-handlers.png&quot; alt=&quot;Microsoft Edge, with the Application tool opened on the side, showing the Protocol Handlers section.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>See formatted JSON responses</title>
    <link href="https://devtoolstips.org/tips/en/see-json-responses/"/>
    <updated>2023-01-04T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/see-json-responses/</id>
    <content type="html">&lt;p&gt;Edge (starting with 110), Firefox and Polypane all have a very nice &lt;strong&gt;JSON viewer&lt;/strong&gt; tool that makes it easy to view JSON responses from your server directly in the browser window.&lt;/p&gt;
&lt;p&gt;You don&#39;t even need to open DevTools for it to work! Just enter the URL to a JSON response in a browser tab, in Edge, Firefox or Polypane, and instead of getting the raw text back, the JSON will be formatted and highlighted.&lt;/p&gt;
&lt;p&gt;You can try it out with &lt;a href=&quot;https://jsonplaceholder.typicode.com/posts/1/comments&quot;&gt;this sample JSON response&lt;/a&gt;, or &lt;a href=&quot;https://codepo8.github.io/json-dummy-data/&quot;&gt;these JSON test files&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/see-json-responses.png&quot; alt=&quot;The JSON viewer in Microsoft Edge.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Note that in Firefox and Polypane, the JSON viewer has a few more options not yet available in Edge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Search within the response.&lt;/li&gt;
&lt;li&gt;See the raw text.&lt;/li&gt;
&lt;li&gt;See the headers.&lt;/li&gt;
&lt;li&gt;Save the file locally.&lt;/li&gt;
&lt;li&gt;Expand and collapse specific sections (Polypane only)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Emulate idle detection states</title>
    <link href="https://devtoolstips.org/tips/en/emulate-idle-detection-states/"/>
    <updated>2023-01-04T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/emulate-idle-detection-states/</id>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Idle_Detection_API&quot;&gt;Idle Detection API&lt;/a&gt; is useful for web developers to detect when the user isn&#39;t interacting with their device. This can be useful for chat applications, for example, to mark the user as away.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this API is only available on Chrome, Opera, and Samsung Internet.&lt;/p&gt;
&lt;p&gt;The problem is testing the code that uses this API can be tricky, or even impossible. In order for your device to be idle, you need to stop using the mouse and keyboard. But in order to check that the code works correctly, you need to interact with the browser DevTools in some way.&lt;/p&gt;
&lt;p&gt;Thankfully, Chrome has a nice little feature in its DevTools to emulate various idle detection states. Here&#39;s how:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using the &lt;strong&gt;&lt;a href=&quot;https://devtoolstips.org/tips/en/execute-commands&quot;&gt;Command Menu&lt;/a&gt;&lt;/strong&gt;, open the &lt;strong&gt;Sensors&lt;/strong&gt; tool.&lt;/li&gt;
&lt;li&gt;Scroll down and look for the &lt;strong&gt;Emulate Idle Detector state&lt;/strong&gt; section.&lt;/li&gt;
&lt;li&gt;Choose one of the states to test if your code does what it&#39;s supposed to.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/emulate-idle-detection-states.png&quot; alt=&quot;Chrome DevTools&#39; Sensors panel, showing a drop-down list with the different states that can be emulated.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.chrome.com/articles/idle-detection/#devtools-support&quot;&gt;Learn more about the Idle Detection API and the corresponding DevTools support&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Debug unwanted scrollbars</title>
    <link href="https://devtoolstips.org/tips/en/debug-unwanted-scrollbars/"/>
    <updated>2023-01-04T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/debug-unwanted-scrollbars/</id>
    <content type="html">&lt;p&gt;Sometimes scrollbars appear on a web page in places we don&#39;t want them to. And when this happens, it&#39;s not always very straightforward to fix the problem. Which container is responsible for the scrollbars in the first place? Which elements are even causing the scrollbars to appear? Why are they too big?&lt;/p&gt;
&lt;p&gt;All very good questions that can cause a lot of time lost and frustration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In Firefox&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;strong&gt;Inspector&lt;/strong&gt; panel, where the DOM tree of the page is displayed, you will notice &lt;strong&gt;scroll&lt;/strong&gt; badges next to all elements that have scrollbars!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/debug-unwanted-scrollbars-1.png&quot; alt=&quot;Firefox DevTools, with the Inspector panel showing the Scroll badge on an element.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This takes care of our first question: which element is scrolling? As for the second question: which elements are causing the scrolling, if you just click on one of the &lt;strong&gt;scroll&lt;/strong&gt; badges, the &lt;strong&gt;Inspector&lt;/strong&gt; will jump to the element (or elements) that caused the scrollbars to appear and highlight them for you!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/debug-unwanted-scrollbars-2.png&quot; alt=&quot;Firefox DevTools, with the Inspector panel showing the Overflow badge on 3 highlighted elements.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now this feature won&#39;t answer our third question: Why are these elements too big? But once you know which elements are the root cause of the problem, you can use the &lt;strong&gt;Rules&lt;/strong&gt; siderbar pane to figure out which CSS properties are responsible for it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Tools/Page_Inspector/How_to/Debug_Scrollable_Overflow&quot;&gt;Learn more here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In Polypane&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When a page has a horizontal scrollbar, Polypane will display an &lt;strong&gt;Overflow icon&lt;/strong&gt; below it. This will tell you why there is a horizontal overflow: either there are elements that are too wide or there is a &lt;code&gt;100vw&lt;/code&gt; applied to the page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/debug-unwanted-scrollbars-3.png&quot; alt=&quot;Polypane, with an overflow icon below a Pane. The text in the tooltip reads &amp;quot;Horizontal overflow detected!&amp;quot;.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;After clicking the icon, Polypane finds the elements causing an overflow in your page and highlights them in red.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/debug-unwanted-scrollbars-4.png&quot; alt=&quot;Polypane showing a page. A single element is highlighted in red and is clearly expanding beyond the edge&amp;quot;.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;From here, you can inspect the element and find the cause of the problem.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://polypane.app/docs/horizontal-overflow/&quot;&gt;Learn more here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Find the most expensive CSS selectors</title>
    <link href="https://devtoolstips.org/tips/en/find-expensive-selectors/"/>
    <updated>2022-12-14T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/find-expensive-selectors/</id>
    <content type="html">&lt;p&gt;When it comes to performance, we often spend time improving our JavaScript code. But CSS has a role to play too.
CSS selectors, in particular, can sometimes be slow to match to the DOM of the page.&lt;/p&gt;
&lt;p&gt;Before rewriting all of your CSS selectors based on some &amp;quot;guidelines&amp;quot; you might have found on the web, it&#39;s really important to measure the performance of your webpage first. Don&#39;t make your selectors unnecessarily complicated because someone somewhere said that a particular selector was slow. Instead, measure the performance of your page, make sure that CSS is having a negative impact, improve your code, and then measure again!&lt;/p&gt;
&lt;p&gt;So, now, how do you know if CSS is having a negative impact, and how to tell which CSS selectors may be at cause?&lt;/p&gt;
&lt;p&gt;Microsoft Edge has a very useful new feature starting with Edge version 110 called &lt;strong&gt;Selector Stats&lt;/strong&gt; that can help with this. Here&#39;s how to use it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the &lt;strong&gt;Performance&lt;/strong&gt; tool in Edge.&lt;/li&gt;
&lt;li&gt;Open the &lt;strong&gt;Settings&lt;/strong&gt; of the tool by using the little cog icon in the top-right corner of the tool.&lt;/li&gt;
&lt;li&gt;Check the &lt;strong&gt;Enable advanced rendering instrumentation (slow)&lt;/strong&gt; box.&lt;/li&gt;
&lt;li&gt;Start the perf recording, run through your scenario, and then stop the recording.&lt;/li&gt;
&lt;li&gt;When the profile has loaded, identify the long &lt;strong&gt;Recalculate Style&lt;/strong&gt; blocks (they are purple).&lt;/li&gt;
&lt;li&gt;Click on one of them.&lt;/li&gt;
&lt;li&gt;In the details section below, the &lt;strong&gt;Selector Stats&lt;/strong&gt; tab appears, click on it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You now have access to the list of CSS selectors that got matched against the DOM tree of the web page during this style recalculation task. You can sort the table by elapsed time or match count to get an understanding of which selectors needed the most time to run.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/find-expensive-selectors.png&quot; alt=&quot;The Edge DevTools Performance tool, showing a recorded profile with a selected Recalculate Style block, and the Selector Stats table below it.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>List all supported console functions</title>
    <link href="https://devtoolstips.org/tips/en/list-console-functions/"/>
    <updated>2022-11-23T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/list-console-functions/</id>
    <content type="html">&lt;p&gt;You&#39;ve probably already used &lt;code&gt;console.log()&lt;/code&gt; in your code to print debugging values to the &lt;strong&gt;Console&lt;/strong&gt; tool in DevTools. But the &lt;code&gt;console&lt;/code&gt; namespace actually has many other functions too!&lt;/p&gt;
&lt;p&gt;To list them all, open the &lt;strong&gt;Console&lt;/strong&gt; tool and type:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/list-console-functions.png&quot; alt=&quot;Chrome, with the Console panel opened on the side in DevTools, showing the  command result, which is an object containing a list of functions such as assert, clear, debug.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Related:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://devtoolstips.org/tips/en/console-table-group-assert&quot;&gt;console.log() is great, but do you know console.table()? console.group()? console.assert()?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/console&quot;&gt;The console documentation on MDN&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://console.spec.whatwg.org/&quot;&gt;The Console API specification&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Hide or pin the information tooltip while inspecting page elements</title>
    <link href="https://devtoolstips.org/tips/en/hide-or-pin-inspect-info-tooltip/"/>
    <updated>2022-10-27T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/hide-or-pin-inspect-info-tooltip/</id>
    <content type="html">&lt;p&gt;When selecting elements from the page using the &lt;strong&gt;inspect&lt;/strong&gt; tool, the hovered elements get highlighted, and an information tooltip follows your mouse around and gives you information about the hovered element.&lt;/p&gt;
&lt;p&gt;You can hide, or pin this information tooltip in Chrome or Edge.&lt;/p&gt;
&lt;h3&gt;To hide the information tooltip&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Start the &lt;strong&gt;inspect&lt;/strong&gt; tool by clicking &lt;strong&gt;Select an element in the page to inspect it&lt;/strong&gt; (the little cursor icon in the top left corner of DevTools).&lt;/li&gt;
&lt;li&gt;Start hovering over elements in the webpage, elements get highlighted and the information tooltip appears.&lt;/li&gt;
&lt;li&gt;Hold the &lt;kbd&gt;Ctrl&lt;/kbd&gt; key on your keyboard, the information tooltip disappears.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/hide-or-pin-inspect-info-tooltip-1.png&quot; alt=&quot;Chrome, with a webpage and devtools opened to the side. The inspect mode is on, the mouse is hovering an element in the webpage, which is highlighted, but the information tooltip is not displayed.&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;To pin the highlight and information tooltip on the current element&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Start the &lt;strong&gt;inspect&lt;/strong&gt; tool by clicking &lt;strong&gt;Select an element in the page to inspect it&lt;/strong&gt; (the little cursor icon in the top left corner of DevTools).&lt;/li&gt;
&lt;li&gt;Start hovering over elements in the webpage, elements get highlighted and the information tooltip appears.&lt;/li&gt;
&lt;li&gt;Hold the &lt;kbd&gt;Ctrl&lt;/kbd&gt; and &lt;kbd&gt;Alt&lt;/kbd&gt; keys on your keyboard, the highlight and information tooltip are pinned on the current element, and you can move your mouse around without losing this information.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/hide-or-pin-inspect-info-tooltip-2.png&quot; alt=&quot;Chrome, with a webpage and devtools opened to the side. The inspect mode is on, the mouse is hovering an element in the webpage, but another one is highlighted and has the info tooltip.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Understand flexbox item sizing</title>
    <link href="https://devtoolstips.org/tips/en/understand-flexbox-item-sizing/"/>
    <updated>2022-10-26T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/understand-flexbox-item-sizing/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox&quot;&gt;Flexbox&lt;/a&gt; is a great way to easily distribute elements and empty space in a row or a column, and create interesting layouts.&lt;/p&gt;
&lt;p&gt;It only takes a couple of CSS properties to create nice layouts that automatically adapt to the available space.&lt;/p&gt;
&lt;p&gt;But, all of this power also means that the complexity that the browser engine deals with is hidden from you, the developer. While this is, in general, fine, it tends to become an issue when your flexbox layout isn&#39;t doing the things you want it to do.&lt;/p&gt;
&lt;p&gt;If you&#39;ve ever used flexbox, there might have been times when you&#39;ve wondered: &lt;em&gt;why is this element this big?&lt;/em&gt;, or &lt;em&gt;why is this element not growing to fill that gap?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Firefox has a wonderful tool that can help with this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Right-click on the flexbox item that you&#39;re interested in and select &lt;strong&gt;Inspect&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;DevTools opens up, and the &lt;strong&gt;Inspector&lt;/strong&gt; tool is displayed, with the corresponding element selected.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Layout&lt;/strong&gt; in the &lt;strong&gt;Inspector&lt;/strong&gt; sidebar.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You now have a diagram that represents the size of the flex item, with some annotations that might be useful for understanding why this particular item has been sized this way.&lt;/p&gt;
&lt;p&gt;Here is the information that might be displayed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content size&lt;/strong&gt;: the size the flex item needs to display its content.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Base size&lt;/strong&gt;: the size that corresponds to the &lt;code&gt;flex-basis&lt;/code&gt; property (or &lt;code&gt;width&lt;/code&gt; in row direction, or &lt;code&gt;height&lt;/code&gt; in column direction). That&#39;s the base size that you wanted to give to this element, before any shrinking or growing happened as part of the flexbox layout.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;: whether the item grew or shrank and by how much. Note that this can also mean &lt;em&gt;how much the item &lt;strong&gt;wanted&lt;/strong&gt; to grow or shrink&lt;/em&gt;, but it might not correspond to the final size. See below.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max or min size&lt;/strong&gt;: whether the item has a max or min size defined (e.g. using &lt;code&gt;min-width&lt;/code&gt; or &lt;code&gt;max-width&lt;/code&gt; in row direction). This can &lt;em&gt;clamp&lt;/em&gt; the item, even if it wanted to grow or shrink more.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Final size&lt;/strong&gt;: the actual final size of the item.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/understand-flexbox-item-sizing.png&quot; alt=&quot;Firefox, with the DevTools Inspector tool opened, showing the Layout sidebar that contains the flex item diagram.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Customize keyboard shortcuts</title>
    <link href="https://devtoolstips.org/tips/en/customize-keyboard-shortcuts/"/>
    <updated>2022-10-26T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/customize-keyboard-shortcuts/</id>
    <content type="html">&lt;p&gt;DevTools comes with tons of keyboard shortcuts. Some are well known (like &lt;code&gt;F12&lt;/code&gt; to open DevTools), but there are many others which you might not be familiar with, and which could make your life easier.&lt;/p&gt;
&lt;p&gt;Chrome and Edge have a screen where you can not only find all of the keyboard shortcuts, but also &lt;strong&gt;customize&lt;/strong&gt; them. Chrome enabled this screen in version 107, and Edge has had it for a longer while.&lt;/p&gt;
&lt;p&gt;To list the shortcuts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open DevTools (&lt;code&gt;F12&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Go to the Settings by pressing &lt;code&gt;F1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Shortcuts&lt;/strong&gt; in the sidebar.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can also find the full list of shortcuts here: &lt;a href=&quot;https://learn.microsoft.com/microsoft-edge/devtools-guide-chromium/shortcuts/&quot;&gt;Edge&lt;/a&gt;, &lt;a href=&quot;https://developer.chrome.com/docs/devtools/shortcuts/&quot;&gt;Chrome&lt;/a&gt;, &lt;a href=&quot;https://firefox-source-docs.mozilla.org/devtools-user/keyboard_shortcuts/index.html&quot;&gt;Firefox&lt;/a&gt;, &lt;a href=&quot;https://webkit.org/web-inspector/keyboard-shortcuts/&quot;&gt;Safari&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To customize the shortcuts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hover one of the shortcuts and click the edit icon (the icon looks like a pencil).&lt;/li&gt;
&lt;li&gt;Press the new key combination you want for this shortcut.&lt;/li&gt;
&lt;li&gt;You can then save the new shortcut, cancel your change, or revert to the shortcut&#39;s initial value.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/customize-keyboard-shortcuts.png&quot; alt=&quot;The Settings panel in Microsoft Edge, showing the keyboard shortcut customization screen.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Re-use scripts as snippets</title>
    <link href="https://devtoolstips.org/tips/en/use-scripts-as-snippets/"/>
    <updated>2022-10-25T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/use-scripts-as-snippets/</id>
    <content type="html">&lt;p&gt;The &lt;strong&gt;Console&lt;/strong&gt; is great to write short JavaScript expressions that read from the document or manipulate it. But it&#39;s also a terrible editor.&lt;/p&gt;
&lt;p&gt;You can actually use a full editor in Edge, Chrome, and Safari to write more complex scripts and run them in the context of the current page and even keep them for later re-use.&lt;/p&gt;
&lt;p&gt;Note: if you&#39;re looking for a way to do this in Firefox, there isn&#39;t currently one. However, you can &lt;a href=&quot;https://devtoolstips.org/tips/en/multi-line-console/&quot;&gt;write code on multiple lines&lt;/a&gt; which helps a lot already, and even search through previous Console expressions by pressing &lt;kbd&gt;F9&lt;/kbd&gt; in the &lt;strong&gt;Console&lt;/strong&gt; tool.&lt;/p&gt;
&lt;h3&gt;In Edge &amp;amp; Chrome&lt;/h3&gt;
&lt;p&gt;In Chromium-based browsers, these are called &lt;a href=&quot;https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/javascript/snippets&quot;&gt;&lt;strong&gt;snippets&lt;/strong&gt;&lt;/a&gt; and you can access them in the &lt;strong&gt;Sources&lt;/strong&gt; tool by clicking &lt;strong&gt;Snippets&lt;/strong&gt; in the left hand side toolbar (you may have to use the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; to reach them).&lt;/p&gt;
&lt;p&gt;You can create as many named snippets as you like and remove ones you don&#39;t need any more.&lt;/p&gt;
&lt;p&gt;Snippets have full access to the window object and you can use any of the console API methods in them too. For example, this script would replace each image in the document with its alternative text:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;img&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; txt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;span&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;   txt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerText &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;alt&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;   i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parentNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replaceChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;txt&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;   console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;alt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can run snippets by pressing &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;Enter&lt;/kbd&gt; (or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;Enter&lt;/kbd&gt; on mac) or using the button on the bottom of the editor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/use-scripts-as-snippets-1.png&quot; alt=&quot;The snippets editor in the Sources tool with a snippet open in the editor.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Even better, you can use the &lt;a href=&quot;https://devtoolstips.org/tips/en/execute-commands&quot;&gt;Command menu&lt;/a&gt; to run snippets more easily. Simply press &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; (or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; on mac) and type &lt;code&gt;!&lt;/code&gt; followed by the name of your Snippet.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/use-scripts-as-snippets-2.gif&quot; alt=&quot;Running a snippet from the Command menu.&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;In Safari&lt;/h3&gt;
&lt;p&gt;In Safari, these scripts are called Console Snippets and can also be created from the &lt;strong&gt;Sources&lt;/strong&gt; tool by clicking the &lt;code&gt;+&lt;/code&gt; icon at the bottom of the tool, and choosing &lt;strong&gt;Console Snippet...&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/use-scripts-as-snippets-3.gif&quot; alt=&quot;Creating a snippet in Safari.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Simulate different devices and screen sizes</title>
    <link href="https://devtoolstips.org/tips/en/simulate-devices/"/>
    <updated>2022-10-19T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/simulate-devices/</id>
    <content type="html">&lt;p&gt;There is a great mode in all major browser developer tools that makes it really easy to test your webpage under different screen sizes and even simulate other devices.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/simulate-devices.gif&quot; alt=&quot;Animation showing how the tool makes it easy to resize the screen size by dragging the mouse.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To enable it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In Chrome:&lt;/p&gt;
&lt;p&gt;In DevTools, click &lt;strong&gt;Toggle Device Toolbar&lt;/strong&gt; or press &lt;kbd&gt;Ctrl+Shift+M&lt;/kbd&gt; (or &lt;kbd&gt;Cmd+Shift+M&lt;/kbd&gt; on macOS).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Edge:&lt;/p&gt;
&lt;p&gt;In DevTools, click &lt;strong&gt;Toggle device emulation&lt;/strong&gt; or press &lt;kbd&gt;Ctrl+Shift+M&lt;/kbd&gt; (or &lt;kbd&gt;Cmd+Shift+M&lt;/kbd&gt; on macOS).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Firefox:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can do it even without opening DevTools: go to &lt;strong&gt;Application menu&lt;/strong&gt; &amp;gt; &lt;strong&gt;More tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;Responsive design mode&lt;/strong&gt;, or press &lt;kbd&gt;Ctrl+Shift+M&lt;/kbd&gt; (or &lt;kbd&gt;Cmd+Shift+M&lt;/kbd&gt; on macOS).&lt;/li&gt;
&lt;li&gt;Or, if you&#39;re in DevTools, click &lt;strong&gt;Responsive Design Mode&lt;/strong&gt;, or press &lt;kbd&gt;Ctrl+Shift+M&lt;/kbd&gt; (or &lt;kbd&gt;Cmd+Shift+M&lt;/kbd&gt; on macOS).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Safari:&lt;/p&gt;
&lt;p&gt;In the &lt;strong&gt;Develop&lt;/strong&gt; menu bar item, click &lt;strong&gt;Enter Responsive Design Mode&lt;/strong&gt;, or press &lt;kbd&gt;Ctrl+Command+R&lt;/kbd&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Polypane:&lt;/p&gt;
&lt;p&gt;This is the default mode in Polypane. Unique to Polypane is that it allows you to see multiple different sizes side-by-side.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/simulate-devices-polypane.png&quot; alt=&quot;Polypane showing three different devices side-by-side.&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When enabled, you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Resize the screen size by hand.&lt;/li&gt;
&lt;li&gt;Choose one of the pre-defined devices to simulate. &lt;strong&gt;Note&lt;/strong&gt;: this option only simulates the screen size, user agent string, and touch events (when necessary), but doesn&#39;t render the page like the real device would. Always test your webpage with the real device too.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devtoolstips.org/tips/en/add-new-devices&quot;&gt;Create your own simulated devices&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devtoolstips.org/tips/en/take-in-device-screenshots&quot;&gt;Capture screenshots&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devtoolstips.org/tips/en/throttle-network-speed&quot;&gt;Throttle the network speed to test your website on slower connections&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;And more.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Ignore JavaScript code to ease debugging</title>
    <link href="https://devtoolstips.org/tips/en/ignore-scripts/"/>
    <updated>2022-10-17T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/ignore-scripts/</id>
    <content type="html">&lt;p&gt;Debugging JavaScript can quickly get out of hand when you have a lot of code and many functions that call each other.&lt;/p&gt;
&lt;p&gt;What&#39;s even worse is when a lot of this code isn&#39;t even yours. This can happen when you use frameworks or libraries. You don&#39;t really want to debug the library code, but sometimes it gets in the way when trying to step through your own code while using breakpoints.&lt;/p&gt;
&lt;p&gt;To help with this, you can ignore third-party scripts (like library source files) in DevTools. When ignored, those files don&#39;t appear in your callstacks when debugging, and you don&#39;t step through them anymore.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To ignore a script in Chrome: right-click anywhere in the file and click &lt;strong&gt;Add script to ignore list&lt;/strong&gt; (&lt;a href=&quot;https://developer.chrome.com/docs/devtools/javascript/reference/#ignore-list&quot;&gt;learn more&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;To ignore a script in Edge: right-click anywhere in the file and click &lt;strong&gt;Mark as Library code&lt;/strong&gt; (&lt;a href=&quot;https://learn.microsoft.com/microsoft-edge/devtools-guide-chromium/javascript/reference#ignore-a-script-or-pattern-of-scripts&quot;&gt;learn more&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;And, in Firefox: right-click in the file and click &lt;strong&gt;Ignore source&lt;/strong&gt;. Or click the &lt;strong&gt;Ignore source&lt;/strong&gt; button in the bottom left corner of the file (&lt;a href=&quot;https://firefox-source-docs.mozilla.org/devtools-user/debugger/how_to/ignore_a_source/index.html&quot;&gt;learn more&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Firefox, you can go even further than this and ignore parts of a script only. Maybe you have a utility function in your file that gets called over and over again but isn&#39;t related to what you&#39;re trying to debug.&lt;/p&gt;
&lt;p&gt;To ignore part of script only in Firefox:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the code you want to ignore.&lt;/li&gt;
&lt;li&gt;Right-click the select and click &lt;strong&gt;Ignore lines&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/ignore-scripts.png&quot; alt=&quot;Firefox ignore line contextual menu option, displayed on a few lines of selected JavaScript code.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Edit JavaScript functions while debugging to test a quick fix</title>
    <link href="https://devtoolstips.org/tips/en/edit-javascript-while-debugging/"/>
    <updated>2022-10-17T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/edit-javascript-while-debugging/</id>
    <content type="html">&lt;p&gt;Sometimes, when debugging JavaScript code in DevTools, you may want to test a quick change and see whether that fixes the bug.&lt;/p&gt;
&lt;p&gt;Usually, this involves the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pause at a breakpoint, or an error.&lt;/li&gt;
&lt;li&gt;Look at the code and local variables to understand the problem.&lt;/li&gt;
&lt;li&gt;Go to your editor, make the change to the code, and save it.&lt;/li&gt;
&lt;li&gt;Go back to the browser, reload the page, hit the breakpoint again (which may involve doing a bunch of other steps first).&lt;/li&gt;
&lt;li&gt;Check if the fix was right.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now in Chromium-based browsers, you can test those quick fixes much faster without ever leaving DevTools:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pause at a breakpoint, or an error.&lt;/li&gt;
&lt;li&gt;Look at the code and local variables to understand the problem.&lt;/li&gt;
&lt;li&gt;Make your change &lt;strong&gt;directly in the source shown in DevTools&lt;/strong&gt;, and press &lt;kbd&gt;Ctrl+S&lt;/kbd&gt; (or &lt;kbd&gt;Cmd+S&lt;/kbd&gt;) to save it.&lt;/li&gt;
&lt;li&gt;The function is automatically restarted, with the new code, and you can verify your fix right away.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This means you don&#39;t need to leave DevTools, make your change to the original code, reload the page, and wait to hit the breakpoint or error again!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-javascript-while-debugging.gif&quot; alt=&quot;Animation showing that it is possible to write code in the Sources panel, while debugging, to test fixes.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Install or create extensions to customize DevTools</title>
    <link href="https://devtoolstips.org/tips/en/extend-devtools/"/>
    <updated>2022-10-14T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/extend-devtools/</id>
    <content type="html">&lt;p&gt;There&#39;s &lt;a href=&quot;https://devtoolstips.org/tips/en/discover-all-tools&quot;&gt;a lot of tools&lt;/a&gt; in DevTools already, probably more than you use. But in some cases, you may need very specific tools that aren&#39;t available by default.&lt;/p&gt;
&lt;p&gt;Thankfully, DevTools can be extended with custom tools! You can either download extensions others have created to customize the DevTools UI, or even &lt;strong&gt;create your own&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, you can download the &lt;a href=&quot;https://github.com/facebook/react/tree/main/packages/react-devtools-extensions#installation&quot;&gt;React DevTools extension&lt;/a&gt; for Chrome, Firefox, or Edge.&lt;/p&gt;
&lt;p&gt;All browsers have their own extension stores where you can find other DevTools extensions: &lt;a href=&quot;https://chrome.google.com/webstore/category/extensions&quot;&gt;Chrome&lt;/a&gt;, &lt;a href=&quot;https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home&quot;&gt;Edge&lt;/a&gt;, &lt;a href=&quot;https://addons.mozilla.org/firefox/&quot;&gt;Firefox&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/safari/extensions/&quot;&gt;Safari&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To go further, you can create your own extensions. Here are a few links to learn about developing your own extensions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/microsoft-edge/extensions-chromium/developer-guide/devtools-extension&quot;&gt;Create an extension that customizes the DevTools UI&lt;/a&gt; on learn.microsoft.com.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/docs/extensions/mv3/devtools/&quot;&gt;Extending DevTools&lt;/a&gt; on developer.chrome.com.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/Extending_the_developer_tools&quot;&gt;Extending the developer tools&lt;/a&gt; on MDN.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/safariservices/safari_web_extensions/adding_a_web_development_tool_to_safari_web_inspector&quot;&gt;Adding a web development tool to Safari Web Inspector&lt;/a&gt; on developer.apple.com.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/extend-devtools.png&quot; alt=&quot;Microsoft Edge, with DevTools opened, showing a custom panel.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Use DevTools in another language</title>
    <link href="https://devtoolstips.org/tips/en/use-another-language/"/>
    <updated>2022-10-04T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/use-another-language/</id>
    <content type="html">&lt;p&gt;If you want to use DevTools in another language than English, you can do it across all major browsers.&lt;/p&gt;
&lt;p&gt;In Firefox, DevTools will always match the language of the browser, so if you downloaded Firefox in French for instance, then DevTools will be in French too.&lt;/p&gt;
&lt;p&gt;In Edge &amp;amp; Chrome, you can choose between English and the language the browser is in. To do so,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to Settings.&lt;/li&gt;
&lt;li&gt;Go to Languages.&lt;/li&gt;
&lt;li&gt;Add the language of your choice and select &amp;quot;Display Microsoft Edge in this language&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then in DevTools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the settings (press F1 or click the cog icon).&lt;/li&gt;
&lt;li&gt;Click the &amp;quot;Match browser language&amp;quot; checkbox.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alternatively, you can only change the language of the DevTools using the following steps,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open DevTools Settings (&lt;kbd&gt;F1&lt;/kbd&gt; or &lt;kbd&gt;Shift+?&lt;/kbd&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Preferences&lt;/strong&gt; &amp;gt; &lt;strong&gt;Appearance&lt;/strong&gt; &amp;gt; &lt;strong&gt;Language&lt;/strong&gt;. Select a language and then click &lt;strong&gt;Reload DevTools&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For Safari, you can set the app level language in MacOS by using &lt;strong&gt;System preferences&lt;/strong&gt; &amp;gt; &lt;strong&gt;Language &amp;amp; Region&lt;/strong&gt; &amp;gt; &lt;strong&gt;Apps&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Add the Safari app and choose the language. Restart Safari.  and then the browser &amp;amp; the DevTools will use the selected language.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/use-another-language.png&quot; alt=&quot;The settings panel in Edge showing a checkbox to match devtools with the browser language.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Access results from recent Console evaluations</title>
    <link href="https://devtoolstips.org/tips/en/access-recent-console-results/"/>
    <updated>2022-09-29T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/access-recent-console-results/</id>
    <content type="html">&lt;p&gt;Imagine you evaluate a long expression like &lt;code&gt;$$(&#39;*&#39;).map(el =&amp;gt; Object.values(el.attributes).map(attr =&amp;gt; {return {name: attr.name, value: attr.value}}))&lt;/code&gt; which extracts the attributes from all of the DOM elements on the page.&lt;/p&gt;
&lt;p&gt;Now imagine you want to access one element in particular from the giant returned array. You could just type the same expression again and add &lt;code&gt;[14]&lt;/code&gt; at the end of it to access the 15th item.&lt;/p&gt;
&lt;p&gt;Or, you can use this great Console trick to reference the previous result without having to type it again:&lt;/p&gt;
&lt;p&gt;To access the last result just type &lt;code&gt;$_&lt;/code&gt; in the Console. In the above example, you would therefore type &lt;code&gt;$_[14]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/access-recent-console-results-firefox.png&quot; alt=&quot;The Console in Firefox DevTools showing how using $_ refers to the previous Console result&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Safari goes even further&lt;/strong&gt; and provides shortcuts from &lt;code&gt;$1&lt;/code&gt; all the way to &lt;code&gt;$99&lt;/code&gt; to access previous results too. So if you had evaluated many expressions in the Console before, you can refer to their results by using one of the &lt;code&gt;$n&lt;/code&gt; shortcuts where &lt;code&gt;$1&lt;/code&gt; is the first evaluated expression, &lt;code&gt;$2&lt;/code&gt; is the second one, and so on (&lt;a href=&quot;https://webkit.org/web-inspector/console-command-line-api/#$1&quot;&gt;more information here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/access-recent-console-results-safari.png&quot; alt=&quot;The Console in Safari Web Inspector showing how using $1, $2, $3, ... refer to previous Console results&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Simulate a different latitude/longitude geolocation</title>
    <link href="https://devtoolstips.org/tips/en/simulate-geolocation/"/>
    <updated>2022-09-15T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/simulate-geolocation/</id>
    <content type="html">&lt;p&gt;If your website has features that depend on the geographic location of your users, you can test these features by simulating different geolocations right from DevTools!&lt;/p&gt;
&lt;p&gt;Chrome and Edge DevTools have a built-in way to simulate any location:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In DevTools, press &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; (or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; on mac) to open the &lt;a href=&quot;https://devtoolstips.org/tips/en/execute-commands&quot;&gt;Command Menu&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Type &amp;quot;Sensors&amp;quot; in the command menu and press &lt;kbd&gt;Enter&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Sensors&lt;/strong&gt; tool, find the &lt;strong&gt;Location&lt;/strong&gt; drop-down.&lt;/li&gt;
&lt;li&gt;Choose any of the preset locations (or create your own by clicking &lt;strong&gt;Manage&lt;/strong&gt;) and refresh the webpage.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the following screenshot, the webpage is google.com and the location was set to São Paulo, Brazil. After a refresh, the google.com homepage shows the text in Portuguese.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/simulate-geolocation.png&quot; alt=&quot;Chrome, showing Google in Portuguese, with DevTools opened to the side and the Sensors tool showing that the geolocation was set to São Paulo.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Find inactive CSS styles</title>
    <link href="https://devtoolstips.org/tips/en/find-inactive-styles/"/>
    <updated>2022-09-02T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/find-inactive-styles/</id>
    <content type="html">&lt;p&gt;Sometimes we write CSS code that&#39;s entirely valid but has absolutely no effect at all, and this can be frustrating.&lt;/p&gt;
&lt;p&gt;Indeed, there are many cases where a CSS declaration has no effect on an element. One common example is using &lt;code&gt;width&lt;/code&gt; on an inline element. While this example may be known to most, there are so many different CSS properties and possible ways to combine them that it&#39;s impossible to know all of the cases where CSS won&#39;t have any effect.&lt;/p&gt;
&lt;p&gt;Firefox innovated with very cool feature that helps find these &amp;quot;inactive&amp;quot; CSS properties, and Chromium-based browsers now also have something!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In Firefox&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select an element in the &lt;strong&gt;Inspector&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Look at its applied styles in the &lt;strong&gt;Rules&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Inactive properties are greyed out and have an information icon next to them.&lt;/li&gt;
&lt;li&gt;Hover over the information icon to know why the property is inactive.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/find-inactive-styles.png&quot; alt=&quot;Part of the Rules panel in Firefox, showing a greyed out flex-grow property, with a tooltip saying that the property is inactive because the selected element is not a flex item.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In Chrome or Edge&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure the feature is enabled:
&lt;ul&gt;
&lt;li&gt;Use Chrome or Edge 106 or later.&lt;/li&gt;
&lt;li&gt;In DevTools go to the Settings (press &lt;kbd&gt;F1&lt;/kbd&gt;).&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;Experiments&lt;/strong&gt; tab, enable the &lt;strong&gt;Enable CSS Authoring hints for inactive rules, deprecated properties, etc.&lt;/strong&gt; checkbox, close the Settings, and reload DevTools when prompted.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Select an element in the &lt;strong&gt;Elements&lt;/strong&gt; tool.&lt;/li&gt;
&lt;li&gt;Look at its applied styles in the &lt;strong&gt;Styles&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Inactive properties have an information icon next to them. If you see one, that means an authoring hint is available for this property.&lt;/li&gt;
&lt;li&gt;Hover over the icon to reveal the tooltip with information about the property.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/find-inactive-styles-chromium.png&quot; alt=&quot;Part of the Styles panel in Chrome, showing a greyed out align-content property, with a tooltip saying that the property is inactive because the selected flex container is not set to wrap.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this is not an audit tool! It won&#39;t help you remove useless CSS rules throughout your codebase. Its value is when inspecting specific elements only, to easily detect when a given CSS property isn&#39;t doing anything on it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Get the recently selected DOM nodes in the console</title>
    <link href="https://devtoolstips.org/tips/en/get-recently-selected-dom-nodes-in-console/"/>
    <updated>2022-08-31T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/get-recently-selected-dom-nodes-in-console/</id>
    <content type="html">&lt;p&gt;If you type &lt;code&gt;$0&lt;/code&gt; in the &lt;strong&gt;Console&lt;/strong&gt; tool, in any browser, the currently selected DOM node is returned. This is very handy. To learn more, check &lt;a href=&quot;https://devtoolstips.org/tips/en/get-current-element-in-console&quot;&gt;Get the selected element in the console&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On top of this, in Edge, Polypane and Chrome, the &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, &lt;code&gt;$3&lt;/code&gt;, and &lt;code&gt;$4&lt;/code&gt; shortcuts are also defined!&lt;/p&gt;
&lt;p&gt;They can be used to access the recently selected DOM nodes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$1&lt;/code&gt; returns the DOM node you selected just before the currently selected one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$2&lt;/code&gt; returns the DOM node you selected before that.&lt;/li&gt;
&lt;li&gt;And so on!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/get-recently-selected-dom-nodes-in-console.gif&quot; alt=&quot;Chrome DevTools, with the Elements and Console tools shown. 5 DOM nodes are selected, one after the other, and then the $0, $1, $2, $3, and $4 shortcuts are used in the Console, showing how they refer to the previously selected DOM nodes.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Inspect CSS animations</title>
    <link href="https://devtoolstips.org/tips/en/inspect-css-animations/"/>
    <updated>2022-08-17T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/inspect-css-animations/</id>
    <content type="html">&lt;p&gt;Modern browser DevTools provide a handy tool to inspect and modify CSS animations, CSS transitions, and Web animations. These tools not only help you debug animations, but also let you modify the various animation properties.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For Chromium browsers (Chrome/Edge)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Open the &lt;a href=&quot;https://devtoolstips.org/tips/en/execute-commands&quot;&gt;Command Menu&lt;/a&gt; (&lt;code&gt;Cmd+Shift+P&lt;/code&gt; or &lt;code&gt;Ctrl+Shift+P&lt;/code&gt;), type &amp;quot;Show Animations&amp;quot;, and press Enter.
This will open the &lt;strong&gt;Animations&lt;/strong&gt; tool.&lt;/p&gt;
&lt;p&gt;Next, trigger an animation in the webpage to record it in the tool. The &lt;strong&gt;Animations&lt;/strong&gt; tool is divided into 4 sections:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Controls&lt;/strong&gt;: From here, you can clear all currently captured animation groups, or change the speed of the currently selected animation group.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Overview&lt;/strong&gt;: Select an animation group here to inspect and modify it in the Details pane.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Timeline&lt;/strong&gt;: Pause and start an animation from here, or jump to a specific point in the animation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Details&lt;/strong&gt;: Inspect and modify the currently selected animation group like adding delay or changing timing duration.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;For Firefox&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Inspect an element that uses an animation in the &lt;strong&gt;Inspector&lt;/strong&gt; tool (or a parent of that element) and open the &lt;strong&gt;Animations&lt;/strong&gt; pane from the right sidebar.&lt;/p&gt;
&lt;p&gt;Next, trigger the animation to view its timeline in the &lt;strong&gt;Animations&lt;/strong&gt; pane.&lt;/p&gt;
&lt;p&gt;Use the draggable vertical line to scrub through the timeline or jump to a specific point. You can also change the playback speed and do much &lt;a href=&quot;https://firefox-source-docs.mozilla.org/devtools-user/page_inspector/how_to/work_with_animations/index.html&quot;&gt;more&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/inspect-css-animation.gif&quot; alt=&quot;Animation of Chrome devtools showing how to inspect and modify CSS animations using the Animation inspector.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Remove annoying page overlays and other elements</title>
    <link href="https://devtoolstips.org/tips/en/remove-annoying-overlays/"/>
    <updated>2022-08-09T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/remove-annoying-overlays/</id>
    <content type="html">&lt;p&gt;A lot of websites these days get covered with overlays and crammed with lots of ads and other things that make it hard to just read the content of the page.&lt;/p&gt;
&lt;p&gt;To get rid of an annoying overlay, or any other element for that matter:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open DevTools (press &lt;kbd&gt;F12&lt;/kbd&gt;).&lt;/li&gt;
&lt;li&gt;Start the inspect tool by clicking the pointer icon in the DevTools toolbar.&lt;/li&gt;
&lt;li&gt;On the webpage, select the element which you want to remove. As you hover elements, they will get highlighted. Use this highlight to make sure you&#39;re selecting the right element.&lt;/li&gt;
&lt;li&gt;Now, with the element selected in the &lt;strong&gt;Inspector&lt;/strong&gt;/&lt;strong&gt;Elements&lt;/strong&gt; panel, just press &lt;kbd&gt;Delete&lt;/kbd&gt; on your keyboard to remove the element.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/remove-annoying-overlays.gif&quot; alt=&quot;Animation showing the whole flow from selecting the element with the inspect tool and pressing delete, resulting in the element disappearing from the page.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Credits go to &lt;a href=&quot;https://christianheilmann.com/&quot;&gt;Chris Heilmann&lt;/a&gt; for this tip and other cool DevTools tips for non-developers, which you can find here: &lt;a href=&quot;https://codepo8.github.io/web-cheatcodes/&quot;&gt;web cheatcodes&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Copy CSS selector of an element</title>
    <link href="https://devtoolstips.org/tips/en/copy-css-selector/"/>
    <updated>2022-07-26T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/copy-css-selector/</id>
    <content type="html">&lt;p&gt;Sometimes we need to uniquely identify an element that lacks an identifier, so that it can be referenced in JavaScript and other places. All the major browsers have an option to build a unique CSS selector for an element and then copy it to the clipboard.&lt;/p&gt;
&lt;p&gt;In the Element tree, right click on the element and select,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;Chrome&lt;/strong&gt; and &lt;strong&gt;Edge&lt;/strong&gt;, &lt;code&gt;Copy&lt;/code&gt; &amp;gt; &lt;code&gt;Copy selector&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;Firefox&lt;/strong&gt;, &lt;code&gt;Copy&lt;/code&gt; &amp;gt; &lt;code&gt;CSS Selector&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;Safari&lt;/strong&gt;, &lt;code&gt;Copy&lt;/code&gt; &amp;gt; &lt;code&gt;Selector Path&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will copy the CSS selector for the element, which can then be used in JavaScript to reference the element in the following way,&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#maincontent &gt; div &gt; h2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;104&lt;/span&gt; DevTools Tips&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/copy-css-selector.png&quot; alt=&quot;Edge DevTools, showing how to access the Copy CSS selector option.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Copy an element&#39;s JavaScript path</title>
    <link href="https://devtoolstips.org/tips/en/copy-element-js-path/"/>
    <updated>2022-07-22T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/copy-element-js-path/</id>
    <content type="html">&lt;p&gt;JavaScript often needs references to DOM nodes on the page. Getting a reference is sometimes easy with &lt;code&gt;document.getElementById()&lt;/code&gt; or similar. Other times however, a more complicated CSS selector needs to be created and used with &lt;code&gt;document.querySelector()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To automatically get the right JavaScript expression to use for any node:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find the node you are interested in in the &lt;strong&gt;Elements&lt;/strong&gt; tool.&lt;/li&gt;
&lt;li&gt;Right-click the node and select &lt;strong&gt;Copy&lt;/strong&gt; &amp;gt; &lt;strong&gt;Copy JS path&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The right &lt;code&gt;document.querySelector()&lt;/code&gt; expression is now in your clipboard. You can paste it anywhere you need it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/copy-element-js-path.png&quot; alt=&quot;The Elements tool in Edge showing the context menu on an element, with the Copy JS path option.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Jump from a label `for` attribute to the linked input (and more)</title>
    <link href="https://devtoolstips.org/tips/en/jump-to-referenced-elements/"/>
    <updated>2022-07-01T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/jump-to-referenced-elements/</id>
    <content type="html">&lt;p&gt;In Firefox, you can jump from an element that references the ID attribute of an other element, to that other element, by &lt;kbd&gt;Cmd&lt;/kbd&gt;+clicking (or &lt;kbd&gt;Ctrl&lt;/kbd&gt;+clicking) the attribute.&lt;/p&gt;
&lt;p&gt;Here is a common example for when this is useful:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Label&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;...&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above example, clicking the &lt;code&gt;foo&lt;/code&gt; attribute value in the &lt;code&gt;label&lt;/code&gt; element (while holding the &lt;kbd&gt;Cmd&lt;/kbd&gt; or &lt;kbd&gt;Ctrl&lt;/kbd&gt; key) will jump to the &lt;code&gt;input&lt;/code&gt; element and select it. This can be very useful if the elements are far apart in the DOM tree.&lt;/p&gt;
&lt;p&gt;Note that this also works for other kinds of &amp;quot;links&amp;quot; like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;button form=&amp;quot;formID&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;input list=&amp;quot;datalistID&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;td headers=&amp;quot;header1ID,header2ID&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/jump-to-referenced-elements.gif&quot; alt=&quot;Animation showing the Firefox DevTools Inspector panel, the mouse clicks the for attribute of a label element and the selection jumps to the related input element.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Thank you to &lt;a href=&quot;https://twitter.com/mmatuzo&quot;&gt;Manuel Matuzović&lt;/a&gt; for &lt;a href=&quot;https://twitter.com/mmatuzo/status/1542768792836636672&quot;&gt;sharing on twitter&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Fix color contrast issues using the element tooltip</title>
    <link href="https://devtoolstips.org/tips/en/fix-color-contrast-issues-with-element-tooltip/"/>
    <updated>2022-06-30T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/fix-color-contrast-issues-with-element-tooltip/</id>
    <content type="html">&lt;p&gt;There are multiple ways to detect and fix color contrast issues with DevTools, but here is a nice one to keep in mind. It&#39;s not straightforward to use and takes a few steps, but makes it very nice to see the resulting contrast ratio as you change the color value.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/argyleink&quot;&gt;Adam Argyle&lt;/a&gt; for &lt;a href=&quot;https://twitter.com/argyleink/status/1255236249255845892&quot;&gt;sharing this on Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In the &lt;strong&gt;Styles&lt;/strong&gt; panel, click on the color value you want to change, to focus the field.&lt;/li&gt;
&lt;li&gt;Press &lt;kbd&gt;Ctrl+Shift+C&lt;/kbd&gt; (or &lt;kbd&gt;Cmd+Shift+C&lt;/kbd&gt; on Mac) to start the inspect tool.&lt;/li&gt;
&lt;li&gt;Position your mouse over the element which you are changing the color for. Don&#39;t click anywhere, we want to keep the color value field focused, just hover over the element so the element tooltip appears.&lt;/li&gt;
&lt;li&gt;Now change the color value with the keyboard and check the contrast ratio in the tooltip as you do so.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/fix-color-contrast-issues-with-element-tooltip.gif&quot; alt=&quot;Animation of the Elements panel in Microsoft Edge. User clicks on color value, then activates the inspect tool, then hovers over an element on the page, then uses the arrow keys to change the color. We see the element tooltip showing the background and text colors as well as the resulting contrast.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Related tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://devtoolstips.org/tips/en/detect-low-color-contrast&quot;&gt;Detect low color contrast issues&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devtoolstips.org/tips/en/fix-color-contrast-issues&quot;&gt;Fix low color contrast issues&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Empty the cache and hard refresh</title>
    <link href="https://devtoolstips.org/tips/en/empty-cache-refresh/"/>
    <updated>2022-06-14T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/empty-cache-refresh/</id>
    <content type="html">&lt;p&gt;Here is a nice tip to quickly empty your cache and refresh the page, in order to test new code changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Chrome, or Edge, open DevTools (&lt;kbd&gt;F12&lt;/kbd&gt;). This step is not needed for Polypane.&lt;/li&gt;
&lt;li&gt;Right-click on the page refresh icon, in the browser toolbar.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Empty cache and hard refresh&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/empty-cache-refresh.png&quot; alt=&quot;The Microsoft Edge browser toolbar, showing the contextual menu of the refresh button, with the empty cache and hard refresh menu item.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Quickly spot out-of-viewport elements</title>
    <link href="https://devtoolstips.org/tips/en/spot-out-of-viewport-elements/"/>
    <updated>2022-06-02T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/spot-out-of-viewport-elements/</id>
    <content type="html">&lt;p&gt;Sometimes, either by accident or on purpose, HTML elements end up outside of the visible browser viewport. When they do, it can be really hard to find them in DevTools. Indeed, the DOM tree in the &lt;strong&gt;Elements&lt;/strong&gt; tool is nice and all, but it&#39;s not super easy to navigate especially when it&#39;s huge and deeply nested.&lt;/p&gt;
&lt;p&gt;Here&#39;s a nice tip to quickly find out-of-viewport elements, by using the &lt;strong&gt;3D View&lt;/strong&gt; tool in Edge DevTools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open DevTools in Microsoft Edge (press &lt;kbd&gt;F12&lt;/kbd&gt;).&lt;/li&gt;
&lt;li&gt;Open the &lt;strong&gt;3D View&lt;/strong&gt; tool by clicking the &lt;strong&gt;More tools&lt;/strong&gt; (&lt;strong&gt;+&lt;/strong&gt;) button in the toolbar at the top and choosing &lt;strong&gt;3D View&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the left sidebar, choose the &lt;strong&gt;DOM&lt;/strong&gt; tab.&lt;/li&gt;
&lt;li&gt;Zoom and pan the 3D scene to find out of viewport elements!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/spot-out-of-viewport-elements.png&quot; alt=&quot;Edge DevTools showing the Elements tool at the top with the DOM tree and the 3D View tool at the bottom, showing a 3D render of the page, with most elements in the same rectangle, and 2 smaller elements outside of the main rectangle.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Edit an element&#39;s attributes and tag name with the keyboard</title>
    <link href="https://devtoolstips.org/tips/en/edit-elements-with-the-keyboard/"/>
    <updated>2022-05-17T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/edit-elements-with-the-keyboard/</id>
    <content type="html">&lt;p&gt;Using the keyboard can be faster than using a mouse in certain cases (and for some people). One such case is editing an element&#39;s tag name and attributes in DevTools.&lt;/p&gt;
&lt;p&gt;To do this, select an element in the &lt;strong&gt;Elements&lt;/strong&gt; tool (called &lt;strong&gt;Inspector&lt;/strong&gt; in Firefox) and:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Press &lt;kbd&gt;Enter&lt;/kbd&gt; to start the editing mode. The first attribute of the element becomes editable with the keyboard! (Note: on Firefox, the tag name becomes editable first).&lt;/li&gt;
&lt;li&gt;After you have made the necessary changes, you can:
&lt;ul&gt;
&lt;li&gt;Either press &lt;kbd&gt;Enter&lt;/kbd&gt; again to commit the change.&lt;/li&gt;
&lt;li&gt;Or, press &lt;kbd&gt;Tab&lt;/kbd&gt; or &lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Tab&lt;/kbd&gt; to move to the next or previous attribute, or the tag name if there are no other attributes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-elements-with-the-keyboard.gif&quot; alt=&quot;Animation of a part of the Inspector panel in Firefox, showing how pressing Enter on a focused element goes into edit mode and how Tab allows to navigate from field to field.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Create your own simulated devices</title>
    <link href="https://devtoolstips.org/tips/en/add-new-devices/"/>
    <updated>2022-05-16T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/add-new-devices/</id>
    <content type="html">&lt;p&gt;You can simulate various different devices from DevTools, to get an idea of how your webpage might render on those devices (note that this is only a simulation, the tool only changes the screen dimensions, touch event handling, and user agent string, but ultimately, the rendering of the webpage is still done by the browser you are using).&lt;/p&gt;
&lt;p&gt;But what&#39;s even better, is that you can create your own simulated devices. This is useful if what&#39;s available in the list isn&#39;t enough for you. Here&#39;s how:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open DevTools (press &lt;kbd&gt;F12&lt;/kbd&gt;), and start the device mode (on Edge and Chrome, click the &lt;strong&gt;Toggle device emulation&lt;/strong&gt; button, on Firefox, click &lt;strong&gt;Responsive Design Mode&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;In the device simulation screen, expand the device drop-down and click &lt;strong&gt;Edit...&lt;/strong&gt;. The device customization screen appears.&lt;/li&gt;
&lt;li&gt;From this screen, you can check or uncheck devices to customize the device drop-down, and you can click &lt;strong&gt;Add Custom Device...&lt;/strong&gt; to add your own devices.&lt;/li&gt;
&lt;li&gt;Choose a device name, dimensions, dpr, and user agent string, and submit. Your new device should now be available in the device drop-down!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/add-new-devices.gif&quot; alt=&quot;Animation of the device mode in Firefox, showing how to customize the list of devices, including adding custom devices.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In Polypane these steps are not needed. Double-click anywhere to add a new device and configure its settings from the &lt;strong&gt;Emulation options&lt;/strong&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Discover all the tools</title>
    <link href="https://devtoolstips.org/tips/en/discover-all-tools/"/>
    <updated>2022-05-13T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/discover-all-tools/</id>
    <content type="html">&lt;p&gt;DevTools is confusing! There&#39;s so much functionality packed in such a small UI. Did you know that Chrome DevTools had more than 30 individual tools! Yes, that&#39;s right, 30.&lt;/p&gt;
&lt;p&gt;It&#39;s hard for both new users and more experienced users. New users may feel overwhelmed, and more experienced users will tend to stay in the same few tools and not know that others exist.&lt;/p&gt;
&lt;p&gt;So here is a list of all the panels available in DevTools, per browser! Want to test your knowledge? Play &lt;a href=&quot;https://patrickbrosset.com/lab/2022-05-13-whats-that-tool/&quot;&gt;What&#39;s That Tool?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Firefox&lt;/strong&gt;  (📕&lt;a href=&quot;https://firefox-source-docs.mozilla.org/devtools-user/index.html&quot;&gt;Docs&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Accessibility&lt;/strong&gt;: Navigate the internal accessibility tree that assistive technology uses to present web pages to users.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application&lt;/strong&gt;: Debug Service Workers and Web App Manifests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Console&lt;/strong&gt;: View log messages, errors, and execute JavaScript expressions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debugger&lt;/strong&gt;: Debug JavaScript code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DOM&lt;/strong&gt;: Navigate the list of DOM properties on the page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inspector&lt;/strong&gt;: View the DOM tree, authored and computed styles, edit CSS, and get layout information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: Capture and navigate memory snapshots of the current page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;: View network traffic on the page and inspect individual HTTP requests and responses.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Measure the runtime performance of the page and understand bottlenecks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt;: View and edit cookies, local storage, cache, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Style editor&lt;/strong&gt;: Edit stylesheets on the page and create new ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Chrome&lt;/strong&gt; (📕&lt;a href=&quot;https://developer.chrome.com/docs/devtools/overview/&quot;&gt;Docs&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Animations&lt;/strong&gt;: View and edit CSS animations, transitions, and Web Animations API animations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application&lt;/strong&gt;: Debug your PWA Service Workers, Web Apps Manifest. View and edit IndexedDB, local storage, cache. Debug background services such as notifications and background sync.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Changes&lt;/strong&gt;: See all the CSS changes you made on the page in DevTools.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Console&lt;/strong&gt;: View log messages, errors, and execute JavaScript expressions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Coverage&lt;/strong&gt;: Generate code coverage reports for JavaScript and CSS to detect how much code is used.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS overview&lt;/strong&gt;: Get a summary of the CSS styles on the page, including colors, contrast ratio, and fonts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Developer resources&lt;/strong&gt;: &lt;em&gt;missing, please help by editing &lt;a href=&quot;https://github.com/captainbrosset/devtools-tips/blob/main/src/tips/en/discover-all-tools.md&quot;&gt;this file&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Elements&lt;/strong&gt;: View the DOM tree, authored and computed styles, edit CSS, and get layout information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Issues&lt;/strong&gt;: Detect common issues with your webpage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Javascript profiler&lt;/strong&gt;: Record JavaScript code execution on the page for some time and then view time spent in each function.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Layers&lt;/strong&gt;: See the various compositing layers the browser engine created based on your page&#39;s DOM and CSS code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lighthouse&lt;/strong&gt;: Run &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot;&gt;Lighthouse&lt;/a&gt; audits on your page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Media&lt;/strong&gt;: &lt;em&gt;missing, please help by editing &lt;a href=&quot;https://github.com/captainbrosset/devtools-tips/blob/main/src/tips/en/discover-all-tools.md&quot;&gt;this file&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: Capture memory snapshot of the current page and understand what retains objects in memory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory inspector&lt;/strong&gt;: Inspector JavaScript ArrayBuffers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;: View network traffic on the page and inspect individual HTTP requests and responses.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network conditions&lt;/strong&gt;: Modify certain network conditions such as cache, speed, and user-agent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network request blocking&lt;/strong&gt;: Define custom patterns for URLs you want to block.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Analyze your page&#39;s runtime performance, including CPU usage, GPU activity, memory usage, refresh rate, user interactions, layout and graphic engine operations, and more.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance insights&lt;/strong&gt;: Get actionable performance insights about your page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance monitor&lt;/strong&gt;: Monitor your page&#39;s performance live with CPU usage, memory size, DOM node numbers, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Protocol monitor&lt;/strong&gt;: Monitor the CDP (Chrome DevTools Protocol) traffic that DevTools relies on to debug your page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quick source&lt;/strong&gt;: A simpler version of the Sources panel.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recorder&lt;/strong&gt;: Record user scenarios in the tab, and easily replay them automatically.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rendering&lt;/strong&gt;: Emulate different rendering modes: media features, color vision deficiencies, and more.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search&lt;/strong&gt;: Search within the resources loaded on the page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: Get an overview of the page&#39;s security aspects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sensors&lt;/strong&gt;: Simulate device location, orientation and touch events.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sources&lt;/strong&gt;: View the currently loaded resources on the page, edit stylesheets, and debug JavaScript code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web audio&lt;/strong&gt;: View the audio node graph.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Webauthn&lt;/strong&gt;: Create virtual authentication environments to debug your web authentication flows.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What&#39;s new&lt;/strong&gt;: Get highlights from the most recent DevTools update.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Edge&lt;/strong&gt; (📕&lt;a href=&quot;https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/landing/&quot;&gt;Docs&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;3D view&lt;/strong&gt;: View your page&#39;s DOM, z-index stacking, or layers tree in 3D.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Animations&lt;/strong&gt;: View and edit CSS animations, transitions, and Web Animations API animations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application&lt;/strong&gt;: Debug your PWA Service Workers, Web Apps Manifest. View and edit IndexedDB, local storage, cache. Debug background services such as notifications and background sync.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Changes&lt;/strong&gt;: See all the CSS changes you made on the page in DevTools.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Console&lt;/strong&gt;: View log messages, errors, and execute JavaScript expressions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Coverage&lt;/strong&gt;: Generate code coverage reports for JavaScript and CSS to detect how much code is used.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Css overview&lt;/strong&gt;: Get a summary of the CSS styles on the page, including colors, contrast ratio, and fonts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Detached elements&lt;/strong&gt;: Find DOM elements in memory that are no longer attached to the DOM, and record heap snapshots to find what retains them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Developer resources&lt;/strong&gt;: &lt;em&gt;missing, please help by editing &lt;a href=&quot;https://github.com/captainbrosset/devtools-tips/blob/main/src/tips/en/discover-all-tools.md&quot;&gt;this file&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Elements&lt;/strong&gt;: View the DOM tree, authored and computed styles, edit CSS, and get layout information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Issues&lt;/strong&gt;: Detect common issues with your webpage. The issues are powered by &lt;a href=&quot;https://webhint.io/&quot;&gt;webhint&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Javascript profiler&lt;/strong&gt;: Record JavaScript code execution on the page for some time and then view time spent in each function.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Layers&lt;/strong&gt;: See the various compositing layers the browser engine created based on your page&#39;s DOM and CSS code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lighthouse&lt;/strong&gt;: Run &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot;&gt;Lighthouse&lt;/a&gt; audits on your page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Media&lt;/strong&gt;: &lt;em&gt;missing, please help by editing &lt;a href=&quot;https://github.com/captainbrosset/devtools-tips/blob/main/src/tips/en/discover-all-tools.md&quot;&gt;this file&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: Capture memory snapshot of the current page and understand what retains objects in memory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory inspector&lt;/strong&gt;: Inspector JavaScript ArrayBuffers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;: View network traffic on the page and inspect individual HTTP requests and responses.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network conditions&lt;/strong&gt;: Modify certain network conditions such as cache, speed, and user-agent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network console&lt;/strong&gt;: Create and manage your API requests and test them whenever you want.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network request blocking&lt;/strong&gt;: Define custom patterns for URLs you want to block.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Analyze your page&#39;s runtime performance, including CPU usage, GPU activity, memory usage, refresh rate, user interactions, layout and graphic engine operations, and more.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance monitor&lt;/strong&gt;: Monitor your page&#39;s performance live with CPU usage, memory size, DOM node numbers, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Protocol monitor&lt;/strong&gt;: Monitor the CDP (Chrome DevTools Protocol) traffic that DevTools relies on to debug your page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quick source&lt;/strong&gt;: A simpler version of the Sources panel.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rendering&lt;/strong&gt;: Emulate different rendering modes: media features, color vision deficiencies, and more.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search&lt;/strong&gt;: Search within the resources loaded on the page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: Get an overview of the page&#39;s security aspects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sensors&lt;/strong&gt;: Simulate device location, orientation and touch events.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Source maps monitor&lt;/strong&gt;: Check where source maps are downloaded from.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sources&lt;/strong&gt;: View the currently loaded resources on the page, edit stylesheets, and debug JavaScript code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Webaudio&lt;/strong&gt;: View the audio node graph.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Webauthn&lt;/strong&gt;: Create virtual authentication environments to debug your web authentication flows.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Welcome&lt;/strong&gt;: Get help, resources, and latest news.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Safari&lt;/strong&gt; (📕&lt;a href=&quot;https://webkit.org/web-inspector/&quot;&gt;Docs&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Elements&lt;/strong&gt;: View the DOM tree, authored and computed styles, edit CSS, and get layout information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Console&lt;/strong&gt;: View log messages, errors, and execute JavaScript expressions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sources&lt;/strong&gt;: View the currently loaded resources on the page, edit stylesheets, and debug JavaScript code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;: View network traffic on the page and inspect individual HTTP requests and responses.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Timelines&lt;/strong&gt;: Record performance profiles on your page and visualize network requests, layout and rendering operations, user events and JavaScript execution, and CPU usage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt;: View and edit local storage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Graphics&lt;/strong&gt;: &lt;em&gt;missing, please help by editing &lt;a href=&quot;https://github.com/captainbrosset/devtools-tips/blob/main/src/tips/en/discover-all-tools.md&quot;&gt;this file&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Layers&lt;/strong&gt;: See the various compositing layers the browser engine created based on your page&#39;s DOM and CSS code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Audit&lt;/strong&gt;: Run audits on the page.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Polypane&lt;/strong&gt; (📕&lt;a href=&quot;https://polypane.app/docs/&quot;&gt;Docs&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Meta&lt;/strong&gt;: An overview of all meta data, robots.txt, structured data, webmanifest and social media previews&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Outline&lt;/strong&gt;: View the heading, landmark, image, link outlines, as well as the focus order of the page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt;: An overview of the localstorage, sessionstorage and cookies of the page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accessibility&lt;/strong&gt;: Run an automated accessibility scan.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Source&lt;/strong&gt;: Show a formatted version of the HTML source of the page along with HTML validation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Elements&lt;/strong&gt;: View the DOM tree, authored and computed styles, edit CSS, get layout and accessibility information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Console&lt;/strong&gt;: View log messages, errors, and execute JavaScript expressions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Live CSS&lt;/strong&gt;: Inject CSS into the current page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Devtools&lt;/strong&gt;: Access the regular Chromium devtools. &lt;em&gt;(See above)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Browse&lt;/strong&gt;: Open a second URL along your main one&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Workspaces&lt;/strong&gt;: Save and restore different sets of devices to test on.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/discover-all-tools.png&quot; alt=&quot;The list of most tools in Edge DevTools, just to illustrate how many there are&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Copy an elements styles</title>
    <link href="https://devtoolstips.org/tips/en/copy-element-styles/"/>
    <updated>2022-05-11T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/copy-element-styles/</id>
    <content type="html">&lt;p&gt;You can extract all the styles of an element in one go by using the &lt;strong&gt;Copy styles&lt;/strong&gt; feature.&lt;/p&gt;
&lt;p&gt;No need to go through all CSS rules and properties that apply to the element in the &lt;strong&gt;Styles&lt;/strong&gt; pane, and manually build the resulting list. With this feature, you can get the whole list at once, with all of the needed styles:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select the element you want to extract the styles from by right-clicking on it and choosing &lt;strong&gt;Inspect&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Elements&lt;/strong&gt; tool, right-click the selected element.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Copy&lt;/strong&gt; &amp;gt; &lt;strong&gt;Copy styles&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Paste the result in a text editor and use however you want.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/copy-element-styles.png&quot; alt=&quot;The Edge DevTools Elements panel, showing the context menu on an element and the Copy styles menu item. The screenshot also shows what the result of copying styles is: a flat list of CSS properties and values.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In Polypane,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select the element you want to extract the styles from by right-clicking on it and choosing &lt;strong&gt;Inspect&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Elements Panel&lt;/strong&gt; go to the &lt;strong&gt;Computed&lt;/strong&gt; tab&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Copy Styles&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Paste the result in a text editor and use however you want.&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  
  <entry>
    <title>Use document.designMode to spell check your webpage</title>
    <link href="https://devtoolstips.org/tips/en/use-designmode-to-spell-check/"/>
    <updated>2022-05-02T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/use-designmode-to-spell-check/</id>
    <content type="html">&lt;p&gt;https://twitter.com/AmeliasBrain/status/1521146127327801345&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Visualize and debug CSS cascade layers</title>
    <link href="https://devtoolstips.org/tips/en/debug-css-cascade-layers/"/>
    <updated>2022-04-20T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/debug-css-cascade-layers/</id>
    <content type="html">&lt;p&gt;CSS cascade layers is a CSS feature that allows web developers to define their CSS styles in multiple layers and control the order in which they apply. Cascade layers are meant to bring an elegant solution to problems we&#39;ve historically been fixing by using &lt;code&gt;!important&lt;/code&gt; or artificially making selectors have higher specificity.&lt;/p&gt;
&lt;p&gt;If you want to learn more about cascade layers, check out &lt;a href=&quot;https://css-tricks.com/css-cascade-layers/&quot;&gt;Miriam Suzanne&#39;s complete guide on CSS Tricks&lt;/a&gt;, but here let&#39;s see how we can visualize and debug layers in DevTools.&lt;/p&gt;
&lt;p&gt;Safari, Firefox, Chrome, Polypane and Edge all have support for layers in their &lt;strong&gt;Styles&lt;/strong&gt;/&lt;strong&gt;Rules&lt;/strong&gt; panels.&lt;/p&gt;
&lt;h3&gt;All browsers&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Open a page that uses cascade layers like &lt;a href=&quot;https://codepen.io/web-dot-dev/full/LYzqPEp&quot;&gt;this one&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Inspect an element which has styles defined in one of the cascade layers like one of the green links in the above demo.&lt;/li&gt;
&lt;li&gt;In the sidebar where CSS rules are displayed, rules are sorted by cascade layers, with the highest priority layers at the top, and lowest priority at the bottom.&lt;/li&gt;
&lt;li&gt;Rules that are part of a cascade layer have a &lt;code&gt;@layer &amp;lt;layername&amp;gt;&lt;/code&gt; label above them.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/debug-css-cascade-layers-firefox.png&quot; alt=&quot;Firefox showing a demo page that uses layers and devtools opened, showing the Rules panel with 2 @layer rules.&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Only Edge and Chrome&lt;/h3&gt;
&lt;p&gt;On top of the above, Edge and Chrome have a layers view:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open a page that uses cascade layers like &lt;a href=&quot;https://codepen.io/web-dot-dev/full/LYzqPEp&quot;&gt;this one&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Inspect an element which has styles defined in one of the cascade layers like one of the green links in the above demo.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Toggle CSS layers view&lt;/strong&gt; in the &lt;strong&gt;Styles&lt;/strong&gt; panel toolbar (next to the search field) to reveal the list of layers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/debug-css-cascade-layers-edge.png&quot; alt=&quot;Edge showing a demo page that uses layers and devtools opened, showing the Rules panel with 2 @layer rules and the layers view.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Automatically get issues your site has with performance, accessibility, security, compatibility, and others.</title>
    <link href="https://devtoolstips.org/tips/en/get-website-issues/"/>
    <updated>2022-04-07T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/get-website-issues/</id>
    <content type="html">&lt;p&gt;Edge has a very useful &lt;strong&gt;Issues&lt;/strong&gt; panel that can automatically list a lot of different issues with your site. It can detect common issues related to browser compatibility, accessibility, performance, security, and more.&lt;/p&gt;
&lt;p&gt;To see issues with the current page in Edge:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open DevTools (&lt;kbd&gt;F12&lt;/kbd&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;strong&gt;More tools&lt;/strong&gt; (&lt;code&gt;+&lt;/code&gt;) and click &lt;strong&gt;Issues&lt;/strong&gt; (you can also open the panel by using the &lt;a href=&quot;https://devtoolstips.org/tips/en/execute-commands&quot;&gt;Command menu&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Issues are listed in the panel, organized by category, and severity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At this point, reload the page to make sure all issues are listed, as some of them depend on how your page loads over the network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use the toolbar at the top to filter issues too. The &lt;strong&gt;Browser&lt;/strong&gt; filter, in particular, lets you filter down the compatibility issues to just the browsers you care about.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/issues/&quot;&gt;Learn more about this tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/get-website-issues.png&quot; alt=&quot;The issues panel in Edge, showing many different issues about the page.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Take a screenshot of part of a webpage from the command menu</title>
    <link href="https://devtoolstips.org/tips/en/screenshot-part-of-page-command-menu/"/>
    <updated>2022-03-25T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/screenshot-part-of-page-command-menu/</id>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;https://devtoolstips.org/tips/en/execute-commands&quot;&gt;Command menu&lt;/a&gt; in Edge and Chrome is great. Here is one more thing it can do:&lt;/p&gt;
&lt;p&gt;https://twitter.com/csaba_kissi/status/1506904947631304708&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Quickly reference nodes, expressions, and react components in the console</title>
    <link href="https://devtoolstips.org/tips/en/quickly-reference-things-from-console/"/>
    <updated>2022-03-25T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/quickly-reference-things-from-console/</id>
    <content type="html">&lt;p&gt;https://twitter.com/ChatterboxDev/status/1506299424712142864&lt;/p&gt;
&lt;p&gt;Also learn more about &lt;a href=&quot;https://devtoolstips.org/tips/en/get-current-element-in-console&quot;&gt;getting the selected element in the console&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Start your HTML and CSS prototypes in the browser directly</title>
    <link href="https://devtoolstips.org/tips/en/prototype-in-the-browser/"/>
    <updated>2022-03-25T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/prototype-in-the-browser/</id>
    <content type="html">&lt;p&gt;Sometimes I need a blank canvas to prototype an idea with HTML and CSS. Something outside of the website I&#39;m working on. Maybe I need a new layout or component and I&#39;m not sure yet how to do it.&lt;/p&gt;
&lt;p&gt;In this case, starting from a blank HTML page makes a lot of sense since I don&#39;t have to worry about the rest of the site yet and only focus on my prototype.&lt;/p&gt;
&lt;p&gt;Turns out a quick way to do this is to start it directly in the browser, instead of creating a new HTML file somewhere in a &lt;code&gt;dev&lt;/code&gt; folder! Here&#39;s how I do it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I open my favorite browser and type something like this in the address bar: &lt;code&gt;data:text/html,&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a data URL that will tell the browser to just load the HTML content I provided after the &lt;code&gt;data:text/html,&lt;/code&gt; prefix, instead of loading a remote website.
I can also write more fancy HTML, maybe add more elements, and attributes. But usually just one div is enough to get me started, because my next step ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I immediately open DevTools and dock it to the side of the browser window.&lt;/p&gt;
&lt;p&gt;I like having it on the side because it gives me a simple way to resize the space available to my prototype by just dragging the splitter between DevTools and the page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And then that&#39;s when the prototyping begin.&lt;/p&gt;
&lt;p&gt;Using the &lt;strong&gt;Elements&lt;/strong&gt;/&lt;strong&gt;Inspector&lt;/strong&gt; panel, I can add more elements with the &lt;strong&gt;Edit as HTML&lt;/strong&gt; feature, add and modify attributes by double-clicking them, add classes from the &lt;strong&gt;Styles&lt;/strong&gt;/&lt;strong&gt;Rules&lt;/strong&gt; panel, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When I&#39;m done coding in the browser and feel like I have what I wanted, it&#39;s time to export my changes so they don&#39;t disappear when close the browser window.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To export the HTML code, I usually do this: right-click on the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element and choose &lt;strong&gt;Copy inner HTML&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;To export the CSS code: in Firefox, I open the &lt;strong&gt;Changes&lt;/strong&gt; sidebar panel and click &lt;strong&gt;Copy All Changes&lt;/strong&gt; (&lt;a href=&quot;https://devtoolstips.org/tips/en/find-css-changes&quot;&gt;learn more&lt;/a&gt;), and Chrome/Edge I go to &lt;strong&gt;Sources&lt;/strong&gt;, find the &lt;strong&gt;inspector-stylesheet&lt;/strong&gt; source and copy the content from it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/prototype-in-the-browser.png&quot; alt=&quot;Edge , with a tab opened on the HTML data-url, and DevTools opened showing the Elements and Sources panels with local changes made.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here is a quick demo I did 4 years ago showing roughly this workflow. Things have changed a bit, but most of it still applies:&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=o5wy237B5qc&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Fix low color contrast issues</title>
    <link href="https://devtoolstips.org/tips/en/fix-color-contrast-issues/"/>
    <updated>2022-03-25T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/fix-color-contrast-issues/</id>
    <content type="html">&lt;p&gt;With DevTools you can &lt;a href=&quot;https://devtoolstips.org/tips/en/detect-low-color-contrast&quot;&gt;detect low color contrast issues&lt;/a&gt; which is great. But DevTools in Chrome, Polypane and Edge go one step further and help you fix these issues too! &lt;a href=&quot;https://twitter.com/domizajac&quot;&gt;Domi&lt;/a&gt; tells us all about it.&lt;/p&gt;
&lt;p&gt;https://twitter.com/domizajac/status/1507310081624444929&lt;/p&gt;
&lt;p&gt;In Polypane, these suggestions are made inline on the page itself when enabling the &lt;strong&gt;Contrast checker debug tool&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/detect-low-color-contrast-inline.png&quot; alt=&quot;A Polypane Pane with the Contrast checker debug tool active.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Debug popups that appear on hover using the debugger statement</title>
    <link href="https://devtoolstips.org/tips/en/debug-js-hover-2/"/>
    <updated>2022-03-25T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/debug-js-hover-2/</id>
    <content type="html">&lt;p&gt;In &lt;a href=&quot;https://devtoolstips.org/tips/en/debug-js-hover&quot;&gt;Debug popups that appear on hover using JS&lt;/a&gt; we described how to pause the debugger to inspect popups that appear on hover and disappear as soon as the cursor moves away.&lt;/p&gt;
&lt;p&gt;Here&#39;s another way to do this by &lt;a href=&quot;https://twitter.com/mzainzafar90&quot;&gt;Zain Zafar&lt;/a&gt; which involves using the &lt;code&gt;debugger&lt;/code&gt; statement in the &lt;strong&gt;Console&lt;/strong&gt;. Pretty neat!&lt;/p&gt;
&lt;p&gt;https://twitter.com/mzainzafar90/status/1485510393409773571&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>console.log() is great, but do you know console.table()? console.group()? console.assert()?</title>
    <link href="https://devtoolstips.org/tips/en/console-table-group-assert/"/>
    <updated>2022-03-25T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/console-table-group-assert/</id>
    <content type="html">&lt;p&gt;https://twitter.com/nghuuphuoc/status/1505892172700299268&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Debug CSS grid areas</title>
    <link href="https://devtoolstips.org/tips/en/debug-grid-areas/"/>
    <updated>2022-03-16T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/debug-grid-areas/</id>
    <content type="html">&lt;p&gt;A really useful way to position elements on a CSS grid is using the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/CSS_Grid_Layout/Grid_Template_Areas&quot;&gt;&lt;code&gt;grid-template-areas&lt;/code&gt;&lt;/a&gt; property. With it, you can give names to various areas of your grid (potentially spanning multiple cells), and then simply position your elements by referring to those names.&lt;/p&gt;
&lt;p&gt;The syntax for the &lt;code&gt;grid-template-areas&lt;/code&gt; property is a bit special though. It consists in a series of strings where each corresponds to one row in the grid. For example:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;grid-template-areas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;header  header&quot;&lt;/span&gt;&lt;br /&gt;                       &lt;span class=&quot;token string&quot;&gt;&quot;sidebar main  &quot;&lt;/span&gt;&lt;br /&gt;                       &lt;span class=&quot;token string&quot;&gt;&quot;sidebar footer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;DevTools in Firefox, Chrome, and Edge make it very easy to debug potential problems that may occur when making mistakes with the above syntax.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;strong&gt;Elements&lt;/strong&gt; panel (or &lt;strong&gt;Inspector&lt;/strong&gt; panel in Firefox).&lt;/li&gt;
&lt;li&gt;Highlight a grid on your page that has named areas (you can use the &lt;strong&gt;grid&lt;/strong&gt; badge in the DOM tree for example).&lt;/li&gt;
&lt;li&gt;Go to the &lt;strong&gt;Layout&lt;/strong&gt; sidebar pane.&lt;/li&gt;
&lt;li&gt;Under the &lt;strong&gt;Grid&lt;/strong&gt; section, check the &lt;strong&gt;Show area names&lt;/strong&gt; box.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/debug-grid-areas.png&quot; alt=&quot;Firefox showing a highlighted grid in the page showing the area names, and devtools below it with the &amp;quot;display area names&amp;quot; option checked.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Emulate forced-color mode</title>
    <link href="https://devtoolstips.org/tips/en/emulate-forced-colors/"/>
    <updated>2022-03-15T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/emulate-forced-colors/</id>
    <content type="html">&lt;p&gt;Operating systems offer an accessibility feature where the colors shown on the screen are converted to offer higher contrast. When you use this feature, it impacts all the content on the screen: your desktop, folders, native apps, web browser and its web content, etc.&lt;/p&gt;
&lt;p&gt;This means web pages are not displayed in their usual colors, but in a high-contrast mode instead. Learn more about the Windows high-contrast mode and how to style a website with it &lt;a href=&quot;https://blogs.windows.com/msedgedev/2020/09/17/styling-for-windows-high-contrast-with-new-standards-for-forced-colors/&quot;&gt;here&lt;/a&gt; and about the &lt;code&gt;forced-colors&lt;/code&gt; media query &lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/@media/forced-colors&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are not using this high-contrast mode yourself though, you won&#39;t know how your website looks to users who do. To make sure your content is fully accessible to users of this mode, and to avoid having to switch your entire OS to it, you can use Edge&#39;s or Chrome&#39;s ability to emulate the forced-color mode.&lt;/p&gt;
&lt;p&gt;In Edge or Chrome:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;a href=&quot;https://devtoolstips.org/tips/en/execute-commands/&quot;&gt;Command Menu&lt;/a&gt;: &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; (or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; on mac).&lt;/li&gt;
&lt;li&gt;Type &lt;strong&gt;Rendering&lt;/strong&gt; and press &lt;kbd&gt;Enter&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Rendering&lt;/strong&gt; panel, scroll down to the &lt;strong&gt;Emulate CSS media feature forced-colors&lt;/strong&gt; and activate it from the drop-down.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/emulate-forced-colors.png&quot; alt=&quot;Edge showing a webpage in forced-colors mode, with the Rendering panel next to it in DevTools.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In Polypane:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;strong&gt;Emulation options&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Toggle &lt;strong&gt;Forced colors&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;(Optionally) Toggle the &lt;code&gt;prefers-color-scheme&lt;/code&gt; to test both a light and dark forced color mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/emulate-forced-colors-polypane.png&quot; alt=&quot;Polypane showing a webpage in forced-colors mode, with the Emulation options opened above it, the &amp;quot;forced colors&amp;quot; option is active and highlighted.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Check if your site can be instantly reloaded from bfcache</title>
    <link href="https://devtoolstips.org/tips/en/check-bfcache-readiness/"/>
    <updated>2022-03-15T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/check-bfcache-readiness/</id>
    <content type="html">&lt;p&gt;Most browsers are now able to instantly go back to previously visited pages without having to wait for them to load. This ability is powered by the back/forward cache (or bfcache). Firefox, Safari, and Chromium-based browsers support it, and it&#39;s massive performance boost when hitting the back button.&lt;/p&gt;
&lt;p&gt;The way the bfcache works is by storing a snapshot of the page in memory, in a way that no work needs to be done when going back to it, other than displaying the pixels on the screen.&lt;/p&gt;
&lt;p&gt;Not all web pages can be cached in bfcache though. Chrome and Edge have a new tool that lets you detect potential issues with a page that might prevent it from being bfcache&#39;d.&lt;/p&gt;
&lt;p&gt;To test if your page can be cached:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;strong&gt;Application&lt;/strong&gt; tool.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Back/forward cache&lt;/strong&gt; in the side bar.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Test back/forward cache&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A report will be displayed, telling you whether your page can be cached, and if not, why.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/check-bfcache-readiness.png&quot; alt=&quot;Chrome DevTools with the Application tool, and the bfcache tab selected, showing a warning that the page can&#39;t be cached.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Send feedback, ask for features and report bugs</title>
    <link href="https://devtoolstips.org/tips/en/send-feedback-about-devtools/"/>
    <updated>2022-03-10T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/send-feedback-about-devtools/</id>
    <content type="html">&lt;img src=&quot;https://devtoolstips.org/assets/img/send-feedback-about-devtools.png&quot; alt=&quot;A feedback illustration showing a stick figure with a speech bubble&quot; style=&quot;width:50px;&quot; /&gt;
&lt;p&gt;Browser vendors depend on your feedback to build the right tools for you. Without hearing from you all about what problems you have, or what features you lack, they can&#39;t take the right decisions about what to build.&lt;/p&gt;
&lt;p&gt;If you report bugs to the devtools team when you see them, you won&#39;t just be helping you when the fix comes, but you may be helping many others who have the same bug but haven&#39;t reported it.&lt;/p&gt;
&lt;p&gt;It&#39;s worth knowing that the various devtools teams at Microsoft, Mozilla, Apple and Google are usually fairly small and receive a lot of feedback, so reporting an issue does not mean it will be fixed quickly (or at all, if it&#39;s lower priority than others), but it does help, and those teams &lt;strong&gt;are listening&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here are a few ways you can report bugs, ask questions or request features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Firefox DevTools&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Firefox uses &lt;a href=&quot;https://bugzilla.mozilla.org/&quot;&gt;Bugzilla&lt;/a&gt; as their public bug tracker and anyone is welcome to report bugs or ask for new features by creating a new entry on Bugzilla. All you need is a GitHub account to log in.&lt;/li&gt;
&lt;li&gt;Getting in touch with the team can either be done on Twitter by mentioning the &lt;a href=&quot;https://twitter.com/FirefoxDevTools&quot;&gt;@FirefoxDevTools&lt;/a&gt; account, or logging in to &lt;a href=&quot;https://chat.mozilla.org/&quot;&gt;the Mozilla chat&lt;/a&gt; (find documentation about the chat &lt;a href=&quot;https://wiki.mozilla.org/Matrix&quot;&gt;here&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Safari Web Inspector&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Like Firefox, Safari uses the Bugzilla product to track their &lt;a href=&quot;https://bugs.webkit.org/&quot;&gt;webkit bugs&lt;/a&gt;. Here is documentation about how to &lt;a href=&quot;https://webkit.org/reporting-bugs/&quot;&gt;search for bugs and report new ones&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can also get in touch with the team on Twitter with &lt;a href=&quot;https://twitter.com/webkit&quot;&gt;@webkit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Finally, you can also signal bugs about Safari and the Safari Web Inspector using the &lt;a href=&quot;https://developer.apple.com/bug-reporting/&quot;&gt;feedback assistant&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chromium&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Chromium is an open-source project that several browsers are based on, including Google Chrome and Microsoft Edge. If you believe you found a bug that pertains to Chromium rather than just one of the browsers based on it, you can head over to the Monorail bug tracker that Chromium uses and &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/list&quot;&gt;find all issues and create new ones here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edge DevTools&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;The easiest way to report a problem you encountered while using the tools is by using &lt;a href=&quot;https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/contact#use-the-send-feedback-window&quot;&gt;the feedback button&lt;/a&gt; in DevTools (the little stick figure in the top-right corner of the tools).&lt;/li&gt;
&lt;li&gt;But if you have ideas, questions, feedback, and want to have longer conversations, use the &lt;a href=&quot;https://github.com/MicrosoftEdge/DevTools/&quot;&gt;Edge DevTools feedback repository&lt;/a&gt; instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chrome DevTools&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;On top of the Chromium bug tracker, the team also listens for feedback on &lt;a href=&quot;https://www.chromium.org/teams/devtools&quot;&gt;the devtools-dev mailing list&lt;/a&gt; as well as on twitter at &lt;a href=&quot;https://twitter.com/ChromeDevTools&quot;&gt;@ChromeDevTools&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Polypane&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;In the Help menu select &amp;quot;Chat with us&amp;quot; to chat with Polypane directly, or click &amp;quot;Get Support&amp;quot; to email them. On top of chat and email, the team also listens for feedback on twitter at &lt;a href=&quot;https://twitter.com/Polypane&quot;&gt;@polypane&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Manipulate complex JSON files using DevTools</title>
    <link href="https://devtoolstips.org/tips/en/manipulate-complex-json/"/>
    <updated>2022-03-10T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/manipulate-complex-json/</id>
    <content type="html">&lt;p&gt;I often work with large amount of data that I need to go through and gather interesting information from. Sometimes this data is in JSON format. When that&#39;s the case, I like using DevTools to turn it into what I want, using JavaScript!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I copy the JSON data content from a text editor.&lt;/li&gt;
&lt;li&gt;I open the &lt;strong&gt;Snippet&lt;/strong&gt; pane in the &lt;strong&gt;Sources&lt;/strong&gt; tool (&lt;a href=&quot;https://devtoolstips.org/tips/en/use-scripts-as-snippets&quot;&gt;learn more about snippets&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;I paste the data in a new snippet, work on it with JavaScript to extract what I need (usually using array functions like &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Finally I extract the data again using the &lt;code&gt;copy&lt;/code&gt; function, and paste it back into my text editor (&lt;a href=&quot;https://devtoolstips.org/tips/en/copy-from-console&quot;&gt;learn more about copy&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Take a look at the following video to see my workflow in action:&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=W8s9UiEhaLE&lt;/p&gt;
&lt;p&gt;Note that while the workflow works in every browser, the &lt;strong&gt;Snippets&lt;/strong&gt; pane only exists in Edge and Chrome. In Firefox, you can use the &lt;a href=&quot;https://devtoolstips.org/tips/en/multi-line-console&quot;&gt;multi-line console&lt;/a&gt; to do the same thing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/manipulate-complex-json.png&quot; alt=&quot;VSCode with some JSON data and DevTools next to it with the snippets panel containing JS code to manipulate the JSON.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Detect low color contrast issues</title>
    <link href="https://devtoolstips.org/tips/en/detect-low-color-contrast/"/>
    <updated>2022-03-03T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/detect-low-color-contrast/</id>
    <content type="html">&lt;p&gt;Low color vision is very common, and your choice of text and background colors can negatively impact people&#39;s experience of your website. What seems legible to you might not be for everyone.&lt;/p&gt;
&lt;p&gt;DevTools comes with a number of features to help you detect possible color contrast issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can simulate various color vision deficiencies ➡️ &lt;a href=&quot;https://devtoolstips.org/tips/en/simulate-color-vision-deficiencies/&quot;&gt;Simulate color vision deficiencies&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can get color contrast ratios on hover, when using the inspect tool ➡️ &lt;a href=&quot;https://devtoolstips.org/tips/en/see-quick-a11y-info-on-hover/&quot;&gt;See quick accessibility information on hover&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Chrome and Edge, you can list all contrast issues at once with the &lt;strong&gt;CSS Overview&lt;/strong&gt; tool.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;a href=&quot;https://devtoolstips.org/tips/en/execute-commands/&quot;&gt;Command Menu&lt;/a&gt;: &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; (or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; on mac).&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Capture overview&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Colors&lt;/strong&gt; tab in the sidebar and scroll down to the &lt;strong&gt;Contrast issues&lt;/strong&gt; section.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/detect-low-color-contrast-css-overview.png&quot; alt=&quot;The CSS Overview panel in Chrome, showing the color contrast issues section.&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Firefox, you can find all contrast issues too, using the &lt;strong&gt;Accessibility&lt;/strong&gt; panel.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;strong&gt;Accessibility&lt;/strong&gt; panel from the toolbar.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Check for issues&lt;/strong&gt; drop-down, select &lt;strong&gt;Contrast&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click each item in the table and review the color contrast ratio.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/detect-low-color-contrast-accessibility-panel.png&quot; alt=&quot;The Accessibility panel in Firefox, showing the list of contrast issues.&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Polypane, you can find all contrast issues with the &lt;strong&gt;Color Contrast debug tool&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;strong&gt;Debug Tools&lt;/strong&gt; settings of a pane.&lt;/li&gt;
&lt;li&gt;Find &lt;strong&gt;Contrast Checker&lt;/strong&gt; Under &lt;strong&gt;Accessibility&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Select whether you want to check for WCAG &lt;strong&gt;AA&lt;/strong&gt; or &lt;strong&gt;AAA&lt;/strong&gt; compliance.&lt;/li&gt;
&lt;li&gt;Contrast issues are displayed inline on the page. Where available, Polypane suggests improved colors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/detect-low-color-contrast-inline.png&quot; alt=&quot;A Polypane Pane with the Contrast checker debug tool active.&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Paste multiple CSS declarations at once</title>
    <link href="https://devtoolstips.org/tips/en/past-several-css-declarations/"/>
    <updated>2022-02-25T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/past-several-css-declarations/</id>
    <content type="html">&lt;p&gt;You know how you can paste a CSS property name or value in the &lt;strong&gt;Styles&lt;/strong&gt; (or &lt;strong&gt;Rules&lt;/strong&gt;) panel? Well, you can actually paste several declarations at once too!&lt;/p&gt;
&lt;p&gt;For example, try copying the following entire CSS code snippet, which includes multiple declarations:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; courier&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 14pt&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #f06&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 4rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now open DevTools, and the &lt;strong&gt;Elements&lt;/strong&gt; (or &lt;strong&gt;Inspector&lt;/strong&gt;) panel, find a CSS rule and click somewhere in it as if you were about to type a new property.&lt;/p&gt;
&lt;p&gt;And now paste the code in. Instead of everything getting pasted in just this one text field, see how DevTools noticed that your clipboard contained multiple declarations, and created them all for you!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/paste-several-css-declarations.gif&quot; alt=&quot;Animation showing how pasting several declarations in a CSS rule in DevTools creates them all.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Detect the element with focus at any time</title>
    <link href="https://devtoolstips.org/tips/en/track-focused-element/"/>
    <updated>2022-02-21T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/track-focused-element/</id>
    <content type="html">&lt;p&gt;If you want to know which element has the focus on the web page at any time, you can use a &lt;a href=&quot;https://devtoolstips.org/tips/en/live-expressions&quot;&gt;live expression&lt;/a&gt; in the &lt;strong&gt;Console&lt;/strong&gt; tool.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the &lt;strong&gt;Console&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Create live expression&lt;/strong&gt; button (it looks like an eye icon).&lt;/li&gt;
&lt;li&gt;In the text box that appears, type &lt;code&gt;document.activeElement&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now click/tab around on the page and see the live expression update to reflect which element is currently focused.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/track-focused-element.gif&quot; alt=&quot;Animation showing a web page with focus going through different element, and the Edge Console panel with the live expression showing a preview of the focused element.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Use full browser window for device emulation</title>
    <link href="https://devtoolstips.org/tips/en/use-full-browser-for-device-emulation/"/>
    <updated>2022-02-09T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/use-full-browser-for-device-emulation/</id>
    <content type="html">&lt;p&gt;Emulating different devices in the browser is incredibly useful. It gets tricky when you are on a device with limited resolution as the emulated device needs to be zoomed down to fit the screen as a large part of the window is taken up by the Developer Tools.&lt;/p&gt;
&lt;p&gt;In Polypane, responsive design mode with multiple devices is the default.&lt;/p&gt;
&lt;p&gt;Firefox has a keyboard shortcut to show device emulation without Developer Tools - &lt;kbd&gt;command&lt;/kbd&gt; + &lt;kbd&gt;option&lt;/kbd&gt; + &lt;kbd&gt;M&lt;/kbd&gt; on Mac and &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;M&lt;/kbd&gt; on Windows/Linux.&lt;/p&gt;
&lt;p&gt;On Chromium based browsers like Chrome and Edge the trick is to start the device emulation and then un-dock the Developer Tools. You can un-dock the tools into their own window using the &lt;code&gt;…&lt;/code&gt; menu. This gives you the full browser as an emulation playground.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/use-full-browser-for-device-emulation.gif&quot; alt=&quot;Animation showing device emulation and how to undock the Developer Tools into an own window.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Record and replay user flows</title>
    <link href="https://devtoolstips.org/tips/en/record-replay/"/>
    <updated>2022-02-02T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/record-replay/</id>
    <content type="html">&lt;p&gt;Have you ever had to test the same user scenario again and again while working on a fix or performance improvement?
Sometimes you just have to click the same buttons and do the same actions every time you reload the page to test something. And this can be very time consuming and frustrating.&lt;/p&gt;
&lt;p&gt;Chrome has a very handy &lt;strong&gt;Recorder&lt;/strong&gt; panel to help with this. This panel lets you record any user flow once and then replay this flow as many times as you want.&lt;/p&gt;
&lt;p&gt;To record a new flow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;strong&gt;Recorder&lt;/strong&gt; panel by going to &lt;strong&gt;More options&lt;/strong&gt; &amp;gt; &lt;strong&gt;More tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;Recorder&lt;/strong&gt; (or using the &lt;a href=&quot;https://devtoolstips.org/tips/en/execute-commands&quot;&gt;command menu&lt;/a&gt; to open it from the keyboard).&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Start new recording&lt;/strong&gt;, give your recording a name, and click the record button to start.&lt;/li&gt;
&lt;li&gt;Use the page as normal, clicking on buttons, using form controls, navigating to other pages, etc.&lt;/li&gt;
&lt;li&gt;When you&#39;re done with the user flow you want to record, click &lt;strong&gt;End recording&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From that point on, the recording will be available in the &lt;strong&gt;Recorder&lt;/strong&gt; panel and you can simply replay it any time you want:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find your recording in the panel&#39;s initial screen, or from the dropdown located in the panel&#39;s toolbar.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Play recording&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/record-replay.gif&quot; alt=&quot;Animation of the Recorder panel automatically replaying a set of recorded steps.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You can learn a lot more about this panel (including how to edit a recording and how to use it to test performance improvements) in &lt;a href=&quot;https://developer.chrome.com/docs/devtools/recorder/&quot;&gt;the Recorder documentation&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Remove or disable event listeners</title>
    <link href="https://devtoolstips.org/tips/en/disable-event-listeners/"/>
    <updated>2022-01-26T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/disable-event-listeners/</id>
    <content type="html">&lt;p&gt;When you&#39;re trying to debug something and event listeners on the page keep interfering with what you&#39;re doing, it can be frustrating.
Imagine a &lt;code&gt;mousemove&lt;/code&gt; event listener that changes some of the information on the page.&lt;/p&gt;
&lt;p&gt;Fortunately, DevTools can help you here.&lt;/p&gt;
&lt;p&gt;In Firefox, you can disable (and re-enable) events from the &lt;strong&gt;Inspector&lt;/strong&gt; panel:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find the element in the panel that has the event listener.&lt;/li&gt;
&lt;li&gt;Click the &lt;code&gt;event&lt;/code&gt; badge next to it.&lt;/li&gt;
&lt;li&gt;Find the event type you are interested in.&lt;/li&gt;
&lt;li&gt;Check or uncheck the box next to the event listener to enable or disable it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/disable-event-listeners-firefox.png&quot; alt=&quot;The Firefox event popup in the Inspector panel, showing the checkbox to toggle events.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In Chrome and Edge, you can remove events from the &lt;strong&gt;Elements&lt;/strong&gt; panel (but not add them again):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find the element in the panel that has the event listener.&lt;/li&gt;
&lt;li&gt;In the sidebar of the panel, find the &lt;strong&gt;Event Listeners&lt;/strong&gt; pane.&lt;/li&gt;
&lt;li&gt;Find the event type you are interested in and expand it.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Remove&lt;/strong&gt; button next to the listener you want to remove.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/disable-event-listeners-chrome.png&quot; alt=&quot;The Chrome Event Listeners sidebar pane, showing the Remove button.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Find HTML parsing errors</title>
    <link href="https://devtoolstips.org/tips/en/find-html-parsing-errors/"/>
    <updated>2022-01-17T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/find-html-parsing-errors/</id>
    <content type="html">&lt;p&gt;DevTools is so full of features these days that we hardly ever use View-Source anymore. But it turns out that it has one trick up its sleeves that other tools don&#39;t, at least in Firefox and Polypane.&lt;/p&gt;
&lt;p&gt;Indeed, in those browsers, on top of showing the HTML source code of the page, it also highlights in red the HTML parsing errors!&lt;/p&gt;
&lt;p&gt;Consider the following HTML code:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    Lorem ipsum dolor sit...&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    Lorem ipsum dolor sit...&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    Lorem ipsum dolor sit&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;em&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;, ...&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Firefox&#39;s view-source makes it easy to find the stray &lt;code&gt;&amp;lt;/em&amp;gt;&lt;/code&gt; ending tag! You can also hover over it to reveal more information about the type of parsing error.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/find-html-parsing-errors.png&quot; alt=&quot;The View-Source page in Firefox, with a stray em closing tag highlighted in red, with a tooltip.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Polypane additionally shows all validation errors in a list above the source.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Select elements with pointer-events:none by holding Shift</title>
    <link href="https://devtoolstips.org/tips/en/select-pointer-events-none-elements/"/>
    <updated>2022-01-13T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/select-pointer-events-none-elements/</id>
    <content type="html">&lt;p&gt;When selecting elements from the page they normally get highlighted on hover and selected on click. However certain elements can&#39;t be selected.&lt;/p&gt;
&lt;p&gt;Indeed, if an element does not react to pointer events because the &lt;code&gt;pointer-events:none&lt;/code&gt; CSS declaration is set, then you just can&#39;t select it, and the only way to get to it is to find it in the &lt;strong&gt;Elements&lt;/strong&gt;/&lt;strong&gt;Inspector&lt;/strong&gt; panel.&lt;/p&gt;
&lt;p&gt;In Chrome, Edge, Polypane and Firefox, you can hold the &lt;kbd&gt;Shift&lt;/kbd&gt; key on your keyboard while hovering elements in the page! When you do this, even elements with &lt;code&gt;pointer-events:none&lt;/code&gt; can be selected!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/select-pointer-events-none-elements.gif&quot; alt=&quot;Animation showing how a pointer-events:none element normally can&#39;t be selected, except when Shift is pressed.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/simevidas/status/1464501900586463236&quot;&gt;Šime Vidas&lt;/a&gt; also proposed this alternative solution in Firefox:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the &lt;strong&gt;Accessibility&lt;/strong&gt; tool.&lt;/li&gt;
&lt;li&gt;Use the accessibility picker tool (top-left corner) to pick the element from the page.&lt;/li&gt;
&lt;li&gt;Find the corresponding DOM node in the &lt;strong&gt;Properties&lt;/strong&gt; sidebar panel, and click the inspect icon next to it.&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  
  <entry>
    <title>Query object instances and holders from the console</title>
    <link href="https://devtoolstips.org/tips/en/query-instances-holders/"/>
    <updated>2022-01-10T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/query-instances-holders/</id>
    <content type="html">&lt;p&gt;All browser DevTools have a few built-in functions in the console to do things like &lt;a href=&quot;https://devtoolstips.org/tips/en/get-current-element-in-console/&quot;&gt;get the current element&lt;/a&gt;, or &lt;a href=&quot;https://devtoolstips.org/tips/en/copy-from-console/&quot;&gt;copy a string&lt;/a&gt;. But Safari exposes 2 nice built-in functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;queryInstances&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;queryHolders&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These two functions are really useful when your site starts using a lot of JavaScript objects. In some situations, it may become difficult to keep track of the dependencies between these objects, and memory leaks may start to appear, too.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;app.TodoItem&lt;/code&gt; is a JavaScript class in your application, then &lt;code&gt;queryInstances(app.TodoItem)&lt;/code&gt; will return an array of all of its instances.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/query-instances-holders-1.png&quot; alt=&quot;The console in Safari, showing the result of queryInstances(app.TodoItem).&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Or if you want to know what refers to the object you&#39;re debugging, use &lt;code&gt;queryHolders(this)&lt;/code&gt;, which will return an array of all the other objects that have references to &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/query-instances-holders-2.png&quot; alt=&quot;The console in Safari, showing the result of queryHolders(this).&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Learn more about these, and other, built-in functions &lt;a href=&quot;https://webkit.org/web-inspector/console-command-line-api/#functions&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Get detached DOM elements to investigate memory leaks</title>
    <link href="https://devtoolstips.org/tips/en/get-detached-elements/"/>
    <updated>2022-01-10T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/get-detached-elements/</id>
    <content type="html">&lt;p&gt;Memory leaks can quickly become a big problem for long-running applications, and a common source of memory leaks is detached DOM elements (elements that are no longer attached to the DOM tree).
It&#39;s usually very hard to investigate these memory leaks, because it&#39;s hard to know if elements are detached, and which ones, let alone find which part of your JavaScript code is causing them to be detached.&lt;/p&gt;
&lt;p&gt;Edge has a tool just for this: the &lt;strong&gt;Detached Elements&lt;/strong&gt; panel. To use it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;strong&gt;command menu&lt;/strong&gt; and type &amp;quot;detached&amp;quot; to find and open the &lt;strong&gt;Detached Elements&lt;/strong&gt; tool.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Get detached elements&lt;/strong&gt; button to list all of the currently detached elements.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Analyze&lt;/strong&gt; button to take a memory heap snapshot. Once done, you can then double-click any of the detached elements&#39; &lt;strong&gt;Id&lt;/strong&gt;s to find the link between these elements and your JavaScript code in the &lt;strong&gt;Memory&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Don&#39;t forget to click the &lt;strong&gt;Collect garbage&lt;/strong&gt; button every once in a while to force garbage collection. Then get the detached elements again. Indeed, some elements may remain in memory simply because the browser hasn&#39;t yet cleaned them up. Forcing GC makes sure the list only contains the elements that are detached and cannot be cleaned up.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find out much more about this tool in this &lt;a href=&quot;https://blogs.windows.com/msedgedev/2021/12/09/debug-memory-leaks-detached-elements-tool-devtools/&quot;&gt;blog post&lt;/a&gt; and over at Microsoft&#39;s &lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/memory-problems/dom-leaks&quot;&gt;documentation&lt;/a&gt; site.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/get-detached-elements.png&quot; alt=&quot;The Detached Elements panel in Edge, with the Memory panel next to it.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Write code on multiple lines in the Console</title>
    <link href="https://devtoolstips.org/tips/en/multi-line-console/"/>
    <updated>2021-12-16T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/multi-line-console/</id>
    <content type="html">&lt;p&gt;If you&#39;re feeling adventurous and want to write longer pieces of code in the &lt;strong&gt;Console&lt;/strong&gt; to execute more complex things, it can quickly become difficult.&lt;/p&gt;
&lt;p&gt;Thankfully, there are a few ways to make your life easier by writing on multiple lines, like you would in a code editor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Enter&lt;/kbd&gt; to create a new line without executing the expression. This works in all browsers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Or use Firefox&#39;s multiline editor. To do this, click on the &lt;strong&gt;Switch to multi-line editor mode&lt;/strong&gt; button located in the top-right corner of the &lt;strong&gt;Console&lt;/strong&gt; message area (or press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;B&lt;/kbd&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/multi-line-console-firefox.png&quot; alt=&quot;Tthe button to switch the Firefox console to the multi-line mode.&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Or you can create code snippets in Edge, Chrome, or Safari&#39;s &lt;strong&gt;Sources&lt;/strong&gt; tools. The added advantage of this technique is that code snippets are saved on your disk, and therefore can be used even after you&#39;ve restarted the browser. See &lt;a href=&quot;https://devtoolstips.org/tips/en/use-scripts-as-snippets&quot;&gt;Re-use scripts as snippets&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/multi-line-console-snippet.png&quot; alt=&quot;The snippet tab in Edge&#39;s Sources panel.&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Download all images from the page</title>
    <link href="https://devtoolstips.org/tips/en/download-all-images/"/>
    <updated>2021-12-16T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/download-all-images/</id>
    <content type="html">&lt;p&gt;If you want to download all of the images on a webpage in one go, you can use the following few lines of JavaScript code to do it:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;img&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Fetch the image as a blob.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fetchResponse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; blob &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; fetchResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mimeType &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; blob&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Figure out a name for it from the src and the mime-type.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; src&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lastIndexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; src&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; start&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; src&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[^a-zA-Z0-9]+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    name &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; mimeType&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mimeType&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lastIndexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Download the blob using a &amp;lt;a&gt; element.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;href&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createObjectURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;blob&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;download&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will list all of the &lt;code&gt;img&lt;/code&gt; elements on the page, then attempt to fetch them from the server (which might fail for some, depending on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&quot;&gt;CSP&lt;/a&gt; on the page), and then trigger the download of each one of them by the browser, using a &lt;code&gt;&amp;lt;a download&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;If you want to reuse this script often, you can store it in your &lt;strong&gt;Snippets&lt;/strong&gt; on Chrome or Edge (learn how to do it &lt;a href=&quot;https://devtoolstips.org/tips/en/multi-line-console&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/download-all-images.png&quot; alt=&quot;The Snippets panel in Edge, with the JS code from above, and the download panel open showing all images have been downloaded&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Edit and resend faulty network requests to debug them</title>
    <link href="https://devtoolstips.org/tips/en/edit-and-resend-network-requests/"/>
    <updated>2021-12-15T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/edit-and-resend-network-requests/</id>
    <content type="html">&lt;p&gt;When you&#39;re investigating a bug where the backend you connect to doesn&#39;t respond with the right things it&#39;s useful to tweak the requests and try again quickly. You can do this by changing your frontend code, and reloading the page, but DevTools can help you be faster by editing and resending those requests without making any frontend code changes. Here&#39;s how!&lt;/p&gt;
&lt;h3&gt;Using cURL&lt;/h3&gt;
&lt;p&gt;You can copy any request from the &lt;strong&gt;Network&lt;/strong&gt; panel as a cURL command, then paste it in your terminal, edit it to your liking, and execute it!&lt;/p&gt;
&lt;p&gt;This works in Firefox, Edge, and Chrome.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find the request you want to test in the &lt;strong&gt;Network&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Right-click it and select &lt;strong&gt;Copy&lt;/strong&gt; &amp;gt; &lt;strong&gt;Copy as cURL&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-and-resend-network-requests-curl.png&quot; alt=&quot;Screenshot of Chrome&#39;s copy as cURL feature and the corresponding command in the terminal&quot; /&gt;&lt;/p&gt;
&lt;p&gt;A similar approach is to use the &lt;strong&gt;Copy as Fetch&lt;/strong&gt; option, and then use the copied code from the &lt;strong&gt;Console&lt;/strong&gt; panel.&lt;/p&gt;
&lt;h3&gt;Using Firefox&#39;s Edit and Resend feature&lt;/h3&gt;
&lt;p&gt;Firefox has a built-in &lt;strong&gt;Edit and Resend&lt;/strong&gt; feature that&#39;s very convenient because it doesn&#39;t require to switch to the terminal.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find the request you want to test in the &lt;strong&gt;Network&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Right-click it and select &lt;strong&gt;Edit and Resend&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the new panel that appears, you can edit the request&#39;s method, url, query string, headers, and body.&lt;/li&gt;
&lt;li&gt;Press &lt;strong&gt;Send&lt;/strong&gt; when you&#39;re happy with the values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-and-resend-network-requests-firefox.png&quot; alt=&quot;The Firefox&#39;s edit and resend feature.&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Using Edge&#39;s Network Console experiment&lt;/h3&gt;
&lt;p&gt;Edge has a built-in feature very similar to Firefox&#39;s &lt;strong&gt;Edit and Resend&lt;/strong&gt;, but that goes further in that it allows you to create any number of requests to test over time, like &lt;a href=&quot;https://www.postman.com/&quot;&gt;Postman&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The feature is called &lt;strong&gt;Network Console&lt;/strong&gt; and is an experiment for the time being, so use with caution.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the &lt;strong&gt;Settings&lt;/strong&gt; (&lt;kbd&gt;F1&lt;/kbd&gt;), then &lt;strong&gt;Experiments&lt;/strong&gt;, and check the &lt;strong&gt;Enable Network Console&lt;/strong&gt; option (make sure to restart DevTools after that).&lt;/li&gt;
&lt;li&gt;You can then access the &lt;strong&gt;Network Console&lt;/strong&gt; like any other panel, but the easiest way to get started is by going to the &lt;strong&gt;Network&lt;/strong&gt; panel and finding the request you want to test.&lt;/li&gt;
&lt;li&gt;Right-click it and select &lt;strong&gt;Edit and Resend&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the new panel that appears, you can edit the method, url, query string, headers, body, etc.&lt;/li&gt;
&lt;li&gt;Press &lt;strong&gt;Send&lt;/strong&gt; when you&#39;re happy with the values.&lt;/li&gt;
&lt;li&gt;You can also save this request for later. You can find all saved requests in the &lt;strong&gt;Network Console&lt;/strong&gt; panel.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-and-resend-network-requests-edge.png&quot; alt=&quot;The Edge&#39;s Network Console feature.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Highlight the effect of individual CSS properties on hover</title>
    <link href="https://devtoolstips.org/tips/en/highlight-css-properties-on-hover/"/>
    <updated>2021-12-09T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/highlight-css-properties-on-hover/</id>
    <content type="html">&lt;p&gt;How do certain CSS properties apply to the page isn&#39;t always an easy question to answer.&lt;/p&gt;
&lt;p&gt;While some properties might be considered simple, others have complex effects that depend on other factors. Properties like &lt;code&gt;justify-content&lt;/code&gt; or &lt;code&gt;gap&lt;/code&gt; depend on writing and layout direction for example.&lt;/p&gt;
&lt;p&gt;Edge and Chrome help with this by highlighting the effect that individual CSS properties have in the page. This doesn&#39;t work with all properties, but does work with &lt;code&gt;margin&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;border&lt;/code&gt;, &lt;code&gt;justify-content&lt;/code&gt;, &lt;code&gt;align-items&lt;/code&gt;, &lt;code&gt;gap&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find one of the above properties in the &lt;strong&gt;Styles&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Move your mouse cursor over it.&lt;/li&gt;
&lt;li&gt;Watch as the corresponding affected region of the element gets highlighted in the page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/highlight-css-properties-on-hover.gif&quot; alt=&quot;Animation showing a flex layout in the page, and the cursor moving over various properties in the Styles pane.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Visualize the effect of CSS transforms</title>
    <link href="https://devtoolstips.org/tips/en/visualize-css-transforms/"/>
    <updated>2021-12-06T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/visualize-css-transforms/</id>
    <content type="html">&lt;p&gt;CSS transforms can sometimes be hard to wrap your head around, especially when chaining multiple transformations.&lt;/p&gt;
&lt;p&gt;Firefox helps with a cool visualization tool that allows you to see how and where the element was before being transformed, &lt;strong&gt;and&lt;/strong&gt; how it is now.&lt;/p&gt;
&lt;p&gt;Being able to compare the 2 states at the same time makes it easier to debug your &lt;code&gt;transform&lt;/code&gt; CSS properties.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the transformed element in the &lt;strong&gt;Inspector&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Find the &lt;code&gt;transform&lt;/code&gt; property in the &lt;strong&gt;Rules&lt;/strong&gt; sidebar panel.&lt;/li&gt;
&lt;li&gt;Hover over the property value.&lt;/li&gt;
&lt;li&gt;The on-page highlighter appears.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/visualize-css-transforms.gif&quot; alt=&quot;Animation showing how the CSS transform highlighter appears on the page when hovering over a transform CSS property in the Rules panel.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Visualize_transforms&quot;&gt;Learn more about it here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Copy a CSS rule as CSS-in-JS format</title>
    <link href="https://devtoolstips.org/tips/en/copy-rule-as-css-in-js/"/>
    <updated>2021-11-30T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/copy-rule-as-css-in-js/</id>
    <content type="html">&lt;p&gt;Do you use a CSS-in-JS framework? If so, you know how frustrating it can be to copy CSS from DevTools and paste it into your code.&lt;/p&gt;
&lt;p&gt;Indeed if the CSS you worked on in the &lt;strong&gt;Styles&lt;/strong&gt; panel looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; hotpink&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;letter-spacing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; .5rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 2rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 3rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;your CSS-in-JS framework probably expect it this way instead:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  background&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;hotpink&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  letterSpacing&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.5rem&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  margin&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2rem&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  fontSize&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3rem&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although the 2 are relatively similar, it&#39;s frustrating having to change semi-columns to commas, adding quotes, and swapping hyphen-separated property names with their camelCase equivalents.&lt;/p&gt;
&lt;p&gt;In Edge and Chrome, you don&#39;t have to. They both have an option that does the re-formatting for you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Right-click on any rule in the &lt;strong&gt;Styles&lt;/strong&gt; pane.&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Copy all declarations as JS&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that you can also use &lt;strong&gt;Copy declaration as JS&lt;/strong&gt; if you only want one. But this feature really shines when you copy all declarations at once.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/copy-rule-as-css-in-js.gif&quot; alt=&quot;Aimation showing the Styles pane in Edge, with the &amp;quot;Copy all declarations as JS&amp;quot; option being used, and then pasting the result in the Console to show that it is formatted.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Find out more about this feature on &lt;a href=&quot;https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/css/css-in-js&quot;&gt;the Microsoft DevTools docs website&lt;/a&gt;, or take a look at this short screencast:&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=DCWSV0J5C8A&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Scroll an element into view</title>
    <link href="https://devtoolstips.org/tips/en/scroll-into-view/"/>
    <updated>2021-11-23T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/scroll-into-view/</id>
    <content type="html">&lt;p&gt;If the inspected web page is long with a lot of elements, and its DOM tree is big and complex, it&#39;s easy to get lost, not knowing where the selected element is in the page.&lt;/p&gt;
&lt;p&gt;DevTools has got your back here! You can easily reveal where the selected element is in the page by scrolling it into view:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Right-click the element in the &lt;strong&gt;Elements&lt;/strong&gt; panel (or &lt;strong&gt;Inspector&lt;/strong&gt; panel in Firefox).&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Scroll into view&lt;/strong&gt; (in Firefox, you can also press &lt;kbd&gt;S&lt;/kbd&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/scroll-into-view.gif&quot; alt=&quot;Animation showing how the page is scrolled to reveal the selected element.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Take screenshots of your site in a device frame</title>
    <link href="https://devtoolstips.org/tips/en/take-in-device-screenshots/"/>
    <updated>2021-11-17T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/take-in-device-screenshots/</id>
    <content type="html">&lt;p&gt;Taking a photo of a mobile device or tablet is daunting as you have to deal with fingerprints, glare and focus issues. Using Device Emulation makes this a lot easier.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/take-in-device-screenshots.png&quot; alt=&quot;Screenshot of the devtoolstips.org website in an iPhone frame&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To take a screenshot of a web page inside a device frame, use either Chrome or Edge (or any Chromium browser):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In DevTools, turn on &lt;strong&gt;Device Emulation&lt;/strong&gt; by clicking the icon or pressing &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;M&lt;/kbd&gt; (&lt;kbd&gt;Cmd&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;M&lt;/kbd&gt; on Mac).&lt;/li&gt;
&lt;li&gt;Select a device from the Device dropdown menu. Be aware that not all devices have graphical frames.
&lt;img src=&quot;https://devtoolstips.org/assets/img/take-in-device-screenshots-devices-dropdown.png&quot; alt=&quot;The device dropdown menu open and showing all the options.&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;…&lt;/strong&gt; button (&lt;strong&gt;More options&lt;/strong&gt;) and select &lt;strong&gt;Show device frame&lt;/strong&gt;.
&lt;img src=&quot;https://devtoolstips.org/assets/img/take-in-device-screenshots-show-device-frame.png&quot; alt=&quot;Turning on device frame in the more options menu of the Device emulation tool.&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;…&lt;/strong&gt; button again and select &lt;strong&gt;Capture screenshot&lt;/strong&gt;.
&lt;img src=&quot;https://devtoolstips.org/assets/img/take-in-device-screenshots-capture-screenshot.png&quot; alt=&quot;Selecting the screenshot option from the More Options menu.&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&#39;s it, you now have a photo of your web page inside a device on transparent background.&lt;/p&gt;
&lt;p&gt;You can see this in action in the following video:&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=ZViLMjxpqEE&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Take a screenshot of a single node</title>
    <link href="https://devtoolstips.org/tips/en/node-screenshot/"/>
    <updated>2021-11-17T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/node-screenshot/</id>
    <content type="html">&lt;p&gt;In Firefox, Chrome, Polypane and Edge DevTools, you can screenshot a single node from the page.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the &lt;strong&gt;Elements&lt;/strong&gt; panel (or &lt;strong&gt;Inspector&lt;/strong&gt; panel in Firefox).&lt;/li&gt;
&lt;li&gt;Right-click on the node you want to screenshot.&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Capture node screenshot&lt;/strong&gt; (or &lt;strong&gt;Screenshot node&lt;/strong&gt; in Firefox).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/node-screenshot.gif&quot; alt=&quot;Animation showing taking a node screenshot in Firefox.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In Polypane:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click the &amp;quot;Make a screenshot&amp;quot; option.&lt;/li&gt;
&lt;li&gt;Select &amp;quot;Element&amp;quot;.&lt;/li&gt;
&lt;li&gt;Click the element on your page you want to screenshot.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/node-screenshot-polypane.gif&quot; alt=&quot;Animation showing taking a node screenshot in Polypane.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Automatically logging name and value in console.log()</title>
    <link href="https://devtoolstips.org/tips/en/automatically-log-name-and-value/"/>
    <updated>2021-11-17T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/automatically-log-name-and-value/</id>
    <content type="html">&lt;p&gt;Using the &lt;strong&gt;&lt;a href=&quot;https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/&quot;&gt;console&lt;/a&gt;&lt;/strong&gt; of DevTools you can to log some information to debug your JavaScript.&lt;/p&gt;
&lt;p&gt;The common way to do that is to add a &lt;code&gt;console.log()&lt;/code&gt; statement where you want to learn the value of a certain variable. In the following example the mouse position and how far the document has scrolled.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pageX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pageY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; top &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;documentElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollTop&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;top&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem is that this results in lots of numbers in the console without explanations about what they are. If you wrap the values you want to read out in curly brackets &lt;code&gt;{}&lt;/code&gt;, the console automatically displays both the name and the value of the variable.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pageX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pageY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; top &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;documentElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollTop&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;top&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/automatically-log-name-and-value.gif&quot; alt=&quot;Animation showing the different ways the variables are logged with and without curly braces.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=xTnqsA5vZX4&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Move panels to re-arrange them</title>
    <link href="https://devtoolstips.org/tips/en/move-panels/"/>
    <updated>2021-11-15T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/move-panels/</id>
    <content type="html">&lt;p&gt;Moving panels around the user interface can be very useful to make DevTools more unique to you and adapted to your needs.&lt;/p&gt;
&lt;p&gt;There are 2 ways that you can re-arrange panels in DevTools today: dragging them horizontally in the toolbar, to re-order them, and moving them between the top toolbar and the bottom (drawer) toolbar&lt;/p&gt;
&lt;h3&gt;To move tabs between the top and bottom areas (Edge only)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Right-click on any of the tabs.&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Move to Bottom&lt;/strong&gt; or &lt;strong&gt;Move to Top&lt;/strong&gt; depending on where the tab is.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This only works in Edge at the moment is makes it super easy to see any 2 tools at once (more information about &lt;a href=&quot;https://blogs.windows.com/msedgedev/2021/09/14/edge-devtools-93-personalization/&quot;&gt;Edge personalization features&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/move-panels-1.gif&quot; alt=&quot;Animation in Edge DevTools showing the move to top/bottom menus.&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;To re-order panels by dragging (Chrome, Edge, Firefox, Safari)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Click and hold any of the tabs in the toolbar.&lt;/li&gt;
&lt;li&gt;Move the tab horizontally, left or right, until the desired location is reached.&lt;/li&gt;
&lt;li&gt;Release the mouse button. The new order will be persisted every time you open DevTools.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you use some tools more than others, this can be used to group them at the start of the toolbar for example.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/move-panels-2.gif&quot; alt=&quot;Animation in Firefox DevTools showing how to move panels in the toolbar.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Format console messages</title>
    <link href="https://devtoolstips.org/tips/en/format-console-messages/"/>
    <updated>2021-11-10T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/format-console-messages/</id>
    <content type="html">&lt;p&gt;You can use special formatters in the &lt;code&gt;console.log&lt;/code&gt; function to format logs just the way you want.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;%s&lt;/code&gt; to format a variable as a string.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;%d&lt;/code&gt; to format a variable as an integer.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;%f&lt;/code&gt; to format a variable as a float.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;%o&lt;/code&gt; to print a DOM element variable.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;%O&lt;/code&gt; to print an object variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a bonus, the &lt;code&gt;%c&lt;/code&gt; formatter can also be used to &lt;a href=&quot;https://devtoolstips.org/tips/en/style-console-messages&quot;&gt;style console messages with CSS properties&lt;/a&gt;!&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; el &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;%c There are %d elements in %O&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;color:lime;background:black;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;childElementCount&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/format-console-messages.png&quot; alt=&quot;A formatted console message in Edge.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Simulate pseudo CSS classes</title>
    <link href="https://devtoolstips.org/tips/en/simulate-pseudo-classes/"/>
    <updated>2021-11-07T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/simulate-pseudo-classes/</id>
    <content type="html">&lt;p&gt;If you use &lt;code&gt;:hover&lt;/code&gt;, &lt;code&gt;:active&lt;/code&gt;, and other such pseudo-classes in CSS, you can actually simulate these states in DevTools without having to hover over or click on buttons and links.&lt;/p&gt;
&lt;p&gt;Open the Styles panel (in Chrome, Edge or Safari) or the Rules panel (in Firefox), and click the &lt;code&gt;:hov&lt;/code&gt; button. This will expand a section that allows you to lock one or multiple of these pseudo-classes on the selected element.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/simulate-pseudo-classes.png&quot; alt=&quot;The :hov panel to simulate various pseudo-classes.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This is great when you write your styles, as you can define see the changes to - for example - a hover state of an element without having to use your mouse to see it in action.&lt;/p&gt;
&lt;p&gt;It is even more useful when you want to test the different states of an element. In the following screencast you can see how to use the state simulation to check the hover, active, visited and focused state of a link without having to interact with the link using your keyboard or mouse. If you want to try it out yourself, &lt;a href=&quot;https://codepen.io/codepo8/pen/WNEMaPO&quot;&gt;here is the demo page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=CgHuHYRyvXc&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Zoom the DevTools UI to your liking</title>
    <link href="https://devtoolstips.org/tips/en/zoom-devtools-content/"/>
    <updated>2021-10-29T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/zoom-devtools-content/</id>
    <content type="html">&lt;p&gt;Do you find the UI of DevTools too small to comfortably work with? Because this UI is made of HTML and CSS, just like any other web pages, it can be zoomed in (or out) by the browser just like you can zoom in on web pages.&lt;/p&gt;
&lt;p&gt;To zoom the UI of DevTools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure it has focus first (click somewhere in DevTools).&lt;/li&gt;
&lt;li&gt;Use the &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;+&lt;/kbd&gt; and &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;-&lt;/kbd&gt; keyboard shortcuts to zoom in or out (replace &lt;kbd&gt;Ctrl&lt;/kbd&gt; with &lt;kbd&gt;Cmd&lt;/kbd&gt; on Mac).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/zoom-devtools-content.gif&quot; alt=&quot;Animation showing the UI of Chrome DevTools being zoomed in and out.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>See the page in 3D</title>
    <link href="https://devtoolstips.org/tips/en/see-the-page-in-3d/"/>
    <updated>2021-10-29T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/see-the-page-in-3d/</id>
    <content type="html">&lt;p&gt;See your page in 3 dimensions to quickly find out how deeply nested it is, fix z-index stacking issues, and performance issues.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Edge:
&lt;ul&gt;
&lt;li&gt;Open the command menu (&lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt;).&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;3D&lt;/code&gt; and press Enter.&lt;/li&gt;
&lt;li&gt;In the new panel that opens, switch between the 3 modes: z-index, DOM, and Composited Layers to visualize the page in 3D.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chrome and Safari also have a Layers panel that provides the same information as Edge&#39;s Composited Layers 3D mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/see-the-page-in-3d.png&quot; alt=&quot;The 3D view tool showing a page&#39;s z-index stacking tree as a 3d scene.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;More information on Edge&#39;s 3D tool in this video:&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=BZAH8ZXhHZA&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Cut down on console noise using live expressions</title>
    <link href="https://devtoolstips.org/tips/en/live-expressions/"/>
    <updated>2021-10-29T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/live-expressions/</id>
    <content type="html">&lt;p&gt;Using the &lt;a href=&quot;https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/&quot;&gt;Console&lt;/a&gt; of DevTools to log information that changes a lot is a bad idea. First of all, you flood it with information. Secondly, it can impact the performance of your product. And last but not least, you are most likely to only log this information to debug your project and end users should never get that information.&lt;/p&gt;
&lt;p&gt;An excellent alternative to logging a lot of information are &lt;a href=&quot;https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/live-expressions&quot;&gt;live expressions&lt;/a&gt;. To add a new live expression do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click the eye icon in DevTools &lt;img src=&quot;https://devtoolstips.org/assets/img/live-expressions-eye-icon.png&quot; alt=&quot;The eye button in DevTools&quot; /&gt;&lt;/li&gt;
&lt;li&gt;This gives you an entry field to type in any JavaScript expression. &lt;img src=&quot;https://devtoolstips.org/assets/img/live-expressions-field.png&quot; alt=&quot;The field to enter your live expression&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Save the expression by clicking outside the field or press &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;Enter&lt;/kbd&gt; on Mac or &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;Enter&lt;/kbd&gt; on Windows/Linux.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will pin the expression on top of the Console and show you the value returned from it. Any change will show live below the expression.&lt;/p&gt;
&lt;p&gt;You can use this, for example, to resize the window to a certain size by monitoring the &lt;code&gt;outerWidth&lt;/code&gt; and &lt;code&gt;outerHeight&lt;/code&gt; properties.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;outerWidth&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; x &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;outerHeight&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/live-expressions-window-resize.gif&quot; alt=&quot;Monitoring the window size using live expressions.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You can set as many live expressions as you want, and you can remove them by clicking the &lt;code&gt;x&lt;/code&gt; icon next to them.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Easily change CSS number values from the keyboard in increments of 0.1, 1, 10, 100</title>
    <link href="https://devtoolstips.org/tips/en/increment-css-number-values/"/>
    <updated>2021-10-29T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/increment-css-number-values/</id>
    <content type="html">&lt;p&gt;When playing with styling or layout code in DevTools, it&#39;s useful to be able to change widths, margins, and other CSS number values quickly.&lt;/p&gt;
&lt;p&gt;Manually entering new numbers works of course, but it gets in the way of creativity a little bit.&lt;/p&gt;
&lt;p&gt;In DevTools you can change numbers by using the arrow keys on your keyboard, this way you can easily and quickly test changes while checking the result in real time in the page. But there&#39;s more, you can also hold the various control keys to change the speed at which the numbers increment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Focus a CSS value in the &lt;strong&gt;Styles&lt;/strong&gt;/&lt;strong&gt;Rules&lt;/strong&gt;/&lt;strong&gt;Elements&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Make sure the text cursor is on a number.&lt;/li&gt;
&lt;li&gt;Press the &lt;strong&gt;Up&lt;/strong&gt; or &lt;strong&gt;Down&lt;/strong&gt; arrow button on the keyboard to increment, or decrement the number by 1.&lt;/li&gt;
&lt;li&gt;Hold &lt;kbd&gt;Shift&lt;/kbd&gt; at the same time to increment by 10.&lt;/li&gt;
&lt;li&gt;Or, hold &lt;kbd&gt;Alt&lt;/kbd&gt; to increment by 0.1.&lt;/li&gt;
&lt;li&gt;Or, hold &lt;kbd&gt;Ctrl&lt;/kbd&gt; to increment by 100.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/increment-css-number-values.gif&quot; alt=&quot;Animation of the Styles panel in Edge showing how numbers can be changed in various increments.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Get contextual DevTools help</title>
    <link href="https://devtoolstips.org/tips/en/get-contextual-help/"/>
    <updated>2021-10-29T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/get-contextual-help/</id>
    <content type="html">&lt;p&gt;Edge has a feature called the &lt;strong&gt;DevTools Tooltips&lt;/strong&gt; that gives you help about the different tools right inside of DevTools.&lt;/p&gt;
&lt;p&gt;There are several ways to enable it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Press &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;H&lt;/kbd&gt; (or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;H&lt;/kbd&gt; on mac),&lt;/li&gt;
&lt;li&gt;or click on the three-dots menu icon, then Help, then Toggle the DevTools Tooltips,&lt;/li&gt;
&lt;li&gt;or using the command menu (&lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt;) and typing &amp;quot;tooltips&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When tooltips are enabled, you can hover over them to get documentation about the tools.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/get-contextual-help.gif&quot; alt=&quot;Animation of the devtools tooltips in Edge.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Find and export CSS changes</title>
    <link href="https://devtoolstips.org/tips/en/find-css-changes/"/>
    <updated>2021-10-29T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/find-css-changes/</id>
    <content type="html">&lt;p&gt;If you spent time changing CSS in DevTools, either in the Rules panel (in Firefox), or in the Sources or Styles panels (in Chrome or Edge), and you don&#39;t remember all of the changes you made, you can find and extract them easily from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Firefox or Safari:
&lt;ul&gt;
&lt;li&gt;The Changes panel (in the Inspector), which allows you to copy all changes, or copy a given CSS rule&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Chrome or Edge:
&lt;ul&gt;
&lt;li&gt;The Changes panel (which you can open from the command menu by typing &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/find-css-changes.png&quot; alt=&quot;The Changes panel in Firefox showing a diff-like view of all the CSS changes.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Use commands to do things faster</title>
    <link href="https://devtoolstips.org/tips/en/execute-commands/"/>
    <updated>2021-10-29T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/execute-commands/</id>
    <content type="html">&lt;p&gt;There is a command menu in Edge and Chrome that allows you to quickly access many different features of DevTools without having to navigate the UI.&lt;/p&gt;
&lt;p&gt;Press &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; (or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; on mac) to open the command menu, and just start typing.&lt;/p&gt;
&lt;p&gt;You can use this to, for example, switch to a different panel by typing its name, change the color theme, change settings, disable javascript, etc.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/execute-commands.png&quot; alt=&quot;Edge&#39;s command menu.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Evaluate XPath to find elements in the page</title>
    <link href="https://devtoolstips.org/tips/en/evaluate-xpath/"/>
    <updated>2021-10-29T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/evaluate-xpath/</id>
    <content type="html">&lt;p&gt;DevTools supports 2 ways to evaluate &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/XPath&quot;&gt;XPath&lt;/a&gt; expressions to help you locate elements in the page. All browsers support those 2 ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From the Elements (or Inspector) panel:
&lt;ul&gt;
&lt;li&gt;Click anywhere in the panel to make sure it has focus&lt;/li&gt;
&lt;li&gt;Press &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;F&lt;/kbd&gt; (or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;F&lt;/kbd&gt; on Mac) to focus the search field&lt;/li&gt;
&lt;li&gt;Enter your XPath expression and press enter to find the elements that match&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/evaluate-xpath-1.png&quot; alt=&quot;The Inspector panel in Firefox showing the search field with an XPath expression.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Note that you can also &lt;a href=&quot;https://devtoolstips.org/tips/en/copy-element-xpath/&quot;&gt;copy the XPath expression from any element in DevTools&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From the Console panel:
&lt;ul&gt;
&lt;li&gt;You can use the built-in &lt;code&gt;$x()&lt;/code&gt; helper function like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;$x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;//div/div/label&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/evaluate-xpath-2.png&quot; alt=&quot;The Console panel in Safari showing an array of elements, as the result of executing the above function.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Store a node as a variable to use it in the console</title>
    <link href="https://devtoolstips.org/tips/en/store-node-as-variable/"/>
    <updated>2021-10-23T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/store-node-as-variable/</id>
    <content type="html">&lt;p&gt;If you want to use a DOM node from the page in the console:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Right-click the node in the &lt;strong&gt;Elements&lt;/strong&gt; (or &lt;strong&gt;Inspector&lt;/strong&gt; in Firefox).&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Store as global variable&lt;/strong&gt; (or &lt;strong&gt;Use in Console&lt;/strong&gt; in Firefox).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;Console&lt;/strong&gt; opens up, pre-filled with a new variable name (something like &lt;code&gt;temp1&lt;/code&gt;) which you can use to refer to the node any time you want.&lt;/p&gt;
&lt;p&gt;Note that if you only want to refer to the currently selected node (and not create a new variable), you can also &lt;a href=&quot;https://devtoolstips.org/tips/en/get-current-element-in-console&quot;&gt;use &lt;code&gt;$0&lt;/code&gt; in the console&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/store-node-as-variable.png&quot; alt=&quot;Firefox&#39;s &amp;quot;use in console&amp;quot; context menu option in the Inspector, and also showing the Console with a couple of tempN variables.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Thank you &lt;a href=&quot;https://austingil.com/&quot;&gt;Austin Gil&lt;/a&gt; for sharing this tip on &lt;a href=&quot;https://twitter.com/Stegosource/status/1451294683024355328&quot;&gt;Twitter&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Console.log() for the web with logpoints</title>
    <link href="https://devtoolstips.org/tips/en/use-logpoints/"/>
    <updated>2021-10-20T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/use-logpoints/</id>
    <content type="html">&lt;p&gt;Using the &lt;a href=&quot;https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/&quot;&gt;console&lt;/a&gt; to log some information is a very common way to debug your JavaScript. But you can also log information in any web site using &lt;strong&gt;Logpoints&lt;/strong&gt; in the &lt;a href=&quot;https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/sources/&quot;&gt;sources&lt;/a&gt; panel.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/use-logpoints.png&quot; alt=&quot;Setting a logpoint in the sources tool.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here&#39;s how to do it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In the Sources panel (or Debugger in Firefox), open a JavaScript file and right-click any line number.&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Add logpoint&lt;/code&gt; to open the editor&lt;/li&gt;
&lt;li&gt;In the editor, enter the JavaScript expression you&#39;d like to log.&lt;/li&gt;
&lt;li&gt;Hit Enter to save and a badge shows on the line number.&lt;/li&gt;
&lt;li&gt;Go to the console, interact with the site and every time this line executes, you see the result of the logpoint expression.&lt;/li&gt;
&lt;li&gt;If you don&#39;t want to log information any longer, click the Logpoint again to remove it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Logpoints are a way to inject a &lt;code&gt;console.log()&lt;/code&gt; into any web site without editing its source code.&lt;/p&gt;
&lt;p&gt;You can see this in action in this video on YouTube:&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=DRRezUZvZ6I&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Debug popups that appear on hover using JS</title>
    <link href="https://devtoolstips.org/tips/en/debug-js-hover/"/>
    <updated>2021-10-20T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/debug-js-hover/</id>
    <content type="html">&lt;p&gt;Have you ever been frustrated because you couldn&#39;t style a popup or tooltip that appeared on hover? If it uses JavaScript to get displayed, it&#39;s hard to style without modifying the code to make it stay visible.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Switch the &lt;strong&gt;Sources&lt;/strong&gt;/&lt;strong&gt;Debugger&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Then hover the element in the page so the popup appears, and leave the mouse there.&lt;/li&gt;
&lt;li&gt;Now press &lt;code&gt;F8&lt;/code&gt; to pause the debugger.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&#39;s it! The JS engine will pause and freeze the state of the page. You can now switch back to &lt;strong&gt;Elements&lt;/strong&gt;/&lt;strong&gt;Inspector&lt;/strong&gt; and style the popup content!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/debug-js-hover.gif&quot; alt=&quot;Animation showing how to pause the debugger with F8 while a tooltip is visible to then style it in the Inspector panel of Firefox.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Thank you to &lt;a href=&quot;https://twitter.com/samselikoff&quot;&gt;Sam Selikoff&lt;/a&gt; for &lt;a href=&quot;https://twitter.com/samselikoff/status/1441142046492807176&quot;&gt;tweeting&lt;/a&gt; about this tip and making a youtube video about it too:&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=aNZ9ci_1gtM&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Monitor all events dispatched on an element</title>
    <link href="https://devtoolstips.org/tips/en/monitor-element-events/"/>
    <updated>2021-10-15T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/monitor-element-events/</id>
    <content type="html">&lt;p&gt;You can use the &lt;code&gt;monitorEvents&lt;/code&gt; global function in the &lt;strong&gt;Console&lt;/strong&gt; panel to log all of the events dispatched on a particular element.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select an element in the &lt;strong&gt;Elements&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Go to the &lt;strong&gt;Console&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;monitorEvents($0, &#39;key&#39;);&lt;/code&gt; and hit Enter.&lt;/li&gt;
&lt;li&gt;Interact with the selected element in the page to dispatch events.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can replace &lt;code&gt;$0&lt;/code&gt; with a reference to any other element. &lt;code&gt;$0&lt;/code&gt; is just a shortcut to the currently selected element.&lt;/p&gt;
&lt;p&gt;You can also change &lt;code&gt;key&lt;/code&gt; to other event types like &lt;code&gt;mouse&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/monitor-element-events.gif&quot; alt=&quot;Animation showing how events get automatically logged when using the monitorEvents function.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Thank you to &lt;a href=&quot;https://github.com/mgechev&quot;&gt;Minko Gechev&lt;/a&gt; for &lt;a href=&quot;https://twitter.com/mgechev/status/1447419251120279558&quot;&gt;tweeting&lt;/a&gt; about this tip.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Edit CSS shadow visually</title>
    <link href="https://devtoolstips.org/tips/en/edit-shadow/"/>
    <updated>2021-10-11T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/edit-shadow/</id>
    <content type="html">&lt;p&gt;If you don&#39;t remember the CSS syntax for the &lt;code&gt;box-shadow&lt;/code&gt; property (and who does!), then Chrome and Edge can help you with their visual shadow editor!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select an element that has some shadow applied.&lt;/li&gt;
&lt;li&gt;Go to the &lt;strong&gt;Styles&lt;/strong&gt; pane.&lt;/li&gt;
&lt;li&gt;Click on the little shadow editor icon next to the &lt;code&gt;box-shadow&lt;/code&gt; property value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-shadow.gif&quot; alt=&quot;Animation showing the shadow editor in Edge&#39;s Styles pane.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Hide resources loaded by extensions in the Network panel</title>
    <link href="https://devtoolstips.org/tips/en/hide-extension-resources/"/>
    <updated>2021-10-08T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/hide-extension-resources/</id>
    <content type="html">&lt;p&gt;If you want to hide scripts and other resources loaded by browser extensions in the &lt;strong&gt;Network&lt;/strong&gt; panel, use the &lt;code&gt;-scheme:chrome-extension&lt;/code&gt; pattern in the filter input box.&lt;/p&gt;
&lt;p&gt;Credits go to &lt;a href=&quot;https://www.coolcomputerclub.com/&quot;&gt;Sunil&lt;/a&gt; for his &lt;a href=&quot;https://twitter.com/threepointone/status/1446064032407080966&quot;&gt;post on twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/hide-extension-resources.jpg&quot; alt=&quot;The Network panel in Chrome DevTools showing the pattern used in the filter input box.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Jump from a CSS variable usage to where it is defined</title>
    <link href="https://devtoolstips.org/tips/en/jump-to-css-variable/"/>
    <updated>2021-09-27T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/jump-to-css-variable/</id>
    <content type="html">&lt;p&gt;CSS &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties&quot;&gt;custom properties&lt;/a&gt;&lt;/strong&gt; (also called &lt;strong&gt;variables&lt;/strong&gt;) are very useful to avoid repeating values in CSS, like colors for example.&lt;/p&gt;
&lt;p&gt;You can define and use a custom property as shown below:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;rule-1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--my-main-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; blue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;rule-2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--my-main-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sometimes, it can be hard in DevTools to see both the place where the variable is used &lt;strong&gt;and&lt;/strong&gt; the place where it is defined. There may be a lot of rules and properties that apply to an element, requiring a lot of scrolling and searching.&lt;/p&gt;
&lt;p&gt;In Edge and Chrome, you can simply click on a &lt;code&gt;var(--foo)&lt;/code&gt; function to jump to where the &lt;code&gt;--foo&lt;/code&gt; variable is defined!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Edge or Chrome, select an element in the &lt;strong&gt;Elements&lt;/strong&gt; panels which has CSS rules applied that use custom properties.&lt;/li&gt;
&lt;li&gt;Hover over the property name inside the &lt;code&gt;var()&lt;/code&gt; function. You can see the value in a tooltip.&lt;/li&gt;
&lt;li&gt;Click on the property name.&lt;/li&gt;
&lt;li&gt;The Styles panel scrolls to where the property is defined and highlights it for a second.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/jump-to-css-variable.gif&quot; alt=&quot;Animation of clicking on a custom property link in the Styles panel in Edge.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Pause script execution when the DOM changes</title>
    <link href="https://devtoolstips.org/tips/en/break-on-dom-changes/"/>
    <updated>2021-09-22T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/break-on-dom-changes/</id>
    <content type="html">&lt;p&gt;If you want to know what JavaScript code removes, adds, or modifies a DOM element in the page, you can use DOM breakpoints in DevTools. You can choose to break on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Subtree modification: this pauses execution when any element in the subtree of the selected element is modified (added, removed, or changed attribute).&lt;/li&gt;
&lt;li&gt;Attribute modification: this pauses execution when an attribute of the selected element is modified.&lt;/li&gt;
&lt;li&gt;Node removal: this pauses execution when the selected node is removed from the DOM tree.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is useful if you don&#39;t know the codebase you are debugging for example.&lt;/p&gt;
&lt;p&gt;To add a DOM breakpoint:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to the &lt;strong&gt;Inspector/Elements&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Find the node which you want to add the breakpoint on.&lt;/li&gt;
&lt;li&gt;Open the contextual menu (right-click).&lt;/li&gt;
&lt;li&gt;Open the &lt;strong&gt;Break on&lt;/strong&gt; sub menu and choose the type of breakpoint you want to set.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/break-on-dom-changes.png&quot; alt=&quot;The Elements panel in Edge showing the &amp;quot;Break on&amp;quot; contextual menu on the selected node.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Once the requested DOM modification occurs, the JavaScript execution will pause and DevTools will navigate to the Sources/Debugger panel, showing the right line of code where execution is paused.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Convert color formats</title>
    <link href="https://devtoolstips.org/tips/en/convert-color-formats/"/>
    <updated>2021-09-20T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/convert-color-formats/</id>
    <content type="html">&lt;p&gt;Colors in CSS can be expressed in a number of different formats: keyword (e.g. &lt;code&gt;blue&lt;/code&gt;), RGB, HSL, hexadecimal, and others.&lt;/p&gt;
&lt;p&gt;In DevTools, you can easily convert from one format to the next.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find an element in the &lt;strong&gt;Elements&lt;/strong&gt; panel (or &lt;strong&gt;Inspector&lt;/strong&gt; panel in Firefox) that has some CSS color properties applied.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Styles&lt;/strong&gt; panel (or &lt;strong&gt;Rules&lt;/strong&gt; in Firefox), hold &lt;strong&gt;Shift&lt;/strong&gt; and click on the color swatch (the little colored circle next to the color value) to cycle through the different formats.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/convert-color-formats.gif&quot; alt=&quot;Animation of the rules panel in Firefox, showing the color conversion.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Change the color theme of DevTools</title>
    <link href="https://devtoolstips.org/tips/en/change-color-theme/"/>
    <updated>2021-09-20T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/change-color-theme/</id>
    <content type="html">&lt;p&gt;Chrome, Firefox and Safari all have a light and dark theme for their DevTools. Edge not only has those 2 themes, but also about 10 VS Code themes (like Monokai, Solarized Dark, etc.).&lt;/p&gt;
&lt;p&gt;You can change the theme based on your preference.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Firefox
&lt;ul&gt;
&lt;li&gt;Go to the settings (press F1) and select &amp;quot;dark&amp;quot; or light&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Chrome or Edge
&lt;ul&gt;
&lt;li&gt;Also go to settings (press F1) and select &amp;quot;light&amp;quot; or &amp;quot;dark&amp;quot; in the Themes drop-down, or any of the VS Code themes in Edge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Safari
&lt;ul&gt;
&lt;li&gt;Go to the settings and select &amp;quot;Appearance&amp;quot; between &amp;quot;System&amp;quot;, &amp;quot;Light&amp;quot; or &amp;quot;Dark&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/change-color-theme.png&quot; alt=&quot;the settings panel in Edge showing the Theme drop-down.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Force PWA periodic background syncs</title>
    <link href="https://devtoolstips.org/tips/en/force-pwa-periodic-sync/"/>
    <updated>2021-09-10T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/force-pwa-periodic-sync/</id>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Periodic_Background_Synchronization_API&quot;&gt;periodic background sync API&lt;/a&gt;, available to PWAs is a great way to fetch new content while the user isn&#39;t on the site, and while they have access to the network, to make sure they have the latest content when they come back to the app.&lt;/p&gt;
&lt;p&gt;It can be hard to debug though, as the sync only happen after the minimum interval has passed, and the browser thinks that now is a good time to trigger the sync.&lt;/p&gt;
&lt;p&gt;Thankfully, there is a way in Chrome and Edge to force the sync, so you don&#39;t have to wait for the browser to do it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to the &lt;strong&gt;Application&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;Service Workers&lt;/strong&gt; tab.&lt;/li&gt;
&lt;li&gt;Scroll down to the &lt;strong&gt;Periodic Sync&lt;/strong&gt; input.&lt;/li&gt;
&lt;li&gt;Enter the tag name for your registered sync, and click the &lt;strong&gt;Periodic Sync&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/force-pwa-periodic-sync.png&quot; alt=&quot;The Application panel in Edge showing the periodic sync input and buttons.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Play a sound when a line of JavaScript is executed</title>
    <link href="https://devtoolstips.org/tips/en/play-sound-on-js-execution/"/>
    <updated>2021-09-08T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/play-sound-on-js-execution/</id>
    <content type="html">&lt;p&gt;Sometimes pausing execution when a line of JavaScript is executed is too much, sometimes you only want to know that the line was executed at all, not pause there.&lt;/p&gt;
&lt;p&gt;To do this you can add &lt;code&gt;console.log()&lt;/code&gt; statements in your code, or &lt;a href=&quot;https://devtoolstips.org/tips/en/use-logpoints/&quot;&gt;use logpoints&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Safari, you can play an audio beep instead! This way you can hear that the line got executed, and your console doesn&#39;t get cluttered with more messages.&lt;/p&gt;
&lt;p&gt;To add an audio breakpoint:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a breakpoint on a line of code by clicking in the line number gutter.&lt;/li&gt;
&lt;li&gt;Right-click on the breakpoint and select &lt;strong&gt;Edit breakpoint&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Add action&lt;/strong&gt; and select &lt;strong&gt;Play sound&lt;/strong&gt; from the action dropdown.&lt;/li&gt;
&lt;li&gt;Check the &lt;strong&gt;Automatically continue after evaluating&lt;/strong&gt; option to avoid pausing on this line.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that&#39;s it! Now every time this line is executed, an audio beep will be played.&lt;/p&gt;
&lt;p&gt;You can remove the breakpoint by right-clicking on it and selecting &lt;strong&gt;Delete Breakpoint&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/play-sound-on-js-execution.gif&quot; alt=&quot;Animation showing how to add the audio breakpoint in Safari Web Inspector.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Visualize the screen reader order for elements within the page</title>
    <link href="https://devtoolstips.org/tips/en/visualize-screenreader-order/"/>
    <updated>2021-08-30T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/visualize-screenreader-order/</id>
    <content type="html">&lt;p&gt;Edge has an &lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/accessibility-tab&quot;&gt;accessibility tab&lt;/a&gt; within the elements panel that, among other things, lets you visualize the order a screen reader will encounter elements on a page. This is determined by the order of elements in the HTML source code.&lt;/p&gt;
&lt;p&gt;Users that can&#39;t view the screen may use a screen reader (e.g. Narrator, VoiceOver, NVDA) to consume the content of a page or focused element. If the order of the content read aloud is incorrect, it might give users a confusing experience. Incorrect ordering can occur if CSS is used to reorder elements visually in a way that is not reflected in the source order (&lt;a href=&quot;https://adrianroselli.com/2015/10/html-source-order-vs-css-display-order.html&quot;&gt;Examples here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This tool adds a layer on the page that shows the order in which elements would be read (i.e. their source order).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the Elements tab&lt;/li&gt;
&lt;li&gt;Go to the Accessibility panel&lt;/li&gt;
&lt;li&gt;In the toolbar, check the &amp;quot;Show source order&amp;quot; box&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/visualize-screenreader-order.png&quot; alt=&quot;The source order viewer in Microsoft Edge, showing numbered boxes around elements.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/test-tab-key-source-order-viewer#analyzing-the-order-of-keyboard-access-through-sections-of-the-page&quot;&gt;Learn more about it here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Block resources to test your site without CSS or JavaScript</title>
    <link href="https://devtoolstips.org/tips/en/block-resources/"/>
    <updated>2021-08-19T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/block-resources/</id>
    <content type="html">&lt;p&gt;The various resources loaded by your site aren&#39;t always guaranteed to reach your users when they visit your site. Network problems can occur, JavaScript may be disabled, a CDN may be down, or the browser can decide to block a resource.&lt;/p&gt;
&lt;p&gt;It&#39;s useful to test how your site looks when this occurs. It may also be useful to compare the performance of your site with and without certain resources.&lt;/p&gt;
&lt;p&gt;With DevTools you can block individual URLs or more global patterns.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With Chrome or Edge:
&lt;ul&gt;
&lt;li&gt;Go to the &lt;strong&gt;Network&lt;/strong&gt; panel&lt;/li&gt;
&lt;li&gt;Right-click on the request you want to block and select &lt;strong&gt;Block request URL&lt;/strong&gt; (you can also select &lt;strong&gt;Block request domain&lt;/strong&gt; to block all resources from the same domain)&lt;/li&gt;
&lt;li&gt;Reload the page&lt;/li&gt;
&lt;li&gt;You can also use the &lt;strong&gt;Network request blocking&lt;/strong&gt; panel (which opens automatically when you block a request) to add, edit and remove URLs or URL patterns&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/block-resources-1.png&quot; alt=&quot;The Network panel in Edge showing the contextual menu with the &amp;quot;block request url&amp;quot; item.&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With Firefox:
&lt;ul&gt;
&lt;li&gt;Go to the &lt;strong&gt;Network&lt;/strong&gt; panel&lt;/li&gt;
&lt;li&gt;Right-click on the request you want to block and select &lt;strong&gt;Block URL&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Reload the page&lt;/li&gt;
&lt;li&gt;You can also use the &lt;strong&gt;Blocking&lt;/strong&gt; sidebar (which opens automatically when you block a request) to add, edit and remove URLs or URL patterns&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/block-resources-2.png&quot; alt=&quot;The Network panel in Firefox showing the contextual menu with the &amp;quot;block url&amp;quot; item and the &amp;quot;blocking&amp;quot; sidebar.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Prototype content changes with designMode</title>
    <link href="https://devtoolstips.org/tips/en/prototype-content-changes-with-designmode/"/>
    <updated>2021-08-02T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/prototype-content-changes-with-designmode/</id>
    <content type="html">&lt;p&gt;When creating or modifying a design prototype for the web, you may want to quickly edit content in the browser without having to find the relevant code.&lt;/p&gt;
&lt;p&gt;When you turn on &lt;code&gt;designMode&lt;/code&gt; for the document or a given element, all associated text becomes editable directly in the browser. Images and other page content can be deleted, too. This is a quick way to prototype design changes such as seeing how a page responds to very long or very short headline copy.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;designMode&lt;/code&gt; is not a DevTools-specific feature, as it is defined as part of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/designMode&quot;&gt;Web API&lt;/a&gt;. However, toggling &lt;code&gt;designMode&lt;/code&gt; via the DevTools Console is a convenient way to temporarily make the page editable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the Console&lt;/li&gt;
&lt;li&gt;Enter &lt;code&gt;document.designMode=&amp;quot;on&amp;quot;&lt;/code&gt; and press Enter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Turn off &lt;code&gt;designMode&lt;/code&gt; with the expression &lt;code&gt;document.designMode=&amp;quot;off&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In Polypane these steps are not neede and it&#39;s enough to open the &lt;strong&gt;Debug tools&lt;/strong&gt; and activating &lt;strong&gt;Edit content&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Changes are not persisted and will revert on page close or refresh.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/prototype-content-changes-with-designmode.gif&quot; alt=&quot;Animation of editable web page with designMode on.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Capture node creation stack traces</title>
    <link href="https://devtoolstips.org/tips/en/capture-node-creation-stacks/"/>
    <updated>2021-07-27T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/capture-node-creation-stacks/</id>
    <content type="html">&lt;p&gt;Have you ever wanted to know what caused a specific DOM node or element to be created in the page?
When working on a site that uses a lot of JavaScript and especially when you don&#39;t know the codebase, this can be a life saver.&lt;/p&gt;
&lt;p&gt;It turns out there is a way to do this automatically without having to set breakpoints in the code at all. It is a hidden experiment for now so you will need to first enable it in Chrome or Edge.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Go through the following steps once to enable the experiment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the DevTools settings (press F1, or use the gear icon in the toolbar)&lt;/li&gt;
&lt;li&gt;Go to the &lt;strong&gt;Experiments&lt;/strong&gt; tab&lt;/li&gt;
&lt;li&gt;Check the &lt;strong&gt;Capture node creation stacks&lt;/strong&gt; box&lt;/li&gt;
&lt;li&gt;Reload DevTools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure DevTools is opened when using the website so that stack traces get captured. When you want to know what created a node:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the node in the Elements panel&lt;/li&gt;
&lt;li&gt;In the sidebar, select the &lt;strong&gt;Stack Trace&lt;/strong&gt; panel (you might have to first click on the &lt;strong&gt;More tabs&lt;/strong&gt; chevron &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; to see the tab)&lt;/li&gt;
&lt;li&gt;The stack of JavaScript calls that led to the node creation (if any) should be displayed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/capture-node-creation-stacks.png&quot; alt=&quot;Edge DevTools&#39; Elements panel with the Stack Trace sidebar visible, showing a stack of Vue JS function calls that created an element on the TODOMVC sample app.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Throttle the network speed to test your website on slower connections</title>
    <link href="https://devtoolstips.org/tips/en/throttle-network-speed/"/>
    <updated>2021-07-20T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/throttle-network-speed/</id>
    <content type="html">&lt;p&gt;While you may develop your website on a fast network connection at home or at work, your users may not be able to use it with an equally fast connection. Perhaps they&#39;re in a moving car, or on the subway, or they don&#39;t have access to high-speed internet at their place. Whatever it is, they may experience your site very differently than you do because of this.&lt;/p&gt;
&lt;p&gt;Testing your site with a slower connection helps you understand how it loads and appears on the screen.&lt;/p&gt;
&lt;p&gt;Firefox, Chrome and Edge let you simulate slower network connections to do this.&lt;/p&gt;
&lt;p&gt;To throttle your connection:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the &lt;strong&gt;Network&lt;/strong&gt; tool.&lt;/li&gt;
&lt;li&gt;Use the dropdown that says &lt;code&gt;No throttling&lt;/code&gt; and choose any of the other values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also do this from the &lt;a href=&quot;https://devtoolstips.org/tips/en/simulate-devices&quot;&gt;device simulation&lt;/a&gt; mode by using the same dropdown there.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/throttle-network-speed.png&quot; alt=&quot;The Network panel in Edge showing the network throttling drop-down.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In Polypane:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;strong&gt;Emulation options&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Go to the &lt;strong&gt;Network&lt;/strong&gt; tab.&lt;/li&gt;
&lt;li&gt;Toggle between the different network speed settings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/throttle-network-speed-2.png&quot; alt=&quot;The Network option in Polypane.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Edit CSS absolute and relative positions by dragging points in the page</title>
    <link href="https://devtoolstips.org/tips/en/edit-position/"/>
    <updated>2021-07-19T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/edit-position/</id>
    <content type="html">&lt;p&gt;Firefox features a position editor that lets you move elements in the page by drag and drop. This works with elements that are positioned in CSS with &lt;code&gt;position:relative&lt;/code&gt; or &lt;code&gt;position:absolute&lt;/code&gt; and that have at least one of &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; defined.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select an element with &lt;code&gt;position:relative&lt;/code&gt; or &lt;code&gt;position:absolute&lt;/code&gt; applied to it in the Inspector panel.&lt;/li&gt;
&lt;li&gt;Open the Layout sidebar panel, and scroll down to the Box Model section.&lt;/li&gt;
&lt;li&gt;Find the &amp;quot;Edit Position&amp;quot; icon and click it.&lt;/li&gt;
&lt;li&gt;Use the handles in the page to move the element around, within its positioned ancestor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Reposition_elements_in_the_page&quot;&gt;Learn more about this tool here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-position.gif&quot; alt=&quot;Animation of the geometry editor in Firefox, toggling it from the Layout panel, and then dragging top and left points to move the element in the page.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Copy an element&#39;s XPath expression</title>
    <link href="https://devtoolstips.org/tips/en/copy-element-xpath/"/>
    <updated>2021-07-13T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/copy-element-xpath/</id>
    <content type="html">&lt;p&gt;You can easily copy an element&#39;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/XPath&quot;&gt;XPath&lt;/a&gt; expression from DevTools. This is useful if you need this expression for an automated test for example.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the Elements (or Inspector) panel&lt;/li&gt;
&lt;li&gt;Use the context-menu (right-click) on the element you care about&lt;/li&gt;
&lt;li&gt;Go into the Copy sub-menu&lt;/li&gt;
&lt;li&gt;Choose the Xpath option&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that you can then use this xpath expression to &lt;a href=&quot;https://devtoolstips.org/tips/en/evaluate-xpath/&quot;&gt;find elements again in DevTools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/copy-element-xpath.png&quot; alt=&quot;The Elements panel in Edge showing the copy xpath option in the contextual menu.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Convert font property units</title>
    <link href="https://devtoolstips.org/tips/en/convert-font-units/"/>
    <updated>2021-07-12T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/convert-font-units/</id>
    <content type="html">&lt;p&gt;Font CSS properties such as &lt;code&gt;font-size&lt;/code&gt;, &lt;code&gt;line-height&lt;/code&gt; or &lt;code&gt;letter-spacing&lt;/code&gt; can be expressed in multiple different length units (like many other CSS properties).&lt;/p&gt;
&lt;p&gt;Firefox, Chrome and Edge allow you to convert values between these units easily.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Firefox
&lt;ul&gt;
&lt;li&gt;Find an element in the Inspector panel that has font properties which you&#39;d like to change&lt;/li&gt;
&lt;li&gt;Select the Fonts sidebar tab&lt;/li&gt;
&lt;li&gt;Use the unit drop-downs next to &lt;code&gt;Size&lt;/code&gt;, &lt;code&gt;Line Height&lt;/code&gt; or &lt;code&gt;Spacing&lt;/code&gt; to convert the current value to another unit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/convert-font-units-1.png&quot; alt=&quot;The fonts panel in Firefox, showing the unit conversion drop-down.&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Chrome or Edge
&lt;ul&gt;
&lt;li&gt;You first need to enable the Fonts editor experiment
&lt;ul&gt;
&lt;li&gt;Go to the DevTools settings (F1)&lt;/li&gt;
&lt;li&gt;Go to the Experiments tab&lt;/li&gt;
&lt;li&gt;Check the &amp;quot;Enable the new Font Editor tool within the Styles pane&amp;quot; box&lt;/li&gt;
&lt;li&gt;Re-start DevTools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Find an element in the Elements panel that has font properties which you&#39;d like to change&lt;/li&gt;
&lt;li&gt;Click on the &lt;code&gt;Aa&lt;/code&gt; icon in the Styles sidebar, in the CSS rule that contains the property you want to convert&lt;/li&gt;
&lt;li&gt;Use the unit drop-downs next to &lt;code&gt;Font Size&lt;/code&gt;, &lt;code&gt;Line Height&lt;/code&gt;, &lt;code&gt;Font Weight&lt;/code&gt; or &lt;code&gt;Spacing&lt;/code&gt; to convert the current value to another unit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/convert-font-units-2.png&quot; alt=&quot;The fonts panel in Edge, showing the unit conversion drop-down.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Find DevTools reference documentation</title>
    <link href="https://devtoolstips.org/tips/en/find-devtools-documentation/"/>
    <updated>2021-07-02T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/find-devtools-documentation/</id>
    <content type="html">&lt;p&gt;If you want to learn more about what other tools exist in a browser, or what features a given tool provides, you can find reference documentation from all the major browsers here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://firefox-source-docs.mozilla.org/devtools-user/index.html&quot;&gt;Firefox Developer Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/&quot;&gt;Edge Developer Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/docs/devtools/&quot;&gt;Chrome Developer Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webkit.org/web-inspector/&quot;&gt;Safari Web Inspector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://polypane.app/docs/&quot;&gt;Polypane developer tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/find-devtools-documentation.png&quot; alt=&quot;The 4 documentation websites listed above.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Drag and drop nodes in the DOM tree</title>
    <link href="https://devtoolstips.org/tips/en/drag-drop-dom-nodes/"/>
    <updated>2021-07-01T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/drag-drop-dom-nodes/</id>
    <content type="html">&lt;p&gt;If you need to move nodes or elements around in the DOM tree, to re-order things in the page, you can do it by drag and dropping nodes around in the Elements (or Inspector) panel.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/drag-drop-dom-nodes.gif&quot; alt=&quot;Animation showing a node being dragged by the mouse in the DOM tree view of the Elements panel in Edge.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Event listeners are suppressed when paused</title>
    <link href="https://devtoolstips.org/tips/en/suppressed-event-listeners-when-paused/"/>
    <updated>2021-06-30T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/suppressed-event-listeners-when-paused/</id>
    <content type="html">&lt;p&gt;This is not really a tip, but rather an interesting thing to be aware of when debugging JavaScript.&lt;/p&gt;
&lt;p&gt;If you use breakpoints in the Sources (or Debugger) tab in DevTools to debug JavaScript, you should know that all event listeners are suppressed while paused at one of them.&lt;/p&gt;
&lt;p&gt;For example, if you have a button with an &lt;code&gt;onclick&lt;/code&gt; handler, and you&#39;re paused at a breakpoint, then clicking that button won&#39;t execute the handler. It also won&#39;t execute it later when you resume execution.
In fact, most DevTools display an overlay on top of the entire page that prevents you from accessing it at all.&lt;/p&gt;
&lt;p&gt;This also happens if you manually try to dispatch new events from the console using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent&quot;&gt;&lt;code&gt;dispatchEvent&lt;/code&gt;&lt;/a&gt;. If there are handlers for these events, they also won&#39;t get called while execution is paused.&lt;/p&gt;
&lt;p&gt;The reason for this is that (ignoring workers) JavaScript on your page only runs in one thread. So while that thread is paused at one specific location, it&#39;s not supposed to be able to execute code from other locations.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/suppressed-event-listeners-when-paused.png&quot; alt=&quot;A page in edge with the DevTools Sources paused at a location, and the on-page overlay preventing access to the page.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Sample colors from the page</title>
    <link href="https://devtoolstips.org/tips/en/sample-colors-from-the-page/"/>
    <updated>2021-06-30T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/sample-colors-from-the-page/</id>
    <content type="html">&lt;p&gt;Being able to sample colors from the page is super useful. Firefox, Edge and Chrome all allow you to do this in 2 different ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Firefox it&#39;s really simple and doesn&#39;t even require opening DevTools:
&lt;ul&gt;
&lt;li&gt;Go to the main Firefox menu&lt;/li&gt;
&lt;li&gt;Go to the &amp;quot;More Tools&amp;quot; submenu&lt;/li&gt;
&lt;li&gt;Click on the Eyedropper menu item&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/sample-colors-from-the-page-1.gif&quot; alt=&quot;Animation of the eyedropper tool being started from the Firefox main menu.&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is a second way to do this in Firefox from DevTools:
&lt;ul&gt;
&lt;li&gt;Open the Inspector panel&lt;/li&gt;
&lt;li&gt;Click on the eye dropper button in the typ-right corner of the panel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/sample-colors-from-the-page-2.png&quot; alt=&quot;The eyedropper button in Firefox&#39;s inspector panel.&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In Polypane you also do not need devtools&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click the eye dropper icon in the address bar.&lt;/li&gt;
&lt;li&gt;Or use the keyboard shortcut &lt;code&gt;Shift Alt P&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After selecting a color, an overview of previously selected colors, previews and contrast ratios is shown.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/sample-colors-from-the-page-4.gif&quot; alt=&quot;Animation of starting the eyedropper tool from Polypane&#39;s address bar.&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Chrome and Edge:
&lt;ul&gt;
&lt;li&gt;Open the Elements panel and select an element that has some CSS color set to it&lt;/li&gt;
&lt;li&gt;Find the color in the Styles pane and click on the color swatch icon next to it&lt;/li&gt;
&lt;li&gt;Just start moving the mouse over the page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/sample-colors-from-the-page-3.gif&quot; alt=&quot;Animation of starting the eyedropper tool from chrome and edge&#39;s color pickers.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Visualize the tabbing order on the page</title>
    <link href="https://devtoolstips.org/tips/en/visualize-tabbing-order/"/>
    <updated>2021-06-29T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/visualize-tabbing-order/</id>
    <content type="html">&lt;p&gt;Users who do not or can&#39;t use a mouse or trackpad can use the tab key to navigate through focusable elements on the page. If the order in which those elements get focused is incorrect, this might give users a confusing experience.&lt;/p&gt;
&lt;p&gt;In Firefox:&lt;/p&gt;
&lt;p&gt;Firefox has a dedicated &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector&quot;&gt;accessibility inspector panel&lt;/a&gt; that, among other things, lets you visualize the tabbing order on a page.&lt;/p&gt;
&lt;p&gt;This tool adds a layer on the page that shows the order in which elements would become focused.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the Accessibility panel&lt;/li&gt;
&lt;li&gt;In the toolbar, check the &amp;quot;Show Tabbing Order&amp;quot; box&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/visualize-tabbing-order.png&quot; alt=&quot;The tabbing order highlighter in Firefox, showing numbered boxes around focusable elements.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector#show_web_page_tabbing_order&quot;&gt;Learn more about it here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Polypane:&lt;/p&gt;
&lt;p&gt;Polypane has an &lt;strong&gt;outline panel&lt;/strong&gt; that, among other things, lets you visualize the focus (tabbing) order on a page.&lt;/p&gt;
&lt;p&gt;This tool shows the tabbing order in a list that also warns you about issues with non-interactive elements, wrong tabindices and when the tab order is illogical for the current reading direction. The current active element is shown with an arrow.&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Show overlay&lt;/strong&gt; to add a layer to the page that draws a line from each element to the next, to make it easy to follow.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/visualize-tabbing-order-polypane.png&quot; alt=&quot;The tabbing order highlighter in Polypane, showing numbered boxes and a line going from each focusable element to the next.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://polypane.app/docs/outline-panel/#focus-order-tab-order&quot;&gt;Learn more about it here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Apply CSS styles to console messages</title>
    <link href="https://devtoolstips.org/tips/en/style-console-messages/"/>
    <updated>2021-06-28T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/style-console-messages/</id>
    <content type="html">&lt;p&gt;The &lt;code&gt;console.log&lt;/code&gt; output can be styled in DevTools using CSS.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;%c Hello World&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;color: orange; font-size: 2em;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/style-console-messages.png&quot; alt=&quot;A styled console message in Edge.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Find all images without alternative text</title>
    <link href="https://devtoolstips.org/tips/en/find-all-images-without-alt-text/"/>
    <updated>2021-06-28T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/find-all-images-without-alt-text/</id>
    <content type="html">&lt;p&gt;With HTML, you can add alternative text to images using the &lt;code&gt;alt&lt;/code&gt; attribute. It can be used to add a text description to images, which is extremely useful for accessibility as some people may not be able to see the images. With &lt;code&gt;alt&lt;/code&gt;, screen readers can announce the alternative text to the user.&lt;/p&gt;
&lt;p&gt;Using DevTools, you can quickly check which images on a page do not have an &lt;code&gt;alt&lt;/code&gt; text, here is how:&lt;/p&gt;
&lt;p&gt;Execute this in the Console panel: &lt;code&gt;console.table($$(&#39;img&#39;).filter(i =&amp;gt; !i.alt), [&#39;src&#39;])&lt;/code&gt; and that&#39;s it! You&#39;ll have the list of image URLs that don&#39;t have an alternative text.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/find-all-images-without-alt-text.png&quot; alt=&quot;The output of the console.table command from above shown in the Firefox DevTools console.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here&#39;s what this command does:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$$()&lt;/code&gt; find all elements that match a given CSS selector (&lt;a href=&quot;https://devtoolstips.org/tips/en/query-dom-from-console&quot;&gt;learn more here&lt;/a&gt;). Here it is used to find all images.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter()&lt;/code&gt; is used to only keep the images that do not have an &lt;code&gt;alt&lt;/code&gt; attribute.&lt;/li&gt;
&lt;li&gt;Finally, &lt;code&gt;console.table()&lt;/code&gt; takes the array returned by &lt;code&gt;filter&lt;/code&gt; and outputs a pretty table in the console based on it. Notice the second (optional) paramter that is used here to retrict the number of columns to just the &lt;code&gt;src&lt;/code&gt; attribute from each image.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;In Polypane:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the &lt;strong&gt;outline panel&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Images&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;See which images in the list have an &amp;quot;Alt: missing!&amp;quot; warning.&lt;/li&gt;
&lt;li&gt;(Optionally) click &lt;strong&gt;Show overlay&lt;/strong&gt; to highlight the missing images on the page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/find-all-images-without-alt-text-polypane.png&quot; alt=&quot;The outline panel in Polypane showing a &#39;missing&#39; warning for an image.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Draw a box around all elements to debug your CSS and page structure</title>
    <link href="https://devtoolstips.org/tips/en/outline-everything/"/>
    <updated>2021-06-25T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/outline-everything/</id>
    <content type="html">&lt;p&gt;Simple, yet powerful, &lt;code&gt;* { outline: 1px solid red; }&lt;/code&gt; is a useful debugging trick that helps understanding the page structure, finding overflow bugs or understand why elements are being pushed away for no apparent reason.&lt;/p&gt;
&lt;p&gt;In Edge, Chrome, Firefox and Safari:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the Elements panel (in Chrome, Edge or Safari) or Inspector panel (in Firefox).&lt;/li&gt;
&lt;li&gt;Click the &lt;code&gt;+&lt;/code&gt; (new style) icon in the Styles or Rules sidebar.&lt;/li&gt;
&lt;li&gt;Add the rule  &lt;code&gt;{ outline: 1px solid red; }&lt;/code&gt; to the CSS Selector &lt;code&gt;*&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Polypane:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Press &lt;code&gt;ctrl/cmd + d&lt;/code&gt; to automatically add outlines around all elements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And voila! All elements are outlined and you can understand what&#39;s going on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/outline-everything.gif&quot; alt=&quot;Animation showing how adding the rule in the styles pane if chrome devtools outlines all elements in the page.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Find DOM elements from the console</title>
    <link href="https://devtoolstips.org/tips/en/query-dom-from-console/"/>
    <updated>2021-06-24T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/query-dom-from-console/</id>
    <content type="html">&lt;p&gt;&lt;code&gt;$&lt;/code&gt; and &lt;code&gt;$$&lt;/code&gt; are 2 functions you can use in the console to find elements in the page.&lt;/p&gt;
&lt;p&gt;They are essentially shortcuts to the longer &lt;code&gt;document.querySelector()&lt;/code&gt; and &lt;code&gt;document.querySelectorAll()&lt;/code&gt; functions, but &lt;code&gt;$$&lt;/code&gt; returns an array instead of a &lt;code&gt;NodeList&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;They&#39;re nice and short, and for those who worked with jQuery, they will feel familiar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/query-dom-from-console.png&quot; alt=&quot;Firefox&#39;s console panel, showing 3 different examples of using the $ and $$ built-in console functions.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Persist console messages across page navigations and reloads</title>
    <link href="https://devtoolstips.org/tips/en/persist-logs-across-pages/"/>
    <updated>2021-06-24T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/persist-logs-across-pages/</id>
    <content type="html">&lt;p&gt;By default, the messages displayed in the console get removed as soon as you refresh the page (or navigate to a new page). If you want to keep those messages as long as DevTools is open, follow these steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Firefox:
&lt;ul&gt;
&lt;li&gt;In the Console panel, click on the cog icon (top-right corner) and select &amp;quot;Persist Logs&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Edge or Chrome:
&lt;ul&gt;
&lt;li&gt;In the Console panel, click on the cog icon (top-right corner) and check the &amp;quot;Preserve Log&amp;quot; box&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Safari:
&lt;ul&gt;
&lt;li&gt;In the Console panel, check the &amp;quot;Preserve Log&amp;quot; box in the top toolbar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Polypane:
&lt;ul&gt;
&lt;li&gt;In the Console panel, check the &amp;quot;Preserve&amp;quot; box in the top toolbar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/persist-logs-across-pages.png&quot; alt=&quot;Edge devtools&#39; console showing the settings panel at the top, with the &amp;quot;perserve log&amp;quot; box checked.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Simulate color vision deficiencies</title>
    <link href="https://devtoolstips.org/tips/en/simulate-color-vision-deficiencies/"/>
    <updated>2021-06-22T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/simulate-color-vision-deficiencies/</id>
    <content type="html">&lt;p&gt;People who visit your web pages may have different types of color vision deficiencies that, if you incorrectly use colors for meaning, may affect their experience.&lt;/p&gt;
&lt;p&gt;Firefox, Chrome, Polypane and Edge make it possible for you to test how a web page may appear to somebody with a color vision deficiency.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Firefox:
&lt;ul&gt;
&lt;li&gt;Go to the Accessibility panel&lt;/li&gt;
&lt;li&gt;In the toolbar at the top, choose from a selection of different color vision deficiencies in the &amp;quot;Simulate&amp;quot; drop-down&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/simulate-color-vision-deficiencies-1.png&quot; alt=&quot;The color vision simulation drop-down in Firefox.&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Chrome, or in Edge:
&lt;ul&gt;
&lt;li&gt;You first need to open the Rendering panel. Either use the &lt;a href=&quot;https://devtoolstips.org/tips/en/execute-commands/&quot;&gt;command menu&lt;/a&gt; and type &lt;code&gt;rendering&lt;/code&gt; or use the main menu (the three-dots icon in the top-right corner of the screen) and go to More Tools to find it.&lt;/li&gt;
&lt;li&gt;Scroll down until you find the &amp;quot;Emulate vision deficiencies&amp;quot; section, and choose from the drop-down&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/simulate-color-vision-deficiencies-2.png&quot; alt=&quot;The color vision simulation drop-down in Chrome.&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Polypane:
&lt;ul&gt;
&lt;li&gt;Open the &lt;strong&gt;Debug tools&lt;/strong&gt; option of a pane.&lt;/li&gt;
&lt;li&gt;Switch to &lt;strong&gt;Simulators&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Select one of the nine available color vision simulators or hover over the &amp;quot;i&amp;quot; icon for additional information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/simulate-color-vision-deficiencies-3.png&quot; alt=&quot;The simulator drop-down in Polypane.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Edit CSS angles</title>
    <link href="https://devtoolstips.org/tips/en/edit-css-angles/"/>
    <updated>2021-06-22T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/edit-css-angles/</id>
    <content type="html">&lt;p&gt;In CSS, several different properties use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/angle&quot;&gt;angle&lt;/a&gt; unit values, such as the &lt;code&gt;rotate()&lt;/code&gt; function of a &lt;code&gt;transform&lt;/code&gt; or the &lt;code&gt;linear-gradient&lt;/code&gt; orientation of a &lt;code&gt;background-image&lt;/code&gt;, and more.&lt;/p&gt;
&lt;p&gt;In Chrome and Edge, wherever a value that uses an angle unit (e.g. &lt;code&gt;deg&lt;/code&gt;, &lt;code&gt;rad&lt;/code&gt;, &lt;code&gt;grad&lt;/code&gt;, &lt;code&gt;turn&lt;/code&gt;) is displayed in the Styles panel, you can edit it with a nice little visual editor instead of typing the number by hand.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-css-angles.gif&quot; alt=&quot;Animation of the angle editor in Chrome, where a click is made on the angle swatch, and then the mouse is used to change the angle.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Edit clip-path and shape-outside CSS properties by dragging points in the page</title>
    <link href="https://devtoolstips.org/tips/en/edit-clip-path-shape-outside/"/>
    <updated>2021-06-21T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/edit-clip-path-shape-outside/</id>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/clip-path&quot;&gt;&lt;code&gt;clip-path&lt;/code&gt; property&lt;/a&gt; is a great way to change the final shape of an element and give it the shape that you want.&lt;br /&gt;
You can use this property to make an element be a circle, an ellipse, a polygon or any shape that can be described with an &lt;a href=&quot;https://developer.mozilla.org/docs/Web/SVG/Tutorial/Paths&quot;&gt;SVG path&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/shape-outside&quot;&gt;&lt;code&gt;shape-outside&lt;/code&gt; property&lt;/a&gt; is similar in that you can define a shape, but it&#39;s useful to float other content around an element, along that shape.&lt;/p&gt;
&lt;p&gt;In Firefox, you can freely edit the polygon, circle or ellipse types of shapes with the mouse, by dragging points around in the page.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select an element that has a &lt;code&gt;clip-path&lt;/code&gt; or &lt;code&gt;shape-outside&lt;/code&gt; property applied.&lt;/li&gt;
&lt;li&gt;In the Rules sidebar (in the Inspector panel), the &lt;code&gt;clip-path&lt;/code&gt; property will have a little shape icon. Click on this icon.&lt;/li&gt;
&lt;li&gt;The shape now gets highlighted in the page, with control points.&lt;/li&gt;
&lt;li&gt;Click-and-drag any of these points to change the shape to your likings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Edit_CSS_shapes&quot;&gt;Learn more about this tool here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-clip-path-shape-outside.gif&quot; alt=&quot;Animation of the shape editor in firefox, clicking on the Rules panel icon, and then moving points around in the page.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Copy an object from the console</title>
    <link href="https://devtoolstips.org/tips/en/copy-from-console/"/>
    <updated>2021-06-21T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/copy-from-console/</id>
    <content type="html">&lt;p&gt;The console panel supports a very handy &lt;code&gt;copy()&lt;/code&gt; function that stringifies and copies anything you pass to it as an argument, so you can then paste it somewhere else.&lt;/p&gt;
&lt;p&gt;For example: &lt;code&gt;copy($$(&#39;a&#39;).map(a =&amp;gt; a.href).join(&#39;\n&#39;))&lt;/code&gt; copies all of the links from the page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/copy-from-console.png&quot; alt=&quot;Chrome devtools&#39; console with a line of code using the copy() function.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Get the selected element in the console</title>
    <link href="https://devtoolstips.org/tips/en/get-current-element-in-console/"/>
    <updated>2021-06-17T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/get-current-element-in-console/</id>
    <content type="html">&lt;p&gt;If you selected an element in the Elements panel (in Chrome, Safari, Polypane or Edge) or the Inspector panel (in Firefox), you can refer to it in the console using &lt;code&gt;$0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This shortcut will return the DOM node instance, which you can then use to do things like getting computed styles, or check DOM properties, etc.&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;getComputedStyles($0).display&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/get-current-element-in-console.jpg&quot; alt=&quot;Safari&#39;s console showing how the $0 shortcut returns the selected element.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In Chrome, Polypane and Edge, the last 4 previously selected elements are additionally available as &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, &lt;code&gt;$3&lt;/code&gt; and &lt;code&gt;$4&lt;/code&gt;. &lt;a href=&quot;https://devtoolstips.org/tips/en/get-current-element-in-console/&quot;&gt;Learn more here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Find your web component&#39;s custom element code</title>
    <link href="https://devtoolstips.org/tips/en/find-custom-elements-code/"/>
    <updated>2021-06-17T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/find-custom-elements-code/</id>
    <content type="html">&lt;p&gt;In Firefox, when inspecting elements (in the Inspector panel), you can click on the &lt;code&gt;custom&lt;/code&gt; badge to go straight to the custom element&#39;s JavaScript source code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/find-custom-elements-code.gif&quot; alt=&quot;Animation showing the custom button in Firefox&#39;s inspector and that clicking on it goes to the debugger.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Tweak css grid and flexbox alignment properties</title>
    <link href="https://devtoolstips.org/tips/en/tweak-grid-flex-alignment/"/>
    <updated>2021-06-15T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/tweak-grid-flex-alignment/</id>
    <content type="html">&lt;p&gt;Chrome and Edge both have a visual editor useful for tweaking flexbox and grid alignment properties.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Head over to the Elements panel&lt;/li&gt;
&lt;li&gt;Select an element that is either a grid or flexbox container&lt;/li&gt;
&lt;li&gt;In the Styles sidebar pane, find the &lt;code&gt;display: grid&lt;/code&gt; or &lt;code&gt;display:flex&lt;/code&gt; declaration&lt;/li&gt;
&lt;li&gt;Click the little icon next to this declaration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/tweak-grid-flex-alignment.png&quot; alt=&quot;The grid editor in the Styles pane of Microsoft Edge.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>See quick accessibility information on hover</title>
    <link href="https://devtoolstips.org/tips/en/see-quick-a11y-info-on-hover/"/>
    <updated>2021-06-15T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/see-quick-a11y-info-on-hover/</id>
    <content type="html">&lt;p&gt;In Edge, Polypane and Chrome, whenever you use the element selector and hover over elements in the page, a tooltip appears with, among other things, some accessibility information about the hovered element.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To start the element selector, click on the mouse cursor icon in the top-left corner of the DevTools window.&lt;/li&gt;
&lt;li&gt;Then simply hover over elements in the page&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/see-quick-a11y-info-on-hover.gif&quot; alt=&quot;Animation of the a11y tooltip in chrome.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Filter requests in the Network panel by status code, mime type and more</title>
    <link href="https://devtoolstips.org/tips/en/filter-network-requests/"/>
    <updated>2021-06-11T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/filter-network-requests/</id>
    <content type="html">&lt;p&gt;The Network panel lets you filter requests by status code, or mime type, and more.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click in the filter input field in the toolbar.&lt;/li&gt;
&lt;li&gt;Start typing &lt;code&gt;status-code&lt;/code&gt;, you should see an autocomplete popup letting you know of the possible accepted values. Use &lt;code&gt;status-code:404&lt;/code&gt; to find all requests that ended up in a 404 error.&lt;/li&gt;
&lt;li&gt;Other possible filters include &lt;code&gt;mime-type&lt;/code&gt;, &lt;code&gt;domain&lt;/code&gt;, &lt;code&gt;larger-than&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, and more.&lt;/li&gt;
&lt;li&gt;You can also negate the search by putting a &lt;code&gt;-&lt;/code&gt; in front (e.g. &lt;code&gt;-status-code:404&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/filter-network-requests.png&quot; alt=&quot;The Network panel in Edge showing the filter input field.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>View performance markers in order</title>
    <link href="https://devtoolstips.org/tips/en/view-perf-markers-in-order/"/>
    <updated>2021-06-10T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/view-perf-markers-in-order/</id>
    <content type="html">&lt;p&gt;When logging &lt;code&gt;performance.timing&lt;/code&gt; events to the console, they appear in alphabetical order since they are properties of the &lt;code&gt;PerformanceTiming&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;In order to view them in order, you can use &lt;code&gt;console.table(performance.timing)&lt;/code&gt; and click on the column heading to sort them by time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/view-perf-markers-in-order.png&quot; alt=&quot;The console in Edge showing the PerformanceTiming object, with alphabetical properties, and then using console.table to sort properties.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Unminify JavaScript code to easily read and debug it</title>
    <link href="https://devtoolstips.org/tips/en/unminify-javascript-code/"/>
    <updated>2021-06-08T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/unminify-javascript-code/</id>
    <content type="html">&lt;p&gt;Sometimes, the JavaScript code that runs on a website is minified and really hard to read. This is common in production.&lt;/p&gt;
&lt;p&gt;You can unminify code in DevTools to read it more easily, and also set breakpoints.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open a file in the Sources or Debugger panel&lt;/li&gt;
&lt;li&gt;Click on the &lt;code&gt;{}&lt;/code&gt; icon at the bottom of the source code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/unminify-javascript-code.gif&quot; alt=&quot;The Sources panel in Chrome, showing the pretty-print button.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Highlight all the elements that a CSS rule matches</title>
    <link href="https://devtoolstips.org/tips/en/highlight-matching-elements/"/>
    <updated>2021-06-08T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/highlight-matching-elements/</id>
    <content type="html">&lt;p&gt;When you want to know which elements a given CSS rule will apply to, in addition to the currently selected element, you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Firefox:
&lt;ul&gt;
&lt;li&gt;In the Style Editor panel: hover over any rule selector for some time.&lt;/li&gt;
&lt;li&gt;In the Rules panel: click on the selector icon next to any rule selector.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Chrome, Edge or Safari:
&lt;ul&gt;
&lt;li&gt;In the Styles panel: hover over any rule selector for some time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Polypane:
&lt;ul&gt;
&lt;li&gt;In the Elements panel: Click the &lt;code&gt;[+]&lt;/code&gt; icon next to each selector.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/highlight-matching-elements.gif&quot; alt=&quot;Animation showing how hovering over selectors in chrome highlights the matching elements in the page.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Expand DOM nodes recursively</title>
    <link href="https://devtoolstips.org/tips/en/expand-nodes-recursively/"/>
    <updated>2021-06-08T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/expand-nodes-recursively/</id>
    <content type="html">&lt;p&gt;You can expand all descendants under a given DOM node in one go, to avoid having to expand each node one by one, which may take a while.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Chrome and Edge
&lt;ul&gt;
&lt;li&gt;Right-click on the node you want to expand and select &amp;quot;Expand recursively&amp;quot;. You can also &lt;code&gt;alt+click&lt;/code&gt; or &lt;code&gt;option+click&lt;/code&gt; on the arrow next to the node.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Firefox and Safari
&lt;ul&gt;
&lt;li&gt;Right-click on the node you want to expand and select &amp;quot;Expand All&amp;quot;. You can also &lt;code&gt;alt+click&lt;/code&gt; or &lt;code&gt;option+click&lt;/code&gt; on the arrow next to the node.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/expand-nodes-recursively.gif&quot; alt=&quot;Animation showing right-clicking on a node in Chrome&#39;s Elements panel and choosing &amp;quot;expand recursively&amp;quot;.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Edit CSS filters</title>
    <link href="https://devtoolstips.org/tips/en/edit-css-filters/"/>
    <updated>2021-06-08T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/edit-css-filters/</id>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt; property in CSS lets you change the way a particular element gets rendered.&lt;/p&gt;
&lt;p&gt;Firefox provides a visual editor to play with CSS filters. You can add or remove filter functions from the list, re-order them, edit individual functions and even create presets that you can reuse later.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the Rules panel, find an existing &lt;code&gt;filter&lt;/code&gt; property, or add a new one.&lt;/li&gt;
&lt;li&gt;Click on the filter swatch icon next to the filter value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Tools/Page_Inspector/How_to/Edit_CSS_filters&quot;&gt;Learn more on MDN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-css-filters.png&quot; alt=&quot;The filter editing UI in Firefox.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Use the debugger statement to pause script execution</title>
    <link href="https://devtoolstips.org/tips/en/debugger-statement/"/>
    <updated>2021-06-08T00:00:00.000Z</updated>
    <id>https://devtoolstips.org/tips/en/debugger-statement/</id>
    <content type="html">&lt;p&gt;If you prefer to use &lt;code&gt;console.log()&lt;/code&gt; statements rather than the JavaScript debugger because you find it difficult to set breakpoints in DevTools (or you can&#39;t), then you can use the &lt;code&gt;debugger&lt;/code&gt; statement in JavaScript.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Where you normally add a &lt;code&gt;console.log()&lt;/code&gt;, add a &lt;code&gt;debugger&lt;/code&gt;, directly in the code&lt;/li&gt;
&lt;li&gt;Open DevTools on your page&lt;/li&gt;
&lt;li&gt;Trigger the action that will make your code run&lt;/li&gt;
&lt;li&gt;The Sources panel (or Debugger panel in Firefox) will automatically open up, and pause script execution at that line, giving you a chance to see what are the values of local variables, the callstack, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/debugger-statement.png&quot; alt=&quot;The Sources panel in Edge, paused at a debugger statement.&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
