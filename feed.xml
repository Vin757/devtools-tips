<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DevTools Tips</title>
  <subtitle>A collection of useful, cross-browser, tips and tricks to get more comfortable with using DevTools.</subtitle>
  <link href="https://devtoolstips.org/feed.xml" rel="self"/>
  <link href="https://devtoolstips.org/"/>
  <id>https://devtoolstips.org/</id>
  <updated>2022-01-17T12:57:50.000Z</updated>
  <author>
    <name>Patrick Brosset</name>
    <email>patrickbrosset@gmail.com</email>
  </author>
  
  <entry>
    <title>Automatically logging name and value in console.log()</title>
    <link href="https://devtoolstips.org/tips/en/automatically-log-name-and-value/"/>
    <updated>2021-11-17T12:54:55Z</updated>
    <id>https://devtoolstips.org/tips/en/automatically-log-name-and-value/</id>
    <content type="html">&lt;p&gt;Using the &lt;strong&gt;&lt;a href=&quot;https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/&quot;&gt;console&lt;/a&gt;&lt;/strong&gt; of DevTools you can to log some information to debug your JavaScript.&lt;/p&gt;
&lt;p&gt;The common way to do that is to add a &lt;code&gt;console.log()&lt;/code&gt; statement where you want to learn the value of a certain variable. In the following example the mouse position and how far the document has scrolled.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pageX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pageY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; top &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;documentElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollTop&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;top&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem is that this results in lots of numbers in the console without explanations about what they are. If you wrap the values you want to read out in curly brackets &lt;code&gt;{}&lt;/code&gt;, the console automatically displays both the name and the value of the variable.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pageX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pageY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; top &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;documentElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollTop&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;top&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/automatically-log-name-and-value.gif&quot; alt=&quot;Screencast showing the different ways the variables are logged with and without curly braces&quot; /&gt;&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=xTnqsA5vZX4&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Block resources to test your site without CSS or JavaScript</title>
    <link href="https://devtoolstips.org/tips/en/block-resources/"/>
    <updated>2021-08-19T12:11:20Z</updated>
    <id>https://devtoolstips.org/tips/en/block-resources/</id>
    <content type="html">&lt;p&gt;The various resources loaded by your site aren&#39;t always guaranteed to reach your users when they visit your site. Network problems can occur, JavaScript may be disabled, a CDN may be down, or the browser can decide to block a resource.&lt;/p&gt;
&lt;p&gt;It&#39;s useful to test how your site looks when this occurs. It may also be useful to compare the performance of your site with and without certain resources.&lt;/p&gt;
&lt;p&gt;With DevTools you can block individual URLs or more global patterns.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With Chrome or Edge:
&lt;ul&gt;
&lt;li&gt;Go to the &lt;strong&gt;Network&lt;/strong&gt; panel&lt;/li&gt;
&lt;li&gt;Right-click on the request you want to block and select &lt;strong&gt;Block request URL&lt;/strong&gt; (you can also select &lt;strong&gt;Block request domain&lt;/strong&gt; to block all resources from the same domain)&lt;/li&gt;
&lt;li&gt;Reload the page&lt;/li&gt;
&lt;li&gt;You can also use the &lt;strong&gt;Network request blocking&lt;/strong&gt; panel (which opens automatically when you block a request) to add, edit and remove URLs or URL patterns&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/block-resources-1.png&quot; alt=&quot;Screenshot of the Network panel in Edge showing the contextual menu with the &amp;quot;block request url&amp;quot; item&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With Firefox:
&lt;ul&gt;
&lt;li&gt;Go to the &lt;strong&gt;Network&lt;/strong&gt; panel&lt;/li&gt;
&lt;li&gt;Right-click on the request you want to block and select &lt;strong&gt;Block URL&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Reload the page&lt;/li&gt;
&lt;li&gt;You can also use the &lt;strong&gt;Blocking&lt;/strong&gt; sidebar (which opens automatically when you block a request) to add, edit and remove URLs or URL patterns&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/block-resources-2.png&quot; alt=&quot;Screenshot of the Network panel in Firefox showing the contextual menu with the &amp;quot;block url&amp;quot; item and the &amp;quot;blocking&amp;quot; sidebar&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Pause script execution when the DOM changes</title>
    <link href="https://devtoolstips.org/tips/en/break-on-dom-changes/"/>
    <updated>2021-09-22T07:45:23Z</updated>
    <id>https://devtoolstips.org/tips/en/break-on-dom-changes/</id>
    <content type="html">&lt;p&gt;If you want to know what JavaScript code removes, adds, or modifies a DOM element in the page, you can use DOM breakpoints in DevTools. You can choose to break on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Subtree modification: this pauses execution when any element in the subtree of the selected element is modified (added, removed, or changed attribute).&lt;/li&gt;
&lt;li&gt;Attribute modification: this pauses execution when an attribute of the selected element is modified.&lt;/li&gt;
&lt;li&gt;Node removal: this pauses execution when the selected node is removed from the DOM tree.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is useful if you don&#39;t know the codebase you are debugging for example.&lt;/p&gt;
&lt;p&gt;To add a DOM breakpoint:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to the &lt;strong&gt;Inspector/Elements&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Find the node which you want to add the breakpoint on.&lt;/li&gt;
&lt;li&gt;Open the contextual menu (right-click).&lt;/li&gt;
&lt;li&gt;Open the &lt;strong&gt;Break on&lt;/strong&gt; sub menu and choose the type of breakpoint you want to set.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/break-on-dom-changes.png&quot; alt=&quot;Screenshot of the Elements panel in Edge showing the &amp;quot;Break on&amp;quot; contextual menu on the selected node&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Once the requested DOM modification occurs, the JavaScript execution will pause and DevTools will navigate to the Sources/Debugger panel, showing the right line of code where execution is paused.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Capture node creation stack traces</title>
    <link href="https://devtoolstips.org/tips/en/capture-node-creation-stacks/"/>
    <updated>2021-07-27T07:28:08Z</updated>
    <id>https://devtoolstips.org/tips/en/capture-node-creation-stacks/</id>
    <content type="html">&lt;p&gt;Have you ever wanted to know what caused a specific DOM node or element to be created in the page?
When working on a site that uses a lot of JavaScript and especially when you don&#39;t know the codebase, this can be a life saver.&lt;/p&gt;
&lt;p&gt;It turns out there is a way to do this automatically without having to set breakpoints in the code at all. It is a hidden experiment for now so you will need to first enable it in Chrome or Edge.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Go through the following steps once to enable the experiment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the DevTools settings (press F1, or use the gear icon in the toolbar)&lt;/li&gt;
&lt;li&gt;Go to the &lt;strong&gt;Experiments&lt;/strong&gt; tab&lt;/li&gt;
&lt;li&gt;Check the &lt;strong&gt;Capture node creation stacks&lt;/strong&gt; box&lt;/li&gt;
&lt;li&gt;Reload DevTools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure DevTools is opened when using the website so that stack traces get captured. When you want to know what created a node:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the node in the Elements panel&lt;/li&gt;
&lt;li&gt;In the sidebar, select the &lt;strong&gt;Stack Trace&lt;/strong&gt; panel (you might have to first click on the &lt;strong&gt;More tabs&lt;/strong&gt; chevron &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; to see the tab)&lt;/li&gt;
&lt;li&gt;The stack of JavaScript calls that led to the node creation (if any) should be displayed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/capture-node-creation-stacks.png&quot; alt=&quot;Screenshot of Edge DevTools&#39; Elements panel with the Stack Trace sidebar visible, showing a stack of Vue JS function calls that created an element on the TODOMVC sample app&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Change the color theme of DevTools</title>
    <link href="https://devtoolstips.org/tips/en/change-color-theme/"/>
    <updated>2021-09-20T07:11:21Z</updated>
    <id>https://devtoolstips.org/tips/en/change-color-theme/</id>
    <content type="html">&lt;p&gt;Chrome, Firefox and Safari all have a light and dark theme for their DevTools. Edge not only has those 2 themes, but also about 10 VS Code themes (like Monokai, Solarized Dark, etc.).&lt;/p&gt;
&lt;p&gt;You can change the theme based on your preference.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Firefox
&lt;ul&gt;
&lt;li&gt;Go to the settings (press F1) and select &amp;quot;dark&amp;quot; or light&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Chrome or Edge
&lt;ul&gt;
&lt;li&gt;Also go to settings (press F1) and select &amp;quot;light&amp;quot; or &amp;quot;dark&amp;quot; in the Themes drop-down, or any of the VS Code themes in Edge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Safari
&lt;ul&gt;
&lt;li&gt;Go to the settings and select &amp;quot;Appearance&amp;quot; between &amp;quot;System&amp;quot;, &amp;quot;Light&amp;quot; or &amp;quot;Dark&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/change-color-theme.png&quot; alt=&quot;Screenshot of the settings panel in Edge showing the Theme drop-down&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Convert color formats</title>
    <link href="https://devtoolstips.org/tips/en/convert-color-formats/"/>
    <updated>2021-09-20T07:23:12Z</updated>
    <id>https://devtoolstips.org/tips/en/convert-color-formats/</id>
    <content type="html">&lt;p&gt;Colors in CSS can be expressed in a number of different formats: keyword (e.g. &lt;code&gt;blue&lt;/code&gt;), RGB, HSL, hexadecimal, and others.&lt;/p&gt;
&lt;p&gt;In DevTools, you can easily convert from one format to the next.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find an element in the &lt;strong&gt;Elements&lt;/strong&gt; panel (or &lt;strong&gt;Inspector&lt;/strong&gt; panel in Firefox) that has some CSS color properties applied.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Styles&lt;/strong&gt; panel (or &lt;strong&gt;Rules&lt;/strong&gt; in Firefox), hold &lt;strong&gt;Shift&lt;/strong&gt; and click on the color swatch (the little colored circle next to the color value) to cycle through the different formats.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/convert-color-formats.gif&quot; alt=&quot;Gif animation of the rules panel in Firefox, showing the color conversion&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Convert font property units</title>
    <link href="https://devtoolstips.org/tips/en/convert-font-units/"/>
    <updated>2021-07-12T13:27:30Z</updated>
    <id>https://devtoolstips.org/tips/en/convert-font-units/</id>
    <content type="html">&lt;p&gt;Font CSS properties such as &lt;code&gt;font-size&lt;/code&gt;, &lt;code&gt;line-height&lt;/code&gt; or &lt;code&gt;letter-spacing&lt;/code&gt; can be expressed in multiple different length units (like many other CSS properties).&lt;/p&gt;
&lt;p&gt;Firefox, Chrome and Edge allow you to convert values between these units easily.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Firefox
&lt;ul&gt;
&lt;li&gt;Find an element in the Inspector panel that has font properties which you&#39;d like to change&lt;/li&gt;
&lt;li&gt;Select the Fonts sidebar tab&lt;/li&gt;
&lt;li&gt;Use the unit drop-downs next to &lt;code&gt;Size&lt;/code&gt;, &lt;code&gt;Line Height&lt;/code&gt; or &lt;code&gt;Spacing&lt;/code&gt; to convert the current value to another unit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/convert-font-units-1.png&quot; alt=&quot;Screenshot of the fonts panel in Firefox, showing the unit conversion drop-down&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Chrome or Edge
&lt;ul&gt;
&lt;li&gt;You first need to enable the Fonts editor experiment
&lt;ul&gt;
&lt;li&gt;Go to the DevTools settings (F1)&lt;/li&gt;
&lt;li&gt;Go to the Experiments tab&lt;/li&gt;
&lt;li&gt;Check the &amp;quot;Enable the new Font Editor tool within the Styles pane&amp;quot; box&lt;/li&gt;
&lt;li&gt;Re-start DevTools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Find an element in the Elements panel that has font properties which you&#39;d like to change&lt;/li&gt;
&lt;li&gt;Click on the &lt;code&gt;Aa&lt;/code&gt; icon in the Styles sidebar, in the CSS rule that contains the property you want to convert&lt;/li&gt;
&lt;li&gt;Use the unit drop-downs next to &lt;code&gt;Font Size&lt;/code&gt;, &lt;code&gt;Line Height&lt;/code&gt;, &lt;code&gt;Font Weight&lt;/code&gt; or &lt;code&gt;Spacing&lt;/code&gt; to convert the current value to another unit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/convert-font-units-2.png&quot; alt=&quot;Screenshot of the fonts panel in Edge, showing the unit conversion drop-down&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Copy an element&#39;s XPath expression</title>
    <link href="https://devtoolstips.org/tips/en/copy-element-xpath/"/>
    <updated>2021-07-13T09:24:10Z</updated>
    <id>https://devtoolstips.org/tips/en/copy-element-xpath/</id>
    <content type="html">&lt;p&gt;You can easily copy an element&#39;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/XPath&quot;&gt;XPath&lt;/a&gt; expression from DevTools. This is useful if you need this expression for an automated test for example.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the Elements (or Inspector) panel&lt;/li&gt;
&lt;li&gt;Use the context-menu (right-click) on the element you care about&lt;/li&gt;
&lt;li&gt;Go into the Copy sub-menu&lt;/li&gt;
&lt;li&gt;Choose the Xpath option&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that you can then use this xpath expression to &lt;a href=&quot;https://devtoolstips.org/tips/en/evaluate-xpath/&quot;&gt;find elements again in DevTools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/copy-element-xpath.png&quot; alt=&quot;Screenshot of the Elements panel in Edge showing the copy xpath option in the contextual menu&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Copy an object from the console</title>
    <link href="https://devtoolstips.org/tips/en/copy-from-console/"/>
    <updated>2021-06-21T15:25:47Z</updated>
    <id>https://devtoolstips.org/tips/en/copy-from-console/</id>
    <content type="html">&lt;p&gt;The console panel supports a very handy &lt;code&gt;copy()&lt;/code&gt; function that stringifies and copies anything you pass to it as an argument, so you can then paste it somewhere else.&lt;/p&gt;
&lt;p&gt;For example: &lt;code&gt;copy($$(&#39;a&#39;).map(a =&amp;gt; a.href).join(&#39;\n&#39;))&lt;/code&gt; copies all of the links from the page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/copy-from-console.png&quot; alt=&quot;Screenshot of Chrome devtools&#39; console with a line of code using the copy() function&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Copy a CSS rule as CSS-in-JS format</title>
    <link href="https://devtoolstips.org/tips/en/copy-rule-as-css-in-js/"/>
    <updated>2021-11-30T08:38:28Z</updated>
    <id>https://devtoolstips.org/tips/en/copy-rule-as-css-in-js/</id>
    <content type="html">&lt;p&gt;Do you use a CSS-in-JS framework? If so, you know how frustrating it can be to copy CSS from DevTools and paste it into your code.&lt;/p&gt;
&lt;p&gt;Indeed if the CSS you worked on in the &lt;strong&gt;Styles&lt;/strong&gt; panel looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; hotpink&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;letter-spacing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; .5rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 2rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 3rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;your CSS-in-JS framework probably expect it this way instead:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  background&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;hotpink&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  letterSpacing&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.5rem&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  margin&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2rem&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  fontSize&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3rem&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although the 2 are relatively similar, it&#39;s frustrating having to change semi-columns to commas, adding quotes, and swapping hyphen-separated property names with their camelCase equivalents.&lt;/p&gt;
&lt;p&gt;In Edge and Chrome, you don&#39;t have to. They both have an option that does the re-formatting for you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Right-click on any rule in the &lt;strong&gt;Styles&lt;/strong&gt; pane.&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Copy all declarations as JS&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that you can also use &lt;strong&gt;Copy declaration as JS&lt;/strong&gt; if you only want one. But this feature really shines when you copy all declarations at once.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/copy-rule-as-css-in-js.gif&quot; alt=&quot;GIF showing the Styles pane in Edge, with the &amp;quot;Copy all declarations as JS&amp;quot; option being used, and then pasting the result in the Console to show that it is formatted&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Find out more about this feature on &lt;a href=&quot;https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/css/css-in-js&quot;&gt;the Microsoft DevTools docs website&lt;/a&gt;, or take a look at this short screencast:&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=DCWSV0J5C8A&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Debug popups that appear on hover using JS</title>
    <link href="https://devtoolstips.org/tips/en/debug-js-hover/"/>
    <updated>2021-10-20T13:36:36Z</updated>
    <id>https://devtoolstips.org/tips/en/debug-js-hover/</id>
    <content type="html">&lt;p&gt;Have you ever been frustrated because you couldn&#39;t style a popup or tooltip that appeared on hover? If it uses JavaScript to get displayed, it&#39;s hard to style without modifying the code to make it stay visible.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Switch the &lt;strong&gt;Sources&lt;/strong&gt;/&lt;strong&gt;Debugger&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Then hover the element in the page so the popup appears, and leave the mouse there.&lt;/li&gt;
&lt;li&gt;Now press &lt;code&gt;F8&lt;/code&gt; to pause the debugger.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&#39;s it! The JS engine will pause and freeze the state of the page. You can now switch back to &lt;strong&gt;Elements&lt;/strong&gt;/&lt;strong&gt;Inspector&lt;/strong&gt; and style the popup content!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/debug-js-hover.gif&quot; alt=&quot;GIF showing how to pause the debugger with F8 while a tooltip is visible to then style it in the Inspector panel of Firefox&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Thank you to &lt;a href=&quot;https://twitter.com/samselikoff&quot;&gt;Sam Selikoff&lt;/a&gt; for &lt;a href=&quot;https://twitter.com/samselikoff/status/1441142046492807176&quot;&gt;tweeting&lt;/a&gt; about this tip and making a youtube video about it too:&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=aNZ9ci_1gtM&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Use the debugger statement to pause script execution</title>
    <link href="https://devtoolstips.org/tips/en/debugger-statement/"/>
    <updated>2021-06-08T17:24:41Z</updated>
    <id>https://devtoolstips.org/tips/en/debugger-statement/</id>
    <content type="html">&lt;p&gt;If you prefer to use &lt;code&gt;console.log()&lt;/code&gt; statements rather than the JavaScript debugger because you find it difficult to set breakpoints in DevTools (or you can&#39;t), then you can use the &lt;code&gt;debugger&lt;/code&gt; statement in JavaScript.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Where you normally add a &lt;code&gt;console.log()&lt;/code&gt;, add a &lt;code&gt;debugger&lt;/code&gt;, directly in the code&lt;/li&gt;
&lt;li&gt;Open DevTools on your page&lt;/li&gt;
&lt;li&gt;Trigger the action that will make your code run&lt;/li&gt;
&lt;li&gt;The Sources panel (or Debugger panel in Firefox) will automatically open up, and pause script execution at that line, giving you a chance to see what are the values of local variables, the callstack, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/debugger-statement.png&quot; alt=&quot;Screenshot of the Sources panel in Edge, paused at a debugger statement&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Download all images from the page</title>
    <link href="https://devtoolstips.org/tips/en/download-all-images/"/>
    <updated>2021-12-16T14:08:30Z</updated>
    <id>https://devtoolstips.org/tips/en/download-all-images/</id>
    <content type="html">&lt;p&gt;If you want to download all of the images on a webpage in one go, you can use the following few lines of JavaScript code to do it:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;img&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Fetch the image as a blob.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fetchResponse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; blob &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; fetchResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mimeType &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; blob&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Figure out a name for it from the src and the mime-type.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; src&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lastIndexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; src&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; start&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; src&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[^a-zA-Z0-9]+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    name &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; mimeType&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mimeType&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lastIndexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Download the blob using a &amp;lt;a&gt; element.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;href&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createObjectURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;blob&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;download&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will list all of the &lt;code&gt;img&lt;/code&gt; elements on the page, then attempt to fetch them from the server (which might fail for some, depending on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&quot;&gt;CSP&lt;/a&gt; on the page), and then trigger the download of each one of them by the browser, using a &lt;code&gt;&amp;lt;a download&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;If you want to reuse this script often, you can store it in your &lt;strong&gt;Snippets&lt;/strong&gt; on Chrome or Edge (learn how to do it &lt;a href=&quot;https://devtoolstips.org/tips/en/multi-line-console&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/download-all-images.png&quot; alt=&quot;Screenshot of the Snippets panel in Edge, with the JS code from above, and the download panel open showing all images have been downloaded&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Drag and drop nodes in the DOM tree</title>
    <link href="https://devtoolstips.org/tips/en/drag-drop-dom-nodes/"/>
    <updated>2021-07-01T16:10:35Z</updated>
    <id>https://devtoolstips.org/tips/en/drag-drop-dom-nodes/</id>
    <content type="html">&lt;p&gt;If you need to move nodes or elements around in the DOM tree, to re-order things in the page, you can do it by drag and dropping nodes around in the Elements (or Inspector) panel.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/drag-drop-dom-nodes.gif&quot; alt=&quot;Gif animation showing a node being dragged by the mouse in the DOM tree view of the Elements panel in Edge&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Edit and resend faulty network requests to debug them</title>
    <link href="https://devtoolstips.org/tips/en/edit-and-resend-network-requests/"/>
    <updated>2021-12-15T09:45:40Z</updated>
    <id>https://devtoolstips.org/tips/en/edit-and-resend-network-requests/</id>
    <content type="html">&lt;p&gt;When you&#39;re investigating a bug where the backend you connect to doesn&#39;t respond with the right things it&#39;s useful to tweak the requests and try again quickly. You can do this by changing your frontend code, and reloading the page, but DevTools can help you be faster by editing and resending those requests without making any frontend code changes. Here&#39;s how!&lt;/p&gt;
&lt;h3&gt;Using cURL&lt;/h3&gt;
&lt;p&gt;You can copy any request from the &lt;strong&gt;Network&lt;/strong&gt; panel as a cURL command, then paste it in your terminal, edit it to your liking, and execute it!&lt;/p&gt;
&lt;p&gt;This works in Firefox, Edge, and Chrome.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find the request you want to test in the &lt;strong&gt;Network&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Right-click it and select &lt;strong&gt;Copy&lt;/strong&gt; &amp;gt; &lt;strong&gt;Copy as cURL&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-and-resend-network-requests-curl.png&quot; alt=&quot;Screenshot of Chrome&#39;s copy as cURL feature and the corresponding command in the terminal&quot; /&gt;&lt;/p&gt;
&lt;p&gt;A similar approach is to use the &lt;strong&gt;Copy as Fetch&lt;/strong&gt; option, and then use the copied code from the &lt;strong&gt;Console&lt;/strong&gt; panel.&lt;/p&gt;
&lt;h3&gt;Using Firefox&#39;s Edit and Resend feature&lt;/h3&gt;
&lt;p&gt;Firefox has a built-in &lt;strong&gt;Edit and Resend&lt;/strong&gt; feature that&#39;s very convenient because it doesn&#39;t require to switch to the terminal.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find the request you want to test in the &lt;strong&gt;Network&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Right-click it and select &lt;strong&gt;Edit and Resend&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the new panel that appears, you can edit the request&#39;s method, url, query string, headers, and body.&lt;/li&gt;
&lt;li&gt;Press &lt;strong&gt;Send&lt;/strong&gt; when you&#39;re happy with the values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-and-resend-network-requests-firefox.png&quot; alt=&quot;Screenshot of the Firefox&#39;s edit and resend feature&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Using Edge&#39;s Network Console experiment&lt;/h3&gt;
&lt;p&gt;Edge has a built-in feature very similar to Firefox&#39;s &lt;strong&gt;Edit and Resend&lt;/strong&gt;, but that goes further in that it allows you to create any number of requests to test over time, like &lt;a href=&quot;https://www.postman.com/&quot;&gt;Postman&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The feature is called &lt;strong&gt;Network Console&lt;/strong&gt; and is an experiment for the time being, so use with caution.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the &lt;strong&gt;Settings&lt;/strong&gt; (&lt;kbd&gt;F1&lt;/kbd&gt;), then &lt;strong&gt;Experiments&lt;/strong&gt;, and check the &lt;strong&gt;Enable Network Console&lt;/strong&gt; option (make sure to restart DevTools after that).&lt;/li&gt;
&lt;li&gt;You can then access the &lt;strong&gt;Network Console&lt;/strong&gt; like any other panel, but the easiest way to get started is by going to the &lt;strong&gt;Network&lt;/strong&gt; panel and finding the request you want to test.&lt;/li&gt;
&lt;li&gt;Right-click it and select &lt;strong&gt;Edit and Resend&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the new panel that appears, you can edit the method, url, query string, headers, body, etc.&lt;/li&gt;
&lt;li&gt;Press &lt;strong&gt;Send&lt;/strong&gt; when you&#39;re happy with the values.&lt;/li&gt;
&lt;li&gt;You can also save this request for later. You can find all saved requests in the &lt;strong&gt;Network Console&lt;/strong&gt; panel.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-and-resend-network-requests-edge.png&quot; alt=&quot;Screenshot of the Edge&#39;s Network Console feature&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Edit clip-path and shape-outside CSS properties by dragging points in the page</title>
    <link href="https://devtoolstips.org/tips/en/edit-clip-path-shape-outside/"/>
    <updated>2021-06-21T08:45:15Z</updated>
    <id>https://devtoolstips.org/tips/en/edit-clip-path-shape-outside/</id>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/clip-path&quot;&gt;&lt;code&gt;clip-path&lt;/code&gt; property&lt;/a&gt; is a great way to change the final shape of an element and give it the shape that you want.&lt;br /&gt;
You can use this property to make an element be a circle, an ellipse, a polygon or any shape that can be described with an &lt;a href=&quot;https://developer.mozilla.org/docs/Web/SVG/Tutorial/Paths&quot;&gt;SVG path&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/shape-outside&quot;&gt;&lt;code&gt;shape-outside&lt;/code&gt; property&lt;/a&gt; is similar in that you can define a shape, but it&#39;s useful to float other content around an element, along that shape.&lt;/p&gt;
&lt;p&gt;In Firefox, you can freely edit the polygon, circle or ellipse types of shapes with the mouse, by dragging points around in the page.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select an element that has a &lt;code&gt;clip-path&lt;/code&gt; or &lt;code&gt;shape-outside&lt;/code&gt; property applied.&lt;/li&gt;
&lt;li&gt;In the Rules sidebar (in the Inspector panel), the &lt;code&gt;clip-path&lt;/code&gt; property will have a little shape icon. Click on this icon.&lt;/li&gt;
&lt;li&gt;The shape now gets highlighted in the page, with control points.&lt;/li&gt;
&lt;li&gt;Click-and-drag any of these points to change the shape to your likings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Edit_CSS_shapes&quot;&gt;Learn more about this tool here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-clip-path-shape-outside.gif&quot; alt=&quot;Gif demo of the shape editor in firefox, clicking on the Rules panel icon, and then moving points around in the page&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Edit CSS angles</title>
    <link href="https://devtoolstips.org/tips/en/edit-css-angles/"/>
    <updated>2021-06-22T13:18:20Z</updated>
    <id>https://devtoolstips.org/tips/en/edit-css-angles/</id>
    <content type="html">&lt;p&gt;In CSS, several different properties use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/angle&quot;&gt;angle&lt;/a&gt; unit values, such as the &lt;code&gt;rotate()&lt;/code&gt; function of a &lt;code&gt;transform&lt;/code&gt; or the &lt;code&gt;linear-gradient&lt;/code&gt; orientation of a &lt;code&gt;background-image&lt;/code&gt;, and more.&lt;/p&gt;
&lt;p&gt;In Chrome and Edge, wherever a value that uses an angle unit (e.g. &lt;code&gt;deg&lt;/code&gt;, &lt;code&gt;rad&lt;/code&gt;, &lt;code&gt;grad&lt;/code&gt;, &lt;code&gt;turn&lt;/code&gt;) is displayed in the Styles panel, you can edit it with a nice little visual editor instead of typing the number by hand.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-css-angles.gif&quot; alt=&quot;Gif animation of the angle editor in Chrome, where a click is made on the angle swatch, and then the mouse is used to change the angle&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Edit CSS filters</title>
    <link href="https://devtoolstips.org/tips/en/edit-css-filters/"/>
    <updated>2021-06-08T20:48:13Z</updated>
    <id>https://devtoolstips.org/tips/en/edit-css-filters/</id>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt; property in CSS lets you change the way a particular element gets rendered.&lt;/p&gt;
&lt;p&gt;Firefox provides a visual editor to play with CSS filters. You can add or remove filter functions from the list, re-order them, edit individual functions and even create presets that you can reuse later.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the Rules panel, find an existing &lt;code&gt;filter&lt;/code&gt; property, or add a new one.&lt;/li&gt;
&lt;li&gt;Click on the filter swatch icon next to the filter value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Tools/Page_Inspector/How_to/Edit_CSS_filters&quot;&gt;Learn more on MDN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-css-filters.png&quot; alt=&quot;Screenshot of the filter editing UI in Firefox&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Edit CSS absolute and relative positions by dragging points in the page</title>
    <link href="https://devtoolstips.org/tips/en/edit-position/"/>
    <updated>2021-07-19T07:49:02Z</updated>
    <id>https://devtoolstips.org/tips/en/edit-position/</id>
    <content type="html">&lt;p&gt;Firefox features a position editor that lets you move elements in the page by drag and drop. This works with elements that are positioned in CSS with &lt;code&gt;position:relative&lt;/code&gt; or &lt;code&gt;position:absolute&lt;/code&gt; and that have at least one of &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; defined.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select an element with &lt;code&gt;position:relative&lt;/code&gt; or &lt;code&gt;position:absolute&lt;/code&gt; applied to it in the Inspector panel.&lt;/li&gt;
&lt;li&gt;Open the Layout sidebar panel, and scroll down to the Box Model section.&lt;/li&gt;
&lt;li&gt;Find the &amp;quot;Edit Position&amp;quot; icon and click it.&lt;/li&gt;
&lt;li&gt;Use the handles in the page to move the element around, within its positioned ancestor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Reposition_elements_in_the_page&quot;&gt;Learn more about this tool here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-position.gif&quot; alt=&quot;Gif demo of the geometry editor in firefox, toggling it from the Layout panel, and then dragging top and left points to move the element in the page&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Edit CSS shadow visually</title>
    <link href="https://devtoolstips.org/tips/en/edit-shadow/"/>
    <updated>2021-10-11T13:07:13Z</updated>
    <id>https://devtoolstips.org/tips/en/edit-shadow/</id>
    <content type="html">&lt;p&gt;If you don&#39;t remember the CSS syntax for the &lt;code&gt;box-shadow&lt;/code&gt; property (and who does!), then Chrome and Edge can help you with their visual shadow editor!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select an element that has some shadow applied.&lt;/li&gt;
&lt;li&gt;Go to the &lt;strong&gt;Styles&lt;/strong&gt; pane.&lt;/li&gt;
&lt;li&gt;Click on the little shadow editor icon next to the &lt;code&gt;box-shadow&lt;/code&gt; property value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/edit-shadow.gif&quot; alt=&quot;GIF animation showing the shadow editor in Edge&#39;s Styles pane&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Evaluate XPath to find elements in the page</title>
    <link href="https://devtoolstips.org/tips/en/evaluate-xpath/"/>
    <updated>2021-10-29T07:17:37Z</updated>
    <id>https://devtoolstips.org/tips/en/evaluate-xpath/</id>
    <content type="html">&lt;p&gt;DevTools supports 2 ways to evaluate &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/XPath&quot;&gt;XPath&lt;/a&gt; expressions to help you locate elements in the page. All browsers support those 2 ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From the Elements (or Inspector) panel:
&lt;ul&gt;
&lt;li&gt;Click anywhere in the panel to make sure it has focus&lt;/li&gt;
&lt;li&gt;Press &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;F&lt;/kbd&gt; (or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;F&lt;/kbd&gt; on Mac) to focus the search field&lt;/li&gt;
&lt;li&gt;Enter your XPath expression and press enter to find the elements that match&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/evaluate-xpath-1.png&quot; alt=&quot;Screenshot of the Inspector panel in Firefox showing the search field with an XPath expression&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Note that you can also &lt;a href=&quot;https://devtoolstips.org/tips/en/copy-element-xpath/&quot;&gt;copy the XPath expression from any element in DevTools&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From the Console panel:
&lt;ul&gt;
&lt;li&gt;You can use the built-in &lt;code&gt;$x()&lt;/code&gt; helper function like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;$x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;//div/div/label&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/evaluate-xpath-2.png&quot; alt=&quot;Screenshot of the Console panel in Safari showing an array of elements, as the result of executing the above function&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Use commands to do things faster</title>
    <link href="https://devtoolstips.org/tips/en/execute-commands/"/>
    <updated>2021-10-29T07:17:37Z</updated>
    <id>https://devtoolstips.org/tips/en/execute-commands/</id>
    <content type="html">&lt;p&gt;There is a command menu in Edge and Chrome that allows you to quickly access many different features of DevTools without having to navigate the UI.&lt;/p&gt;
&lt;p&gt;Press &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; (or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; on mac) to open the command menu, and just start typing.&lt;/p&gt;
&lt;p&gt;You can use this to, for example, switch to a different panel by typing its name, change the color theme, change settings, disable javascript, etc.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/execute-commands.png&quot; alt=&quot;Screenshot of Edge&#39;s command menu&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Expand DOM nodes recursively</title>
    <link href="https://devtoolstips.org/tips/en/expand-nodes-recursively/"/>
    <updated>2021-06-08T17:24:41Z</updated>
    <id>https://devtoolstips.org/tips/en/expand-nodes-recursively/</id>
    <content type="html">&lt;p&gt;You can expand all descendants under a given DOM node in one go, to avoid having to expand each node one by one, which may take a while.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Chrome and Edge
&lt;ul&gt;
&lt;li&gt;Right-click on the node you want to expand and select &amp;quot;Expand recursively&amp;quot;. You can also &lt;code&gt;alt+click&lt;/code&gt; or &lt;code&gt;option+click&lt;/code&gt; on the arrow next to the node.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Firefox and Safari
&lt;ul&gt;
&lt;li&gt;Right-click on the node you want to expand and select &amp;quot;Expand All&amp;quot;. You can also &lt;code&gt;alt+click&lt;/code&gt; or &lt;code&gt;option+click&lt;/code&gt; on the arrow next to the node.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/expand-nodes-recursively.gif&quot; alt=&quot;GIF animation showing right-clicking on a node in Chrome&#39;s Elements panel and choosing &amp;quot;expand recursively&amp;quot;&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Filter requests in the Network panel by status code, mime type and more</title>
    <link href="https://devtoolstips.org/tips/en/filter-network-requests/"/>
    <updated>2021-06-11T13:53:12Z</updated>
    <id>https://devtoolstips.org/tips/en/filter-network-requests/</id>
    <content type="html">&lt;p&gt;The Network panel lets you filter requests by status code, or mime type, and more.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click in the filter input field in the toolbar.&lt;/li&gt;
&lt;li&gt;Start typing &lt;code&gt;status-code&lt;/code&gt;, you should see an autocomplete popup letting you know of the possible accepted values. Use &lt;code&gt;status-code:404&lt;/code&gt; to find all requests that ended up in a 404 error.&lt;/li&gt;
&lt;li&gt;Other possible filters include &lt;code&gt;mime-type&lt;/code&gt;, &lt;code&gt;domain&lt;/code&gt;, &lt;code&gt;larger-than&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, and more.&lt;/li&gt;
&lt;li&gt;You can also negate the search by putting a &lt;code&gt;-&lt;/code&gt; in front (e.g. &lt;code&gt;-status-code:404&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/filter-network-requests.png&quot; alt=&quot;Screenshot of the Network panel in Edge showing the filter input field&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Find all images without alternative text</title>
    <link href="https://devtoolstips.org/tips/en/find-all-images-without-alt-text/"/>
    <updated>2021-06-28T13:22:41Z</updated>
    <id>https://devtoolstips.org/tips/en/find-all-images-without-alt-text/</id>
    <content type="html">&lt;p&gt;With HTML, you can add alternative text to images using the &lt;code&gt;alt&lt;/code&gt; attribute. It can be used to add a text description to images, which is extremely useful for accessibility as some people may not be able to see the images. With &lt;code&gt;alt&lt;/code&gt;, screen readers can announce the alternative text to the user.&lt;/p&gt;
&lt;p&gt;Using DevTools, you can quickly check which images on a page do not have an &lt;code&gt;alt&lt;/code&gt; text, here is how:&lt;/p&gt;
&lt;p&gt;Execute this in the Console panel: &lt;code&gt;console.table($$(&#39;img&#39;).filter(i =&amp;gt; !i.alt), [&#39;src&#39;])&lt;/code&gt; and that&#39;s it! You&#39;ll have the list of image URLs that don&#39;t have an alternative text.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/find-all-images-without-alt-text.png&quot; alt=&quot;The output of the console.table command from above shown in the Firefox DevTools console&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here&#39;s what this command does:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$$()&lt;/code&gt; find all elements that match a given CSS selector (&lt;a href=&quot;https://devtoolstips.org/tips/en/query-dom-from-console&quot;&gt;learn more here&lt;/a&gt;). Here it is used to find all images.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter()&lt;/code&gt; is used to only keep the images that do not have an &lt;code&gt;alt&lt;/code&gt; attribute.&lt;/li&gt;
&lt;li&gt;Finally, &lt;code&gt;console.table()&lt;/code&gt; takes the array returned by &lt;code&gt;filter&lt;/code&gt; and outputs a pretty table in the console based on it. Notice the second (optional) paramter that is used here to retrict the number of columns to just the &lt;code&gt;src&lt;/code&gt; attribute from each image.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Find and export CSS changes</title>
    <link href="https://devtoolstips.org/tips/en/find-css-changes/"/>
    <updated>2021-10-29T07:17:37Z</updated>
    <id>https://devtoolstips.org/tips/en/find-css-changes/</id>
    <content type="html">&lt;p&gt;If you spent time changing CSS in DevTools, either in the Rules panel (in Firefox), or in the Sources or Styles panels (in Chrome or Edge), and you don&#39;t remember all of the changes you made, you can find and extract them easily from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Firefox or Safari:
&lt;ul&gt;
&lt;li&gt;The Changes panel (in the Inspector), which allows you to copy all changes, or copy a given CSS rule&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Chrome or Edge:
&lt;ul&gt;
&lt;li&gt;The Changes panel (which you can open from the command menu by typing &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/find-css-changes.png&quot; alt=&quot;Screenshot of the Changes panel in Firefox showing a diff-like view of all the CSS changes&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Find your web component&#39;s custom element code</title>
    <link href="https://devtoolstips.org/tips/en/find-custom-elements-code/"/>
    <updated>2021-06-17T09:22:51Z</updated>
    <id>https://devtoolstips.org/tips/en/find-custom-elements-code/</id>
    <content type="html">&lt;p&gt;In Firefox, when inspecting elements (in the Inspector panel), you can click on the &lt;code&gt;custom&lt;/code&gt; badge to go straight to the custom element&#39;s JavaScript source code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/find-custom-elements-code.gif&quot; alt=&quot;Gif animation showing the custom button in Firefox&#39;s inspector and that clicking on it goes to the debugger&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Find DevTools reference documentation</title>
    <link href="https://devtoolstips.org/tips/en/find-devtools-documentation/"/>
    <updated>2021-07-02T08:46:07Z</updated>
    <id>https://devtoolstips.org/tips/en/find-devtools-documentation/</id>
    <content type="html">&lt;p&gt;If you want to learn more about what other tools exist in a browser, or what features a given tool provides, you can find reference documentation from all the major browsers here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools&quot;&gt;Firefox Developer Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/&quot;&gt;Edge Developer Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/docs/devtools/&quot;&gt;Chrome Developer Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webkit.org/web-inspector/&quot;&gt;Safari Web Inspector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/find-devtools-documentation.png&quot; alt=&quot;Screenshot of the 4 documentation websites listed above&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Find HTML parsing errors</title>
    <link href="https://devtoolstips.org/tips/en/find-html-parsing-errors/"/>
    <updated>2022-01-17T12:57:50Z</updated>
    <id>https://devtoolstips.org/tips/en/find-html-parsing-errors/</id>
    <content type="html">&lt;p&gt;DevTools is so full of features these days that we hardly ever use View-Source anymore. But it turns out that it has one trick up its sleeves that other tools don&#39;t, at least in Firefox.&lt;/p&gt;
&lt;p&gt;Indeed, in that browser, on top of showing the HTML source code of the page, it also highlights in red the HTML parsing errors!&lt;/p&gt;
&lt;p&gt;Consider the following HTML code:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    Lorem ipsum dolor sit...&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    Lorem ipsum dolor sit...&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    Lorem ipsum dolor sit&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;em&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;, ...&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Firefox&#39;s view-source makes it easy to find the stray &lt;code&gt;&amp;lt;/em&amp;gt;&lt;/code&gt; ending tag! You can also hover over it to reveal more information about the type of parsing error.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/find-html-parsing-errors.png&quot; alt=&quot;Screenshot of the View-Source page in Firefox, with a stray em closing tag highlighted in red, with a tooltip&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Find inactive CSS styles</title>
    <link href="https://devtoolstips.org/tips/en/find-inactive-styles/"/>
    <updated>2021-06-08T09:29:31Z</updated>
    <id>https://devtoolstips.org/tips/en/find-inactive-styles/</id>
    <content type="html">&lt;p&gt;Firefox has a unique feature that helps find CSS styles that don&#39;t have any effect on the page.&lt;/p&gt;
&lt;p&gt;This is not an audit tool that helps with removing useless CSS rules, but it is useful to know when a given CSS property isn&#39;t doing anything on the selected element.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select an element in the Inspector panel&lt;/li&gt;
&lt;li&gt;Look at the Rules sidebar panel&lt;/li&gt;
&lt;li&gt;If you see a property that is greyed out and has an information icon next to it, then that means it is currently inactive&lt;/li&gt;
&lt;li&gt;Hover over the information icon to know why the property is inactive&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/find-inactive-styles.webp&quot; alt=&quot;Screenshot of the inactive style feature&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Force PWA periodic background syncs</title>
    <link href="https://devtoolstips.org/tips/en/force-pwa-periodic-sync/"/>
    <updated>2021-09-10T07:23:51Z</updated>
    <id>https://devtoolstips.org/tips/en/force-pwa-periodic-sync/</id>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Periodic_Background_Synchronization_API&quot;&gt;periodic background sync API&lt;/a&gt;, available to PWAs is a great way to fetch new content while the user isn&#39;t on the site, and while they have access to the network, to make sure they have the latest content when they come back to the app.&lt;/p&gt;
&lt;p&gt;It can be hard to debug though, as the sync only happen after the minimum interval has passed, and the browser thinks that now is a good time to trigger the sync.&lt;/p&gt;
&lt;p&gt;Thankfully, there is a way in Chrome and Edge to force the sync, so you don&#39;t have to wait for the browser to do it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to the &lt;strong&gt;Application&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;Service Workers&lt;/strong&gt; tab.&lt;/li&gt;
&lt;li&gt;Scroll down to the &lt;strong&gt;Periodic Sync&lt;/strong&gt; input.&lt;/li&gt;
&lt;li&gt;Enter the tag name for your registered sync, and click the &lt;strong&gt;Periodic Sync&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/force-pwa-periodic-sync.png&quot; alt=&quot;Screenshot of the Application panel in Edge showing the periodic sync input and buttons&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Format console messages</title>
    <link href="https://devtoolstips.org/tips/en/format-console-messages/"/>
    <updated>2021-11-10T08:40:09Z</updated>
    <id>https://devtoolstips.org/tips/en/format-console-messages/</id>
    <content type="html">&lt;p&gt;You can use special formatters in the &lt;code&gt;console.log&lt;/code&gt; function to format logs just the way you want.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;%s&lt;/code&gt; to format a variable as a string.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;%d&lt;/code&gt; to format a variable as an integer.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;%f&lt;/code&gt; to format a variable as a float.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;%o&lt;/code&gt; to print a DOM element variable.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;%O&lt;/code&gt; to print an object variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a bonus, the &lt;code&gt;%c&lt;/code&gt; formatter can also be used to &lt;a href=&quot;https://devtoolstips.org/tips/en/style-console-messages&quot;&gt;style console messages with CSS properties&lt;/a&gt;!&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; el &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;%c There are %d elements in %O&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;color:lime;background:black;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;childElementCount&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/format-console-messages.png&quot; alt=&quot;Screenshot of a formatted console message in Edge&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Get contextual DevTools help</title>
    <link href="https://devtoolstips.org/tips/en/get-contextual-help/"/>
    <updated>2021-10-29T07:17:37Z</updated>
    <id>https://devtoolstips.org/tips/en/get-contextual-help/</id>
    <content type="html">&lt;p&gt;Edge has a feature called the &lt;strong&gt;DevTools Tooltips&lt;/strong&gt; that gives you help about the different tools right inside of DevTools.&lt;/p&gt;
&lt;p&gt;There are several ways to enable it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Press &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;H&lt;/kbd&gt; (or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;H&lt;/kbd&gt; on mac),&lt;/li&gt;
&lt;li&gt;or click on the three-dots menu icon, then Help, then Toggle the DevTools Tooltips,&lt;/li&gt;
&lt;li&gt;or using the command menu (&lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt;) and typing &amp;quot;tooltips&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When tooltips are enabled, you can hover over them to get documentation about the tools.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/get-contextual-help.gif&quot; alt=&quot;gif animation of the devtools tooltips in edge&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Get the selected element in the console</title>
    <link href="https://devtoolstips.org/tips/en/get-current-element-in-console/"/>
    <updated>2021-06-17T08:03:19Z</updated>
    <id>https://devtoolstips.org/tips/en/get-current-element-in-console/</id>
    <content type="html">&lt;p&gt;If you selected an element in the Elements panel (in Chrome, Safari or Edge) or the Inspector panel (in Firefox), you can refer to it in the console using &lt;code&gt;$0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This shortcut will return the DOM node instance, which you can then use to do things like getting computed styles, or check DOM properties, etc.&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;getComputedStyles($0).display&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/get-current-element-in-console.jpg&quot; alt=&quot;screenshot of safari&#39;s console showing how the $0 shortcut returns the selected elemet&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Get detached DOM elements to investigate memory leaks</title>
    <link href="https://devtoolstips.org/tips/en/get-detached-elements/"/>
    <updated>2022-01-10T13:47:02Z</updated>
    <id>https://devtoolstips.org/tips/en/get-detached-elements/</id>
    <content type="html">&lt;p&gt;Memory leaks can quickly become a big problem for long-running applications, and a common source of memory leaks is detached DOM elements (elements that are no longer attached to the DOM tree).
It&#39;s usually very hard to investigate these memory leaks, because it&#39;s hard to know if elements are detached, and which ones, let alone find which part of your JavaScript code is causing them to be detached.&lt;/p&gt;
&lt;p&gt;Edge has a tool just for this: the &lt;strong&gt;Detached Elements&lt;/strong&gt; panel. To use it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;strong&gt;command menu&lt;/strong&gt; and type &amp;quot;detached&amp;quot; to find and open the &lt;strong&gt;Detached Elements&lt;/strong&gt; tool.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Get detached elements&lt;/strong&gt; button to list all of the currently detached elements.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Analyze&lt;/strong&gt; button to take a memory heap snapshot. Once done, you can then double-click any of the detached elements&#39; &lt;strong&gt;Id&lt;/strong&gt;s to find the link between these elements and your JavaScript code in the &lt;strong&gt;Memory&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Don&#39;t forget to click the &lt;strong&gt;Collect garbage&lt;/strong&gt; button every once in a while to force garbage collection. Then get the detached elements again. Indeed, some elements may remain in memory simply because the browser hasn&#39;t yet cleaned them up. Forcing GC makes sure the list only contains the elements that are detached and cannot be cleaned up.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find out much more about this tool in this &lt;a href=&quot;https://blogs.windows.com/msedgedev/2021/12/09/debug-memory-leaks-detached-elements-tool-devtools/&quot;&gt;blog post&lt;/a&gt; and over at Microsoft&#39;s &lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/memory-problems/dom-leaks&quot;&gt;documentation&lt;/a&gt; site.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/get-detached-elements.png&quot; alt=&quot;Screenshot of the Detached Elements panel in Edge, with the Memory panel next to it&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Hide resources loaded by extensions in the Network panel</title>
    <link href="https://devtoolstips.org/tips/en/hide-extension-resources/"/>
    <updated>2021-10-08T11:23:32Z</updated>
    <id>https://devtoolstips.org/tips/en/hide-extension-resources/</id>
    <content type="html">&lt;p&gt;If you want to hide scripts and other resources loaded by browser extensions in the &lt;strong&gt;Network&lt;/strong&gt; panel, use the &lt;code&gt;-scheme:chrome-extension&lt;/code&gt; pattern in the filter input box.&lt;/p&gt;
&lt;p&gt;Credits go to &lt;a href=&quot;https://www.coolcomputerclub.com/&quot;&gt;Sunil&lt;/a&gt; for his &lt;a href=&quot;https://twitter.com/threepointone/status/1446064032407080966&quot;&gt;post on twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/hide-extension-resources.jpg&quot; alt=&quot;Screenshot of the Network panel in Chrome DevTools showing the pattern used in the filter input box&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Highlight the effect of individual CSS properties on hover</title>
    <link href="https://devtoolstips.org/tips/en/highlight-css-properties-on-hover/"/>
    <updated>2021-12-09T08:53:18Z</updated>
    <id>https://devtoolstips.org/tips/en/highlight-css-properties-on-hover/</id>
    <content type="html">&lt;p&gt;How do certain CSS properties apply to the page isn&#39;t always an easy question to answer.&lt;/p&gt;
&lt;p&gt;While some properties might be considered simple, others have complex effects that depend on other factors. Properties like &lt;code&gt;justify-content&lt;/code&gt; or &lt;code&gt;gap&lt;/code&gt; depend on writing and layout direction for example.&lt;/p&gt;
&lt;p&gt;Edge and Chrome help with this by highlighting the effect that individual CSS properties have in the page. This doesn&#39;t work with all properties, but does work with &lt;code&gt;margin&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;border&lt;/code&gt;, &lt;code&gt;justify-content&lt;/code&gt;, &lt;code&gt;align-items&lt;/code&gt;, &lt;code&gt;gap&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find one of the above properties in the &lt;strong&gt;Styles&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Move your mouse cursor over it.&lt;/li&gt;
&lt;li&gt;Watch as the corresponding affected region of the element gets highlighted in the page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/highlight-css-properties-on-hover.gif&quot; alt=&quot;GIF animation showing a flex layout in the page, and the cursor moving over various properties in the Styles pane&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Highlight all the elements that a CSS rule matches</title>
    <link href="https://devtoolstips.org/tips/en/highlight-matching-elements/"/>
    <updated>2021-06-08T17:24:41Z</updated>
    <id>https://devtoolstips.org/tips/en/highlight-matching-elements/</id>
    <content type="html">&lt;p&gt;When you want to know which elements a given CSS rule will apply to, in addition to the currently selected element, you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Firefox:
&lt;ul&gt;
&lt;li&gt;In the Style Editor panel: hover over any rule selector for some time.&lt;/li&gt;
&lt;li&gt;In the Rules panel: click on the selector icon next to any rule selector.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Chrome, Edge or Safari:
&lt;ul&gt;
&lt;li&gt;In the Styles panel: hover over any rule selector for some time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/highlight-matching-elements.gif&quot; alt=&quot;GIF animation showing how hovering over selectors in chrome highlights the matching elements in the page&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Easily change CSS number values from the keyboard in increments of 0.1, 1, 10, 100</title>
    <link href="https://devtoolstips.org/tips/en/increment-css-number-values/"/>
    <updated>2021-10-29T07:17:15Z</updated>
    <id>https://devtoolstips.org/tips/en/increment-css-number-values/</id>
    <content type="html">&lt;p&gt;When playing with styling or layout code in DevTools, it&#39;s useful to be able to change widths, margins, and other CSS number values quickly.&lt;/p&gt;
&lt;p&gt;Manually entering new numbers works of course, but it gets in the way of creativity a little bit.&lt;/p&gt;
&lt;p&gt;In DevTools you can change numbers by using the arrow keys on your keyboard, this way you can easily and quickly test changes while checking the result in real time in the page. But there&#39;s more, you can also hold the various control keys to change the speed at which the numbers increment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Focus a CSS value in the &lt;strong&gt;Styles&lt;/strong&gt;/&lt;strong&gt;Rules&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Make sure the text cursor is on a number.&lt;/li&gt;
&lt;li&gt;Press the &lt;strong&gt;Up&lt;/strong&gt; or &lt;strong&gt;Down&lt;/strong&gt; arrow button on the keyboard to increment, or decrement the number by 1.&lt;/li&gt;
&lt;li&gt;Hold &lt;kbd&gt;Shift&lt;/kbd&gt; at the same time to increment by 10.&lt;/li&gt;
&lt;li&gt;Or, hold &lt;kbd&gt;Alt&lt;/kbd&gt; to increment by 0.1.&lt;/li&gt;
&lt;li&gt;Or, hold &lt;kbd&gt;Ctrl&lt;/kbd&gt; to increment by 100.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/increment-css-number-values.gif&quot; alt=&quot;GIF animation of the Styles panel in Edge showing how numbers can be changed in various increments&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Jump from a CSS variable usage to where it is defined</title>
    <link href="https://devtoolstips.org/tips/en/jump-to-css-variable/"/>
    <updated>2021-09-27T07:25:15Z</updated>
    <id>https://devtoolstips.org/tips/en/jump-to-css-variable/</id>
    <content type="html">&lt;p&gt;CSS &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties&quot;&gt;custom properties&lt;/a&gt;&lt;/strong&gt; (also called &lt;strong&gt;variables&lt;/strong&gt;) are very useful to avoid repeating values in CSS, like colors for example.&lt;/p&gt;
&lt;p&gt;You can define and use a custom property as shown below:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;rule-1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--my-main-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; blue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;rule-2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--my-main-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sometimes, it can be hard in DevTools to see both the place where the variable is used &lt;strong&gt;and&lt;/strong&gt; the place where it is defined. There may be a lot of rules and properties that apply to an element, requiring a lot of scrolling and searching.&lt;/p&gt;
&lt;p&gt;In Edge and Chrome, you can simply click on a &lt;code&gt;var(--foo)&lt;/code&gt; function to jump to where the &lt;code&gt;--foo&lt;/code&gt; variable is defined!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Edge or Chrome, select an element in the &lt;strong&gt;Elements&lt;/strong&gt; panels which has CSS rules applied that use custom properties.&lt;/li&gt;
&lt;li&gt;Hover over the property name inside the &lt;code&gt;var()&lt;/code&gt; function. You can see the value in a tooltip.&lt;/li&gt;
&lt;li&gt;Click on the property name.&lt;/li&gt;
&lt;li&gt;The Styles panel scrolls to where the property is defined and highlights it for a second.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/jump-to-css-variable.gif&quot; alt=&quot;GIF animation of clicking on a custom property link in the Styles panel in Edge&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Cut down on console noise using live expressions</title>
    <link href="https://devtoolstips.org/tips/en/live-expressions/"/>
    <updated>2021-10-29T07:17:37Z</updated>
    <id>https://devtoolstips.org/tips/en/live-expressions/</id>
    <content type="html">&lt;p&gt;Using the &lt;a href=&quot;https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/&quot;&gt;Console&lt;/a&gt; of DevTools to log information that changes a lot is a bad idea. First of all, you flood it with information. Secondly, it can impact the performance of your product. And last but not least, you are most likely to only log this information to debug your project and end users should never get that information.&lt;/p&gt;
&lt;p&gt;An excellent alternative to logging a lot of information are &lt;a href=&quot;https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/live-expressions&quot;&gt;live expressions&lt;/a&gt;. To add a new live expression do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click the eye icon in DevTools &lt;img src=&quot;https://devtoolstips.org/assets/img/live-expressions-eye-icon.png&quot; alt=&quot;The eye button in DevTools&quot; /&gt;&lt;/li&gt;
&lt;li&gt;This gives you an entry field to type in any JavaScript expression. &lt;img src=&quot;https://devtoolstips.org/assets/img/live-expressions-field.png&quot; alt=&quot;The field to enter your live expression&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Save the expression by clicking outside the field or press &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;Enter&lt;/kbd&gt; on Mac or &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;Enter&lt;/kbd&gt; on Windows/Linux.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will pin the expression on top of the Console and show you the value returned from it. Any change will show live below the expression.&lt;/p&gt;
&lt;p&gt;You can use this, for example, to resize the window to a certain size by monitoring the &lt;code&gt;outerWidth&lt;/code&gt; and &lt;code&gt;outerHeight&lt;/code&gt; properties.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;outerWidth&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; x &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;outerHeight&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/live-expressions-window-resize.gif&quot; alt=&quot;Monitoring the window size using live expressions&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You can set as many live expressions as you want, and you can remove them by clicking the &lt;code&gt;x&lt;/code&gt; icon next to them.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Monitor all events dispatched on an element</title>
    <link href="https://devtoolstips.org/tips/en/monitor-element-events/"/>
    <updated>2021-10-15T07:24:32Z</updated>
    <id>https://devtoolstips.org/tips/en/monitor-element-events/</id>
    <content type="html">&lt;p&gt;You can use the &lt;code&gt;monitorEvents&lt;/code&gt; global function in the &lt;strong&gt;Console&lt;/strong&gt; panel to log all of the events dispatched on a particular element.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select an element in the &lt;strong&gt;Elements&lt;/strong&gt; panel.&lt;/li&gt;
&lt;li&gt;Go to the &lt;strong&gt;Console&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;monitorEvents($0, &#39;key&#39;);&lt;/code&gt; and hit Enter.&lt;/li&gt;
&lt;li&gt;Interact with the selected element in the page to dispatch events.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can replace &lt;code&gt;$0&lt;/code&gt; with a reference to any other element. &lt;code&gt;$0&lt;/code&gt; is just a shortcut to the currently selected element.&lt;/p&gt;
&lt;p&gt;You can also change &lt;code&gt;key&lt;/code&gt; to other event types like &lt;code&gt;mouse&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/monitor-element-events.gif&quot; alt=&quot;GIF animation showing how events get automatically logged when using the monitorEvents function&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Thank you to &lt;a href=&quot;https://github.com/mgechev&quot;&gt;Minko Gechev&lt;/a&gt; for &lt;a href=&quot;https://twitter.com/mgechev/status/1447419251120279558&quot;&gt;tweeting&lt;/a&gt; about this tip.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Move panels to re-arrange them</title>
    <link href="https://devtoolstips.org/tips/en/move-panels/"/>
    <updated>2021-11-15T10:40:04Z</updated>
    <id>https://devtoolstips.org/tips/en/move-panels/</id>
    <content type="html">&lt;p&gt;Moving panels around the user interface can be very useful to make DevTools more unique to you and adapted to your needs.&lt;/p&gt;
&lt;p&gt;There are 2 ways that you can re-arrange panels in DevTools today: dragging them horizontally in the toolbar, to re-order them, and moving them between the top toolbar and the bottom (drawer) toolbar&lt;/p&gt;
&lt;h3&gt;To move tabs between the top and bottom areas (Edge only)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Right-click on any of the tabs.&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Move to Bottom&lt;/strong&gt; or &lt;strong&gt;Move to Top&lt;/strong&gt; depending on where the tab is.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This only works in Edge at the moment is makes it super easy to see any 2 tools at once (more information about &lt;a href=&quot;https://blogs.windows.com/msedgedev/2021/09/14/edge-devtools-93-personalization/&quot;&gt;Edge personalization features&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/move-panels-1.gif&quot; alt=&quot;GIF animation in Edge DevTools showing the move to top/bottom menus&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;To re-order panels by dragging (Chrome, Edge, Firefox, Safari)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Click and hold any of the tabs in the toolbar.&lt;/li&gt;
&lt;li&gt;Move that tag horizontally, left or right, until the desired location.&lt;/li&gt;
&lt;li&gt;Release the tab. The new order will be persisted so every time you open DevTools, it will be there.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you use some tools more than others, this can be used to group them at the start of the toolbar for example.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/move-panels-2.gif&quot; alt=&quot;GIF animation in Firefox DevTools showing how to move panels in the toolbar&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Write code on multiple lines in the Console</title>
    <link href="https://devtoolstips.org/tips/en/multi-line-console/"/>
    <updated>2021-12-16T14:08:30Z</updated>
    <id>https://devtoolstips.org/tips/en/multi-line-console/</id>
    <content type="html">&lt;p&gt;If you&#39;re feeling adventurous and want to write longer pieces of code in the &lt;strong&gt;Console&lt;/strong&gt; to execute more complex things, it can quickly become difficult.&lt;/p&gt;
&lt;p&gt;Thankfully, there are a few ways to make your life easier by writing on multiple lines, like you would in a code editor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Enter&lt;/kbd&gt; to create a new line without executing the expression. This works in all browsers.&lt;/li&gt;
&lt;li&gt;Or ue Firefox&#39;s multiline editor. To do this, click on the &lt;strong&gt;Switch to multi-line editor mode&lt;/strong&gt; button located in the top-right corner of the &lt;strong&gt;Console&lt;/strong&gt; message area (or press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;B&lt;/kbd&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/multi-line-console-firefox.png&quot; alt=&quot;Screenshot showing the button to switch the Firefox console to the multi-line mode&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Or you can create code snippets in Edge or Chrome&#39;s &lt;strong&gt;Sources&lt;/strong&gt; panel. The added advantage of this technique is that code snippets are saved on your disk, and therefore can be used even after you&#39;ve restarted the browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/multi-line-console-snippet.png&quot; alt=&quot;Screenshot showing the snippet tab in Edge&#39;s Sources panel&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Take a screenshot of a single node</title>
    <link href="https://devtoolstips.org/tips/en/node-screenshot/"/>
    <updated>2021-11-17T12:52:04Z</updated>
    <id>https://devtoolstips.org/tips/en/node-screenshot/</id>
    <content type="html">&lt;p&gt;In Firefox, Chrome, and Edge DevTools, you can screenshot a single node from the page.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the &lt;strong&gt;Elements&lt;/strong&gt; panel (or &lt;strong&gt;Inspector&lt;/strong&gt; panel in Firefox).&lt;/li&gt;
&lt;li&gt;Right-click on the node you want to screenshot.&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Capture node screenshot&lt;/strong&gt; (or &lt;strong&gt;Screenshot node&lt;/strong&gt; in Firefox).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/node-screenshot.gif&quot; alt=&quot;GIF animation showing taking a node screenshot in Firefox&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Draw a box around all elements to debug your CSS and page structure</title>
    <link href="https://devtoolstips.org/tips/en/outline-everything/"/>
    <updated>2021-06-25T21:00:44Z</updated>
    <id>https://devtoolstips.org/tips/en/outline-everything/</id>
    <content type="html">&lt;p&gt;Simple, yet powerful, &lt;code&gt;* { outline: 1px solid red; }&lt;/code&gt; is a useful debugging trick that helps understanding the page structure, finding overflow bugs or understand why elements are being pushed away for no apparent reason.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the Elements panel (in Chrome, Edge or Safari) or Inspector panel (in Firefox).&lt;/li&gt;
&lt;li&gt;Click the &lt;code&gt;+&lt;/code&gt; (new style) icon in the Styles or Rules sidebar.&lt;/li&gt;
&lt;li&gt;Add the rule  &lt;code&gt;{ outline: 1px solid red; }&lt;/code&gt; to the CSS Selector &lt;code&gt;*&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And voila! All elements are outlined and you can understand what&#39;s going on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/outline-everything.gif&quot; alt=&quot;Gif animation showing how adding the rule in the styles pane if chrome devtools outlines all elements in the page&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Persist console messages across page navigations and reloads</title>
    <link href="https://devtoolstips.org/tips/en/persist-logs-across-pages/"/>
    <updated>2021-06-24T08:52:56Z</updated>
    <id>https://devtoolstips.org/tips/en/persist-logs-across-pages/</id>
    <content type="html">&lt;p&gt;By default, the messages displayed in the console get removed as soon as you refresh the page (or navigate to a new page). If you want to keep those messages as long as DevTools is open, follow these steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Firefox:
&lt;ul&gt;
&lt;li&gt;In the Console panel, click on the cog icon (top-right corner) and select &amp;quot;Persist Logs&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Edge or Chrome:
&lt;ul&gt;
&lt;li&gt;In the Console panel, click on the cog icon (top-right corner) and check the &amp;quot;Preserve Log&amp;quot; box&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Safari:
&lt;ul&gt;
&lt;li&gt;In the Console panel, check the &amp;quot;Preserve Log&amp;quot; box in the top toolbar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/persist-logs-across-pages.png&quot; alt=&quot;Screenshot of Edge devtools&#39; console showing the settings panel at the top, with the &amp;quot;perserve log&amp;quot; box checked&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Play a sound when a line of JavaScript is executed</title>
    <link href="https://devtoolstips.org/tips/en/play-sound-on-js-execution/"/>
    <updated>2021-09-08T12:37:27Z</updated>
    <id>https://devtoolstips.org/tips/en/play-sound-on-js-execution/</id>
    <content type="html">&lt;p&gt;Sometimes pausing execution when a line of JavaScript is executed is too much, sometimes you only want to know that the line was executed at all, not pause there.&lt;/p&gt;
&lt;p&gt;To do this you can add &lt;code&gt;console.log()&lt;/code&gt; statements in your code, or &lt;a href=&quot;https://devtoolstips.org/tips/en/use-logpoints/&quot;&gt;use logpoints&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Safari, you can play an audio beep instead! This way you can hear that the line got executed, and your console doesn&#39;t get cluttered with more messages.&lt;/p&gt;
&lt;p&gt;To add an audio breakpoint:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a breakpoint on a line of code by clicking in the line number gutter.&lt;/li&gt;
&lt;li&gt;Right-click on the breakpoint and select &lt;strong&gt;Edit breakpoint&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Add action&lt;/strong&gt; and select &lt;strong&gt;Play sound&lt;/strong&gt; from the action dropdown.&lt;/li&gt;
&lt;li&gt;Check the &lt;strong&gt;Automatically continue after evaluating&lt;/strong&gt; option to avoid pausing on this line.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that&#39;s it! Now every time this line is executed, an audio beep will be played.&lt;/p&gt;
&lt;p&gt;You can remove the breakpoint by right-clicking on it and selecting &lt;strong&gt;Delete Breakpoint&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/play-sound-on-js-execution.gif&quot; alt=&quot;GIF animation showing how to add the audio breakpoint in Safari Web Inspector&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Prototype content changes with designMode</title>
    <link href="https://devtoolstips.org/tips/en/prototype-content-changes-with-designmode/"/>
    <updated>2021-08-02T19:12:12Z</updated>
    <id>https://devtoolstips.org/tips/en/prototype-content-changes-with-designmode/</id>
    <content type="html">&lt;p&gt;When creating or modifying a design prototype for the web, you may want to quickly edit content in the browser without having to find the relevant code.&lt;/p&gt;
&lt;p&gt;When you turn on &lt;code&gt;designMode&lt;/code&gt; for the document or a given element, all associated text becomes editable directly in the browser. Images and other page content can be deleted, too. This is a quick way to prototype design changes such as seeing how a page responds to very long or very short headline copy.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;designMode&lt;/code&gt; is not a DevTools-specific feature, as it is defined as part of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/designMode&quot;&gt;Web API&lt;/a&gt;. However, toggling &lt;code&gt;designMode&lt;/code&gt; via the DevTools Console is a convenient way to temporarily make the page editable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the Console&lt;/li&gt;
&lt;li&gt;Enter &lt;code&gt;document.designMode=&amp;quot;on&amp;quot;&lt;/code&gt; and press Enter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Turn off &lt;code&gt;designMode&lt;/code&gt; with the expression &lt;code&gt;document.designMode=&amp;quot;off&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Changes are not persisted and will revert on page close or refresh.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/prototype-content-changes-with-designmode.gif&quot; alt=&quot;Animated GIF of editable web page with designMode on&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Find DOM elements from the console</title>
    <link href="https://devtoolstips.org/tips/en/query-dom-from-console/"/>
    <updated>2021-06-24T12:10:43Z</updated>
    <id>https://devtoolstips.org/tips/en/query-dom-from-console/</id>
    <content type="html">&lt;p&gt;&lt;code&gt;$&lt;/code&gt; and &lt;code&gt;$$&lt;/code&gt; are 2 functions you can use in the console to find elements in the page.&lt;/p&gt;
&lt;p&gt;They are essentially shortcuts to the longer &lt;code&gt;document.querySelector()&lt;/code&gt; and &lt;code&gt;document.querySelectorAll()&lt;/code&gt; functions, but &lt;code&gt;$$&lt;/code&gt; returns an array instead of a &lt;code&gt;NodeList&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;They&#39;re nice and short, and for those who worked with jQuery, they will feel familiar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/query-dom-from-console.png&quot; alt=&quot;Firefox&#39;s console panel, showing 3 different examples of using the $ and $$ built-in console functions&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Query object instances and holders from the console</title>
    <link href="https://devtoolstips.org/tips/en/query-instances-holders/"/>
    <updated>2022-01-10T13:47:02Z</updated>
    <id>https://devtoolstips.org/tips/en/query-instances-holders/</id>
    <content type="html">&lt;p&gt;All browser DevTools have a few built-in functions in the console to do things like &lt;a href=&quot;https://devtoolstips.org/tips/en/get-current-element-in-console/&quot;&gt;get the current element&lt;/a&gt;, or &lt;a href=&quot;https://devtoolstips.org/tips/en/copy-from-console/&quot;&gt;copy a string&lt;/a&gt;. But Safari exposes 2 nice built-in functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;queryInstances&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;queryHolders&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These two functions are really useful when your site starts using a lot of JavaScript objects. In some situations, it may become difficult to keep track of the dependencies between these objects, and memory leaks may start to appear, too.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;app.TodoItem&lt;/code&gt; is a JavaScript class in your application, then &lt;code&gt;queryInstances(app.TodoItem)&lt;/code&gt; will return an array of all of its instances.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/query-instances-holders-1.png&quot; alt=&quot;Screenshot of the console in Safari, showing the result of queryInstances(app.TodoItem)&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Or if you want to know what refers to the object you&#39;re debugging, use &lt;code&gt;queryHolders(this)&lt;/code&gt;, which will return an array of all the other objects that have references to &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/query-instances-holders-2.png&quot; alt=&quot;Screenshot of the console in Safari, showing the result of queryHolders(this)&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Learn more about these, and other, built-in functions &lt;a href=&quot;https://webkit.org/web-inspector/console-command-line-api/#functions&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Sample colors from the page</title>
    <link href="https://devtoolstips.org/tips/en/sample-colors-from-the-page/"/>
    <updated>2021-06-30T17:03:42Z</updated>
    <id>https://devtoolstips.org/tips/en/sample-colors-from-the-page/</id>
    <content type="html">&lt;p&gt;Being able to sample colors from the page is super useful. Firefox, Edge and Chrome all allow you to do this in 2 different ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Firefox it&#39;s really simple and doesn&#39;t even require opening DevTools:
&lt;ul&gt;
&lt;li&gt;Go to the main Firefox menu&lt;/li&gt;
&lt;li&gt;Go to the &amp;quot;More Tools&amp;quot; submenu&lt;/li&gt;
&lt;li&gt;Click on the Eyedropper menu item&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/sample-colors-from-the-page-1.gif&quot; alt=&quot;Gif animation of the eyedropper tool being started from the firefox main menu&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is a second way to do this in Firefox from DevTools:
&lt;ul&gt;
&lt;li&gt;Open the Inspector panel&lt;/li&gt;
&lt;li&gt;Click on the eye dropper button in the typ-right corner of the panel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/sample-colors-from-the-page-2.png&quot; alt=&quot;Screenshot of the eyedropper button in Firefox&#39;s inspector panel&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Chrome and Edge:
&lt;ul&gt;
&lt;li&gt;Open the Elements panel and select an element that has some CSS color set to it&lt;/li&gt;
&lt;li&gt;Find the color in the Styles pane and click on the color swatch icon next to it&lt;/li&gt;
&lt;li&gt;Just start moving the mouse over the page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/sample-colors-from-the-page-3.gif&quot; alt=&quot;Gif animation of starting the eyedropper tool from chrome and edge&#39;s color pickers&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Scroll an element into view</title>
    <link href="https://devtoolstips.org/tips/en/scroll-into-view/"/>
    <updated>2021-11-23T21:31:59Z</updated>
    <id>https://devtoolstips.org/tips/en/scroll-into-view/</id>
    <content type="html">&lt;p&gt;If the inspected web page is long with a lot of elements, and its DOM tree is big and complex, it&#39;s easy to get lost, not knowing where the selected element is in the page.&lt;/p&gt;
&lt;p&gt;DevTools has got your back here! You can easily reveal where the selected element is in the page by scrolling it into view:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Right-click the element in the &lt;strong&gt;Elements&lt;/strong&gt; panel (or &lt;strong&gt;Inspector&lt;/strong&gt; panel in Firefox).&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Scroll into view&lt;/strong&gt; (in Firefox, you can also press &lt;kbd&gt;S&lt;/kbd&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/scroll-into-view.gif&quot; alt=&quot;GIF animation showing how the page is scrolled to reveal the selected element&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>See formatted JSON responses</title>
    <link href="https://devtoolstips.org/tips/en/see-json-responses/"/>
    <updated>2021-09-01T12:09:07Z</updated>
    <id>https://devtoolstips.org/tips/en/see-json-responses/</id>
    <content type="html">&lt;p&gt;Firefox comes with a very nice &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/JSON_viewer&quot;&gt;JSON viewer&lt;/a&gt; that makes it easy to review responses from your server directly in the browser window.&lt;/p&gt;
&lt;p&gt;You don&#39;t even need to open DevTools.&lt;/p&gt;
&lt;p&gt;Just enter the URL to a JSON response in a tab, and instead of getting the raw text back, the JSON will be formatted and a toolbar will appear, with buttons to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Search within the response&lt;/li&gt;
&lt;li&gt;See the raw text&lt;/li&gt;
&lt;li&gt;See the headers&lt;/li&gt;
&lt;li&gt;Save the file locally&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/see-json-responses.png&quot; alt=&quot;Screenshot of the JSON viewer in Firefox&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You can try it out with &lt;a href=&quot;https://jsonplaceholder.typicode.com/posts/1/comments&quot;&gt;this sample JSON response&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>See quick accessibility information on hover</title>
    <link href="https://devtoolstips.org/tips/en/see-quick-a11y-info-on-hover/"/>
    <updated>2021-06-15T13:47:08Z</updated>
    <id>https://devtoolstips.org/tips/en/see-quick-a11y-info-on-hover/</id>
    <content type="html">&lt;p&gt;In Edge and Chrome, whenever you use the element selector and hover over elements in the page, a tooltip appears with, among other things, some accessibility information about the hovered element.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To start the element selector, click on the mouse cursor icon in the top-left corner of the DevTools window.&lt;/li&gt;
&lt;li&gt;Then simply hover over elements in the page&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/see-quick-a11y-info-on-hover.gif&quot; alt=&quot;gif animation of the a11y tooltip in chrome&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>See the page in 3D</title>
    <link href="https://devtoolstips.org/tips/en/see-the-page-in-3d/"/>
    <updated>2021-10-29T07:17:37Z</updated>
    <id>https://devtoolstips.org/tips/en/see-the-page-in-3d/</id>
    <content type="html">&lt;p&gt;See your page in 3 dimensions to quickly find out how deeply nested it is, fix z-index stacking issues, and performance issues.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Edge:
&lt;ul&gt;
&lt;li&gt;Open the command menu (&lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt;).&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;3D&lt;/code&gt; and press Enter.&lt;/li&gt;
&lt;li&gt;In the new panel that opens, switch between the 3 modes: z-index, DOM, and Composited Layers to visualize the page in 3D.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chrome and Safari also have a Layers panel that provides the same information as Edge&#39;s Composited Layers 3D mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/see-the-page-in-3d.png&quot; alt=&quot;Screenshot of the 3D view tool showing a page&#39;s z-index stacking tree as a 3d scene&quot; /&gt;&lt;/p&gt;
&lt;p&gt;More information on Edge&#39;s 3D tool in this video:&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=BZAH8ZXhHZA&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Select elements with pointer-events:none by holding Shift</title>
    <link href="https://devtoolstips.org/tips/en/select-pointer-events-none-elements/"/>
    <updated>2022-01-13T15:49:19Z</updated>
    <id>https://devtoolstips.org/tips/en/select-pointer-events-none-elements/</id>
    <content type="html">&lt;p&gt;When selecting elements from the page they normally get highlighted on hover and selected on click. However certain elements can&#39;t be selected.&lt;/p&gt;
&lt;p&gt;Indeed, if an element does not react to pointer events because the &lt;code&gt;pointer-events:none&lt;/code&gt; CSS declaration is set, then you just can&#39;t select it, and the only way to get to it is to find it in the &lt;strong&gt;Elements&lt;/strong&gt;/&lt;strong&gt;Inspector&lt;/strong&gt; panel.&lt;/p&gt;
&lt;p&gt;In Chrome, Edge, and Firefox, you can hold the &lt;kbd&gt;Shift&lt;/kbd&gt; key on your keyboard while hovering elements in the page! When you do this, even elements with &lt;code&gt;pointer-events:none&lt;/code&gt; can be selected!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/select-pointer-events-none-elements.gif&quot; alt=&quot;Gif animation showing how a pointer-events:none element normally can&#39;t be selected, except when Shift is pressed&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/simevidas/status/1464501900586463236&quot;&gt;Šime Vidas&lt;/a&gt; also proposed this alternative solution in Firefox:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the &lt;strong&gt;Accessibility&lt;/strong&gt; tool.&lt;/li&gt;
&lt;li&gt;Use the accessibility picker tool (top-left corner) to pick the element from the page.&lt;/li&gt;
&lt;li&gt;Find the corresponding DOM node in the &lt;strong&gt;Properties&lt;/strong&gt; sidebar panel, and click the inspect icon next to it.&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  
  <entry>
    <title>Send feedback, ask for features and report bugs</title>
    <link href="https://devtoolstips.org/tips/en/send-feedback-about-devtools/"/>
    <updated>2021-07-12T13:40:22Z</updated>
    <id>https://devtoolstips.org/tips/en/send-feedback-about-devtools/</id>
    <content type="html">&lt;img src=&quot;https://devtoolstips.org/assets/img/send-feedback-about-devtools.png&quot; alt=&quot;A feedback illustration showing a stick figure with a speech bubble&quot; style=&quot;width:50px;&quot; /&gt;
&lt;p&gt;Browser vendors depend on your feedback to build the right tools for you. Without hearing from you all about what problems you have, or what features you lack, they can&#39;t take the right decisions about what to build.&lt;/p&gt;
&lt;p&gt;If you report bugs to the devtools team when you see them, you won&#39;t just be helping you when the fix comes, but you may be helping many others who have the same bug but haven&#39;t reported it.&lt;/p&gt;
&lt;p&gt;It&#39;s worth knowing that the various devtools teams at Microsoft, Mozilla, Apple and Google are usually fairly small and receive a lot of feedback, so reporting an issue does not mean it will be fixed quickly (or at all, if it&#39;s lower priority than others), but it does help, and those teams &lt;strong&gt;are listening&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here are a few ways you can report bugs, ask questions or request features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Firefox DevTools&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Firefox uses &lt;a href=&quot;https://bugzilla.mozilla.org/&quot;&gt;Bugzilla&lt;/a&gt; as their public bug tracker and anyone is welcome to report bugs or ask for new features by creating a new entry on Bugzilla. All you need is a GitHub account to log in.&lt;/li&gt;
&lt;li&gt;Getting in touch with the team can either be done on Twitter by mentioning the &lt;a href=&quot;https://twitter.com/FirefoxDevTools&quot;&gt;@FirefoxDevTools&lt;/a&gt; account, or logging in to &lt;a href=&quot;https://chat.mozilla.org/&quot;&gt;the Mozilla chat&lt;/a&gt; (find documentation about the chat &lt;a href=&quot;https://wiki.mozilla.org/Matrix&quot;&gt;here&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Safari Web Inspector&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Like Firefox, Safari uses the Bugzilla product to track their &lt;a href=&quot;https://bugs.webkit.org/&quot;&gt;webkit bugs&lt;/a&gt;. Here is documentation about how to &lt;a href=&quot;https://webkit.org/reporting-bugs/&quot;&gt;search for bugs and report new ones&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can also get in touch with the team on Twitter with &lt;a href=&quot;https://twitter.com/webkit&quot;&gt;@webkit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Finally, you can also signal bugs about Safari and the Safari Web Inspector using the &lt;a href=&quot;https://developer.apple.com/bug-reporting/&quot;&gt;feedback assistant&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chromium&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Chromium is an open-source project that several browsers are based on, including Google Chrome and Microsoft Edge. If you believe you found a bug that pertains to Chromium rather than just one of the browsers based on it, you can head over to the Monorail bug tracker that Chromium uses and &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/list&quot;&gt;find all issues and create new ones here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edge DevTools&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;The easiest way to report a problem or ask for a feature is by using &lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/#getting-in-touch-with-the-microsoft-edge-devtools-team&quot;&gt;the feedback button&lt;/a&gt; in DevTools (the little stick figure in the top-right corner of the tools)&lt;/li&gt;
&lt;li&gt;Asking questions to the team works best over Twitter by mentioning the &lt;a href=&quot;https://twitter.com/EdgeDevTools&quot;&gt;@EdgeDevTools&lt;/a&gt; account.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chrome DevTools&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;On top of the Chromium bug tracker, the team also listens for feedback on &lt;a href=&quot;https://www.chromium.org/teams/devtools&quot;&gt;the devtools-dev mailing list&lt;/a&gt; as well as on twitter at &lt;a href=&quot;https://twitter.com/ChromeDevTools&quot;&gt;@ChromeDevTools&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Simulate color vision deficiencies</title>
    <link href="https://devtoolstips.org/tips/en/simulate-color-vision-deficiencies/"/>
    <updated>2021-06-22T17:03:41Z</updated>
    <id>https://devtoolstips.org/tips/en/simulate-color-vision-deficiencies/</id>
    <content type="html">&lt;p&gt;People who visit your web pages may have different types of color vision deficiencies that, if you incorrectly use colors for meaning, may affect their experience.&lt;/p&gt;
&lt;p&gt;Firefox, Chrome and Edge make it possible for you to test how a web page may appear to somebody with a color vision deficiency.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Firefox:
&lt;ul&gt;
&lt;li&gt;Go to the Accessibility panel&lt;/li&gt;
&lt;li&gt;In the toolbar at the top, choose from a selection of different color vision deficiencies in the &amp;quot;Simulate&amp;quot; drop-down&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/simulate-color-vision-deficiencies-1.png&quot; alt=&quot;Screenshot of the color vision simulation drop-down in Firefox&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Chrome, or in Edge:
&lt;ul&gt;
&lt;li&gt;You first need to open the Rendering panel. Either use the &lt;a href=&quot;https://devtoolstips.org/tips/en/execute-commands/&quot;&gt;command menu&lt;/a&gt; and type &lt;code&gt;rendering&lt;/code&gt; or use the main menu (the three-dots icon in the top-right corner of the screen) and go to More Tools to find it.&lt;/li&gt;
&lt;li&gt;Scroll down until you find the &amp;quot;Emulate vision deficiencies&amp;quot; section, and choose fro the drop-down&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/simulate-color-vision-deficiencies-2.png&quot; alt=&quot;Screenshot of the color vision simulation drop-down in Chrome&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Simulate pseudo CSS classes</title>
    <link href="https://devtoolstips.org/tips/en/simulate-pseudo-classes/"/>
    <updated>2021-11-07T15:32:11Z</updated>
    <id>https://devtoolstips.org/tips/en/simulate-pseudo-classes/</id>
    <content type="html">&lt;p&gt;If you use &lt;code&gt;:hover&lt;/code&gt;, &lt;code&gt;:active&lt;/code&gt;, and other such pseudo-classes in CSS, you can actually simulate these states in DevTools without having to hover over or click on buttons and links.&lt;/p&gt;
&lt;p&gt;Open the Styles panel (in Chrome, Edge or Safari) or the Rules panel (in Firefox), and click the &lt;code&gt;:hov&lt;/code&gt; button. This will expand a section that allows you to lock one or multiple of these pseudo-classes on the selected element.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/simulate-pseudo-classes.png&quot; alt=&quot;Screenshot of the :hov panel to simulate various pseudo-classes&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This is great when you write your styles, as you can define see the changes to - for example - a hover state of an element without having to use your mouse to see it in action.&lt;/p&gt;
&lt;p&gt;It is even more useful when you want to test the different states of an element. In the following screencast you can see how to use the state simulation to check the hover, active, visited and focused state of a link without having to interact with the link using your keyboard or mouse. If you want to try it out yourself, &lt;a href=&quot;https://codepen.io/codepo8/pen/WNEMaPO&quot;&gt;here is the demo page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=CgHuHYRyvXc&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Store a node as a variable to use it in the console</title>
    <link href="https://devtoolstips.org/tips/en/store-node-as-variable/"/>
    <updated>2021-10-23T05:34:58Z</updated>
    <id>https://devtoolstips.org/tips/en/store-node-as-variable/</id>
    <content type="html">&lt;p&gt;If you want to use a DOM node from the page in the console:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Right-click the node in the &lt;strong&gt;Elements&lt;/strong&gt; (or &lt;strong&gt;Inspector&lt;/strong&gt; in Firefox).&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Store as global variable&lt;/strong&gt; (or &lt;strong&gt;Use in Console&lt;/strong&gt; in Firefox).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;Console&lt;/strong&gt; opens up, pre-filled with a new variable name (something like &lt;code&gt;temp1&lt;/code&gt;) which you can use to refer to the node any time you want.&lt;/p&gt;
&lt;p&gt;Note that if you only want to refer to the currently selected node (and not create a new variable), you can also &lt;a href=&quot;https://devtoolstips.org/tips/en/get-current-element-in-console&quot;&gt;use &lt;code&gt;$0&lt;/code&gt; in the console&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/store-node-as-variable.png&quot; alt=&quot;screenshot of firefox&#39;s &amp;quot;use in console&amp;quot; context menu option in the Inspector, and also showing the Console with a couple of tempN variables&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Thank you &lt;a href=&quot;https://austingil.com/&quot;&gt;Austin Gil&lt;/a&gt; for sharing this tip on &lt;a href=&quot;https://twitter.com/Stegosource/status/1451294683024355328&quot;&gt;Twitter&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Apply CSS styles to console messages</title>
    <link href="https://devtoolstips.org/tips/en/style-console-messages/"/>
    <updated>2021-06-28T15:25:16Z</updated>
    <id>https://devtoolstips.org/tips/en/style-console-messages/</id>
    <content type="html">&lt;p&gt;The &lt;code&gt;console.log&lt;/code&gt; output can be styled in DevTools using CSS.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;%c Hello World&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;color: orange; font-size: 2em;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/style-console-messages.png&quot; alt=&quot;Screenshot of a styled console message in Edge&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Event listeners are suppressed when paused</title>
    <link href="https://devtoolstips.org/tips/en/suppressed-event-listeners-when-paused/"/>
    <updated>2021-06-30T11:46:57Z</updated>
    <id>https://devtoolstips.org/tips/en/suppressed-event-listeners-when-paused/</id>
    <content type="html">&lt;p&gt;This is not really a tip, but rather an interesting thing to be aware of when debugging JavaScript.&lt;/p&gt;
&lt;p&gt;If you use breakpoints in the Sources (or Debugger) tab in DevTools to debug JavaScript, you should know that all event listeners are suppressed while paused at one of them.&lt;/p&gt;
&lt;p&gt;For example, if you have a button with an &lt;code&gt;onclick&lt;/code&gt; handler, and you&#39;re paused at a breakpoint, then clicking that button won&#39;t execute the handler. It also won&#39;t execute it later when you resume execution.
In fact, most DevTools display an overlay on top of the entire page that prevents you from accessing it at all.&lt;/p&gt;
&lt;p&gt;This also happens if you manually try to dispatch new events from the console using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent&quot;&gt;&lt;code&gt;dispatchEvent&lt;/code&gt;&lt;/a&gt;. If there are handlers for these events, they also won&#39;t get called while execution is paused.&lt;/p&gt;
&lt;p&gt;The reason for this is that (ignoring workers) JavaScript on your page only runs in one thread. So while that thread is paused at one specific location, it&#39;s not supposed to be able to execute code from other locations.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/suppressed-event-listeners-when-paused.png&quot; alt=&quot;Screenshot of a page in edge with the DevTools Sources paused at a location, and the on-page overlay preventing access to the page&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Take screenshots of your site in a device frame</title>
    <link href="https://devtoolstips.org/tips/en/take-in-device-screenshots/"/>
    <updated>2021-11-17T12:52:04Z</updated>
    <id>https://devtoolstips.org/tips/en/take-in-device-screenshots/</id>
    <content type="html">&lt;p&gt;Taking a photo of a mobile device or tablet is daunting as you have to deal with fingerprints, glare and focus issues. Using Device Emulation makes this a lot easier.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/take-in-device-screenshots.png&quot; alt=&quot;Screenshot of the devtoolstips.org website in an iPhone frame&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To take a screenshot of a web page inside a device frame, use either Chrome or Edge (or any Chromium browser):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In DevTools, turn on &lt;strong&gt;Device Emulation&lt;/strong&gt; by clicking the icon or pressing &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;M&lt;/kbd&gt; (&lt;kbd&gt;Cmd&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;M&lt;/kbd&gt; on Mac).&lt;/li&gt;
&lt;li&gt;Select a device from the Device dropdown menu. Be aware that not all devices have graphical frames.
&lt;img src=&quot;https://devtoolstips.org/assets/img/take-in-device-screenshots-devices-dropdown.png&quot; alt=&quot;The device dropdown menu open and showing all the options&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;…&lt;/strong&gt; button (&lt;strong&gt;More options&lt;/strong&gt;) and select &lt;strong&gt;Show device frame&lt;/strong&gt;.
&lt;img src=&quot;https://devtoolstips.org/assets/img/take-in-device-screenshots-show-device-frame.png&quot; alt=&quot;Turning on device frame in the more options menu of the Device emulation tool&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;…&lt;/strong&gt; button again and select &lt;strong&gt;Capture screenshot&lt;/strong&gt;.
&lt;img src=&quot;https://devtoolstips.org/assets/img/take-in-device-screenshots-capture-screenshot.png&quot; alt=&quot;Selecting the screenshot option from the More Options menu&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&#39;s it, you now have a photo of your web page inside a device on transparent background.&lt;/p&gt;
&lt;p&gt;You can see this in action in the following video:&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=ZViLMjxpqEE&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Throttle the network speed to test your website on slower connections</title>
    <link href="https://devtoolstips.org/tips/en/throttle-network-speed/"/>
    <updated>2021-07-20T16:39:17Z</updated>
    <id>https://devtoolstips.org/tips/en/throttle-network-speed/</id>
    <content type="html">&lt;p&gt;While you may develop your website on a fast network connection at home or at work, your users may not be able to use it with an equally fast connection. Perhaps they&#39;re in a moving car, or on the subway, or they don&#39;t have access to high-speed internet at their place. Whatever it is, they may experience your site very differently than you do because of this.&lt;/p&gt;
&lt;p&gt;Testing your site with a slower connection helps you understand how it loads and appears on the screen.&lt;/p&gt;
&lt;p&gt;Firefox, Chrome and Edge let you simulate slower network connections to do this. The procedure is the same in all of them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the Network panel&lt;/li&gt;
&lt;li&gt;Use the dropdown that says &lt;code&gt;No throttling&lt;/code&gt; and choose any of the other values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/throttle-network-speed.png&quot; alt=&quot;Screenshot of the Network panel in Edge showing the network throttling drop-down&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Tweak css grid and flexbox alignment properties</title>
    <link href="https://devtoolstips.org/tips/en/tweak-grid-flex-alignment/"/>
    <updated>2021-06-15T13:47:08Z</updated>
    <id>https://devtoolstips.org/tips/en/tweak-grid-flex-alignment/</id>
    <content type="html">&lt;p&gt;Chrome and Edge both have a visual editor useful for tweaking flexbox and grid alignment properties.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Head over to the Elements panel&lt;/li&gt;
&lt;li&gt;Select an element that is either a grid or flexbox container&lt;/li&gt;
&lt;li&gt;In the Styles sidebar pane, find the &lt;code&gt;display: grid&lt;/code&gt; or &lt;code&gt;display:flex&lt;/code&gt; declaration&lt;/li&gt;
&lt;li&gt;Click the little icon next to this declaration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/tweak-grid-flex-alignment.png&quot; alt=&quot;Screenshot of the grid editor in the Styles pane of Microsoft Edge&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Unminify JavaScript code to easily read and debug it</title>
    <link href="https://devtoolstips.org/tips/en/unminify-javascript-code/"/>
    <updated>2021-06-08T17:24:41Z</updated>
    <id>https://devtoolstips.org/tips/en/unminify-javascript-code/</id>
    <content type="html">&lt;p&gt;Sometimes, the JavaScript code that runs on a website is minified and really hard to read. This is common in production.&lt;/p&gt;
&lt;p&gt;You can unminify code in DevTools to read it more easily, and also set breakpoints.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open a file in the Sources or Debugger panel&lt;/li&gt;
&lt;li&gt;Click on the &lt;code&gt;{}&lt;/code&gt; icon at the bottom of the source code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/unminify-javascript-code.gif&quot; alt=&quot;Screenshot of the Sources panel in Chrome, showing the pretty-print button&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Switch DevTools to another language</title>
    <link href="https://devtoolstips.org/tips/en/use-another-language/"/>
    <updated>2021-06-08T09:29:31Z</updated>
    <id>https://devtoolstips.org/tips/en/use-another-language/</id>
    <content type="html">&lt;p&gt;If you want to use DevTools in another language than English, you can do it in Edge and Firefox.&lt;/p&gt;
&lt;p&gt;In Firefox, DevTools will always match the language of the browser, so if you downloaded Firefox in French for instance, then DevTools will be in French too.&lt;/p&gt;
&lt;p&gt;In Edge, you can choose between English and the language the browser is in. To do so, in Edge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to Settings.&lt;/li&gt;
&lt;li&gt;Go to Languages.&lt;/li&gt;
&lt;li&gt;Add the language of your choice and select &amp;quot;Display Microsoft Edge in this language&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then in DevTools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the settings (press F1 or click the cog icon).&lt;/li&gt;
&lt;li&gt;Click the &amp;quot;Match browser language&amp;quot; checkbox.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/use-another-language.png&quot; alt=&quot;Screenshot of the settings panel in Edge showing a checkbox to match devtools with the browser language&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Console.log() for the web with logpoints</title>
    <link href="https://devtoolstips.org/tips/en/use-logpoints/"/>
    <updated>2021-10-20T13:36:36Z</updated>
    <id>https://devtoolstips.org/tips/en/use-logpoints/</id>
    <content type="html">&lt;p&gt;Using the &lt;a href=&quot;https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/&quot;&gt;console&lt;/a&gt; to log some information is a very common way to debug your JavaScript. But you can also log information in any web site using &lt;strong&gt;Logpoints&lt;/strong&gt; in the &lt;a href=&quot;https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/sources/&quot;&gt;sources&lt;/a&gt; panel.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/use-logpoints.png&quot; alt=&quot;Screenshots of the way to set a logpoint in the sources tool&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here&#39;s how to do it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In the Sources panel (or Debugger in Firefox), open a JavaScript file and right-click any line number.&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Add logpoint&lt;/code&gt; to open the editor&lt;/li&gt;
&lt;li&gt;In the editor, enter the JavaScript expression you&#39;d like to log.&lt;/li&gt;
&lt;li&gt;Hit Enter to save and a badge shows on the line number.&lt;/li&gt;
&lt;li&gt;Go to the console, interact with the site and every time this line executes, you see the result of the logpoint expression.&lt;/li&gt;
&lt;li&gt;If you don&#39;t want to log information any longer, click the Logpoint again to remove it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Logpoints are a way to inject a &lt;code&gt;console.log()&lt;/code&gt; into any web site without editing its source code.&lt;/p&gt;
&lt;p&gt;You can see this in action in this video on YouTube:&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=DRRezUZvZ6I&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Re-use scripts as snippets</title>
    <link href="https://devtoolstips.org/tips/en/use-scripts-as-snippets/"/>
    <updated>2021-10-29T07:17:37Z</updated>
    <id>https://devtoolstips.org/tips/en/use-scripts-as-snippets/</id>
    <content type="html">&lt;p&gt;The console is great to write JavaScript to read from the document or manipulate it but it&#39;s a terrible editor.&lt;/p&gt;
&lt;p&gt;The sources panel (in Edge or Chrome), however, is a full editor and you can use it to write more complex scripts to run in the context of the current page and keep them for later re-use.&lt;/p&gt;
&lt;p&gt;These are called &lt;a href=&quot;https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/javascript/snippets&quot;&gt;snippets&lt;/a&gt; and you can access them in the Sources tool on the left hand side (you may have to use the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; to reach them). You can create as many named snippets as you like and remove ones you don&#39;t need any more.&lt;br /&gt;
Snippets have full access to the window object and you can use any of the console API methods in them too.&lt;/p&gt;
&lt;p&gt;For example, this script would replace each image in the document with its alternative text:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;img&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; txt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;span&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;   txt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerText &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;alt&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;   i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parentNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replaceChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;txt&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;   console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;alt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can run snippets by pressing &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;Enter&lt;/kbd&gt; (or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;Enter&lt;/kbd&gt; on mac) or using the button on the bottom of the editor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/use-scripts-as-snippets-1.png&quot; alt=&quot;The snippets editor in the Sources tool with a snippet open in the editor&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Even better, you can use the &lt;a href=&quot;https://devtoolstips.org/tips/en/execute-commands&quot;&gt;command menu&lt;/a&gt; to run snippets more easily. Simply press &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; (or &lt;kbd&gt;cmd&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; on mac) and type &lt;code&gt;!&lt;/code&gt; followed by the name of your Snippet.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/use-scripts-as-snippets-2.gif&quot; alt=&quot;Running a snippet from the Command menu&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>View performance markers in order</title>
    <link href="https://devtoolstips.org/tips/en/view-perf-markers-in-order/"/>
    <updated>2021-06-10T12:38:03Z</updated>
    <id>https://devtoolstips.org/tips/en/view-perf-markers-in-order/</id>
    <content type="html">&lt;p&gt;When logging &lt;code&gt;performance.timing&lt;/code&gt; events to the console, they appear in alphabetical order since they are properties of the &lt;code&gt;PerformanceTiming&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;In order to view them in order, you can use &lt;code&gt;console.table(performance.timing)&lt;/code&gt; and click on the column heading to sort them by time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/view-perf-markers-in-order.png&quot; alt=&quot;Screenshot of the console in Edge showing the PerformanceTiming object, with alphabetical properties, and then using console.table to sort properties&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Visualize the effect of CSS transforms</title>
    <link href="https://devtoolstips.org/tips/en/visualize-css-transforms/"/>
    <updated>2021-12-06T08:18:44Z</updated>
    <id>https://devtoolstips.org/tips/en/visualize-css-transforms/</id>
    <content type="html">&lt;p&gt;CSS transforms can sometimes be hard to wrap your head around, especially when chaining multiple transformations.&lt;/p&gt;
&lt;p&gt;Firefox helps with a cool visualization tool that allows you to see how and where the element was before being transformed, &lt;strong&gt;and&lt;/strong&gt; how it is now.&lt;/p&gt;
&lt;p&gt;Being able to compare the 2 states at the same time makes it easier to debug your &lt;code&gt;transform&lt;/code&gt; CSS properties.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the transformed element in the &lt;strong&gt;Inspector&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Find the &lt;code&gt;transform&lt;/code&gt; property in the &lt;strong&gt;Rules&lt;/strong&gt; sidebar panel.&lt;/li&gt;
&lt;li&gt;Hover over the property value.&lt;/li&gt;
&lt;li&gt;The on-page highlighter appears.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/visualize-css-transforms.gif&quot; alt=&quot;GIF animation showing how the CSS transform highlighter appears on the page when hovering over a transform CSS property in the Rules panel&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Visualize_transforms&quot;&gt;Learn more about it here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Visualize the screen reader order for elements within the page</title>
    <link href="https://devtoolstips.org/tips/en/visualize-screenreader-order/"/>
    <updated>2021-08-30T16:24:39Z</updated>
    <id>https://devtoolstips.org/tips/en/visualize-screenreader-order/</id>
    <content type="html">&lt;p&gt;Edge has an &lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/accessibility-tab&quot;&gt;accessibility tab&lt;/a&gt; within the elements panel that, among other things, lets you visualize the order a screen reader will encounter elements on a page. This is determined by the order of elements in the HTML source code.&lt;/p&gt;
&lt;p&gt;Users that can&#39;t view the screen may use a screen reader (e.g. Narrator, VoiceOver, NVDA) to consume the content of a page or focused element. If the order of the content read aloud is incorrect, it might give users a confusing experience. Incorrect ordering can occur if CSS is used to reorder elements visually in a way that is not reflected in the source order (&lt;a href=&quot;https://adrianroselli.com/2015/10/html-source-order-vs-css-display-order.html&quot;&gt;Examples here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This tool adds a layer on the page that shows the order in which elements would be read (i.e. their source order).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the Elements tab&lt;/li&gt;
&lt;li&gt;Go to the Accessibility panel&lt;/li&gt;
&lt;li&gt;In the toolbar, check the &amp;quot;Show source order&amp;quot; box&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/visualize-screenreader-order.png&quot; alt=&quot;Screenshot of the source order viewer in Microsoft Edge, showing numbered boxes around elements&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/test-tab-key-source-order-viewer#analyzing-the-order-of-keyboard-access-through-sections-of-the-page&quot;&gt;Learn more about it here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Visualize the tabbing order on the page</title>
    <link href="https://devtoolstips.org/tips/en/visualize-tabbing-order/"/>
    <updated>2021-06-29T07:25:54Z</updated>
    <id>https://devtoolstips.org/tips/en/visualize-tabbing-order/</id>
    <content type="html">&lt;p&gt;Firefox has a dedicated &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector&quot;&gt;accessibility inspector panel&lt;/a&gt; that, among other things, lets you visualize the tabbing order on a page.&lt;/p&gt;
&lt;p&gt;Users who do not or can&#39;t use a mouse or trackpad can use the tab key to navigate through focusable elements on the page. If the order in which those elements get focused is incorrect, this might give users a confusing experience.&lt;/p&gt;
&lt;p&gt;This tool adds a layer on the page that shows the order in which elements would become focused.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the Accessibility panel&lt;/li&gt;
&lt;li&gt;In the toolbar, check the &amp;quot;Show Tabbing Order&amp;quot; box&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/visualize-tabbing-order.png&quot; alt=&quot;Screenshot of the tabbing order highlighter in Firefox, showing numbered boxes around focusable elements&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector#show_web_page_tabbing_order&quot;&gt;Learn more about it here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Zoom the DevTools UI to your liking</title>
    <link href="https://devtoolstips.org/tips/en/zoom-devtools-content/"/>
    <updated>2021-10-29T07:17:37Z</updated>
    <id>https://devtoolstips.org/tips/en/zoom-devtools-content/</id>
    <content type="html">&lt;p&gt;Do you find the UI of DevTools too small to comfortably work with? Because this UI is made of HTML and CSS, just like any other web pages, it can be zoomed in (or out) by the browser just like you can zoom in on web pages.&lt;/p&gt;
&lt;p&gt;To zoom the UI of DevTools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure it has focus first (click somewhere in DevTools).&lt;/li&gt;
&lt;li&gt;Use the &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;+&lt;/kbd&gt; and &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;-&lt;/kbd&gt; keyboard shortcuts to zoom in or out (replace &lt;kbd&gt;Ctrl&lt;/kbd&gt; with &lt;kbd&gt;Cmd&lt;/kbd&gt; on Mac).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://devtoolstips.org/assets/img/zoom-devtools-content.gif&quot; alt=&quot;Gif demo showing the UI of Chrome DevTools being zoomed in and out&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
